// Hooks into react.gradle tasks to generate and upload sourcemaps automatically.
// This is achieved in 2 steps:
//
// 1. Add a --sourcemap-output flag for when the packager generates the JS bundle
// 2. Add a task that uploads the sourcemap after it has been generated

project.afterEvaluate {
    android.applicationVariants.all { def variant ->
        // 1. find the packager args from react.gradle and retrieve or add a value for --sourcemap-output
        def jsBundleTask = variant.ext.bundleJsAndAssets
        def output = setSourcemapOutputArgs(jsBundleTask)

        // 2. add a task to each variant to upload the sourcemap automatically after it is generated
        def uploadTaskName = "${jsBundleTask.name}BugsnagUpload"
        def currentUploadTask = tasks.create(uploadTaskName) {
            doLast {
                uploadSourcemap(new File(output[0]), new File(output[1]))
            }
        }
        currentUploadTask.mustRunAfter(jsBundleTask)
        jsBundleTask.finalizedBy(currentUploadTask)
    }
}

def uploadSourcemap(def bundleOutput, def sourcemapOutput) {
    project.logger.lifecycle("TODO upload bundle: $bundleOutput sourcemap: $sourcemapOutput")
}

def setSourcemapOutputArgs(def bundleTask) {
    def args = bundleTask.getProperties().get("args")
    def bundleOutput = findExistingArg(args, "--bundle-output")
    def sourcemapOutput = findExistingArg(args, "--sourcemap-output")

    // create a sourcemap if one does not already exist
    if (sourcemapOutput == null) {
        sourcemapOutput = bundleOutput + ".map"
        args.add("--sourcemap-output")
        args.add(sourcemapOutput)
    }
    bundleTask.setProperty("args", args)
    return [bundleOutput, sourcemapOutput]
}

def findExistingArg(def args, def key) {
    int index = args.indexOf(key)
    if (index != -1) {
        return args.get(index + 1);
    }
    return null
}
