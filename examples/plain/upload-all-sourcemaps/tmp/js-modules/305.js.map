{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst PropTypes = require('prop-types');\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheet = require('StyleSheet');\nconst Touchable = require('Touchable');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst ensurePositiveDelayProps = require('ensurePositiveDelayProps');\n\nimport type {PressEvent} from 'CoreEventTypes';\nimport type {Props as TouchableWithoutFeedbackProps} from 'TouchableWithoutFeedback';\nimport type {ViewStyleProp} from 'StyleSheet';\nimport type {ColorValue} from 'StyleSheetTypes';\n\nconst DEFAULT_PROPS = {\n  activeOpacity: 0.85,\n  delayPressOut: 100,\n  underlayColor: 'black',\n};\n\nconst PRESS_RETENTION_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\ntype IOSProps = $ReadOnly<{|\n  hasTVPreferredFocus?: ?boolean,\n  tvParallaxProperties?: ?Object,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...TouchableWithoutFeedbackProps,\n  ...IOSProps,\n\n  activeOpacity?: ?number,\n  underlayColor?: ?ColorValue,\n  style?: ?ViewStyleProp,\n  onShowUnderlay?: ?Function,\n  onHideUnderlay?: ?Function,\n  testOnly_pressed?: ?boolean,\n|}>;\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, which allows\n * the underlay color to show through, darkening or tinting the view.\n *\n * The underlay comes from wrapping the child in a new View, which can affect\n * layout, and sometimes cause unwanted visual artifacts if not used correctly,\n * for example if the backgroundColor of the wrapped view isn't explicitly set\n * to an opaque color.\n *\n * TouchableHighlight must have one child (not zero or more than one).\n * If you wish to have several child components, wrap them in a View.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableHighlight onPress={this._onPressButton}>\n *       <Image\n *         style={styles.button}\n *         source={require('./myButton.png')}\n *       />\n *     </TouchableHighlight>\n *   );\n * },\n * ```\n *\n *\n * ### Example\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react'\n * import {\n *   AppRegistry,\n *   StyleSheet,\n *   TouchableHighlight,\n *   Text,\n *   View,\n * } from 'react-native'\n *\n * class App extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = { count: 0 }\n *   }\n *\n *   onPress = () => {\n *     this.setState({\n *       count: this.state.count+1\n *     })\n *   }\n *\n *  render() {\n *     return (\n *       <View style={styles.container}>\n *         <TouchableHighlight\n *          style={styles.button}\n *          onPress={this.onPress}\n *         >\n *          <Text> Touch Here </Text>\n *         </TouchableHighlight>\n *         <View style={[styles.countContainer]}>\n *           <Text style={[styles.countText]}>\n *             { this.state.count !== 0 ? this.state.count: null}\n *           </Text>\n *         </View>\n *       </View>\n *     )\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'center',\n *     paddingHorizontal: 10\n *   },\n *   button: {\n *     alignItems: 'center',\n *     backgroundColor: '#DDDDDD',\n *     padding: 10\n *   },\n *   countContainer: {\n *     alignItems: 'center',\n *     padding: 10\n *   },\n *   countText: {\n *     color: '#FF00FF'\n *   }\n * })\n *\n * AppRegistry.registerComponent('App', () => App)\n * ```\n *\n */\n\nconst TouchableHighlight = ((createReactClass({\n  displayName: 'TouchableHighlight',\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n    /**\n     * Determines what the opacity of the wrapped view should be when touch is\n     * active.\n     */\n    activeOpacity: PropTypes.number,\n    /**\n     * The color of the underlay that will show through when the touch is\n     * active.\n     */\n    underlayColor: ColorPropType,\n    /**\n     * Style to apply to the container/underlay. Most commonly used to make sure\n     * rounded corners match the wrapped component.\n     */\n    style: ViewPropTypes.style,\n    /**\n     * Called immediately after the underlay is shown\n     */\n    onShowUnderlay: PropTypes.func,\n    /**\n     * Called immediately after the underlay is hidden\n     */\n    onHideUnderlay: PropTypes.func,\n    /**\n     * *(Apple TV only)* TV preferred focus (see documentation for the View component).\n     *\n     * @platform ios\n     */\n    hasTVPreferredFocus: PropTypes.bool,\n    /**\n     * *(Apple TV only)* Object with properties to control Apple TV parallax effects.\n     *\n     * enabled: If true, parallax effects are enabled.  Defaults to true.\n     * shiftDistanceX: Defaults to 2.0.\n     * shiftDistanceY: Defaults to 2.0.\n     * tiltAngle: Defaults to 0.05.\n     * magnification: Defaults to 1.0.\n     * pressMagnification: Defaults to 1.0.\n     * pressDuration: Defaults to 0.3.\n     * pressDelay: Defaults to 0.0.\n     *\n     * @platform ios\n     */\n    tvParallaxProperties: PropTypes.object,\n    /**\n     * Handy for snapshot tests.\n     */\n    testOnly_pressed: PropTypes.bool,\n  },\n\n  mixins: [NativeMethodsMixin, Touchable.Mixin],\n\n  getDefaultProps: () => DEFAULT_PROPS,\n\n  getInitialState: function() {\n    this._isMounted = false;\n    if (this.props.testOnly_pressed) {\n      return {\n        ...this.touchableGetInitialState(),\n        extraChildStyle: {\n          opacity: this.props.activeOpacity,\n        },\n        extraUnderlayStyle: {\n          backgroundColor: this.props.underlayColor,\n        },\n      };\n    } else {\n      return {\n        ...this.touchableGetInitialState(),\n        extraChildStyle: null,\n        extraUnderlayStyle: null,\n      };\n    }\n  },\n\n  componentDidMount: function() {\n    this._isMounted = true;\n    ensurePositiveDelayProps(this.props);\n  },\n\n  componentWillUnmount: function() {\n    this._isMounted = false;\n    clearTimeout(this._hideTimeout);\n  },\n\n  UNSAFE_componentWillReceiveProps: function(nextProps) {\n    ensurePositiveDelayProps(nextProps);\n  },\n\n  viewConfig: {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView,\n  },\n\n  /**\n   * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are\n   * defined on your component.\n   */\n  touchableHandleActivePressIn: function(e: PressEvent) {\n    clearTimeout(this._hideTimeout);\n    this._hideTimeout = null;\n    this._showUnderlay();\n    this.props.onPressIn && this.props.onPressIn(e);\n  },\n\n  touchableHandleActivePressOut: function(e: PressEvent) {\n    if (!this._hideTimeout) {\n      this._hideUnderlay();\n    }\n    this.props.onPressOut && this.props.onPressOut(e);\n  },\n\n  touchableHandlePress: function(e: PressEvent) {\n    clearTimeout(this._hideTimeout);\n    if (!Platform.isTV) {\n      this._showUnderlay();\n      this._hideTimeout = setTimeout(\n        this._hideUnderlay,\n        this.props.delayPressOut,\n      );\n    }\n    this.props.onPress && this.props.onPress(e);\n  },\n\n  touchableHandleLongPress: function(e: PressEvent) {\n    this.props.onLongPress && this.props.onLongPress(e);\n  },\n\n  touchableGetPressRectOffset: function() {\n    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n\n  touchableGetHitSlop: function() {\n    return this.props.hitSlop;\n  },\n\n  touchableGetHighlightDelayMS: function() {\n    return this.props.delayPressIn;\n  },\n\n  touchableGetLongPressDelayMS: function() {\n    return this.props.delayLongPress;\n  },\n\n  touchableGetPressOutDelayMS: function() {\n    return this.props.delayPressOut;\n  },\n\n  _showUnderlay: function() {\n    if (!this._isMounted || !this._hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay && this.props.onShowUnderlay();\n  },\n\n  _hideUnderlay: function() {\n    clearTimeout(this._hideTimeout);\n    this._hideTimeout = null;\n    if (this.props.testOnly_pressed) {\n      return;\n    }\n    if (this._hasPressHandler()) {\n      this.setState({\n        extraChildStyle: null,\n        extraUnderlayStyle: null,\n      });\n      this.props.onHideUnderlay && this.props.onHideUnderlay();\n    }\n  },\n\n  _hasPressHandler: function() {\n    return !!(\n      this.props.onPress ||\n      this.props.onPressIn ||\n      this.props.onPressOut ||\n      this.props.onLongPress\n    );\n  },\n\n  render: function() {\n    const child = React.Children.only(this.props.children);\n    return (\n      <View\n        accessible={this.props.accessible !== false}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityHint={this.props.accessibilityHint}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        style={StyleSheet.compose(\n          this.props.style,\n          this.state.extraUnderlayStyle,\n        )}\n        onLayout={this.props.onLayout}\n        hitSlop={this.props.hitSlop}\n        isTVSelectable={true}\n        tvParallaxProperties={this.props.tvParallaxProperties}\n        hasTVPreferredFocus={this.props.hasTVPreferredFocus}\n        onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n        onResponderTerminationRequest={\n          this.touchableHandleResponderTerminationRequest\n        }\n        onResponderGrant={this.touchableHandleResponderGrant}\n        onResponderMove={this.touchableHandleResponderMove}\n        onResponderRelease={this.touchableHandleResponderRelease}\n        onResponderTerminate={this.touchableHandleResponderTerminate}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {React.cloneElement(child, {\n          style: StyleSheet.compose(\n            child.props.style,\n            this.state.extraChildStyle,\n          ),\n        })}\n        {Touchable.renderDebugView({\n          color: 'green',\n          hitSlop: this.props.hitSlop,\n        })}\n      </View>\n    );\n  },\n}): any): React.ComponentType<Props>);\n\nmodule.exports = TouchableHighlight;\n"],"names":["ColorPropType","require","d","NativeMethodsMixin","PropTypes","Platform","React","ReactNativeViewAttributes","StyleSheet","Touchable","TouchableWithoutFeedback","View","ViewPropTypes","createReactClass","ensurePositiveDelayProps","DEFAULT_PROPS","activeOpacity","delayPressOut","underlayColor","PRESS_RETENTION_OFFSET","top","left","right","bottom","TouchableHighlight","displayName","propTypes","_objectSpread","number","style","onShowUnderlay","func","onHideUnderlay","hasTVPreferredFocus","bool","tvParallaxProperties","object","testOnly_pressed","mixins","Mixin","getDefaultProps","getInitialState","this","_isMounted","props","touchableGetInitialState","extraChildStyle","opacity","extraUnderlayStyle","backgroundColor","componentDidMount","componentWillUnmount","clearTimeout","_hideTimeout","UNSAFE_componentWillReceiveProps","nextProps","viewConfig","uiViewClassName","validAttributes","RCTView","touchableHandleActivePressIn","e","_showUnderlay","onPressIn","touchableHandleActivePressOut","_hideUnderlay","onPressOut","touchableHandlePress","isTV","setTimeout","onPress","touchableHandleLongPress","onLongPress","touchableGetPressRectOffset","pressRetentionOffset","touchableGetHitSlop","hitSlop","touchableGetHighlightDelayMS","delayPressIn","touchableGetLongPressDelayMS","delayLongPress","touchableGetPressOutDelayMS","_hasPressHandler","setState","render","child","Children","only","children","createElement","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityStates","compose","state","onLayout","isTVSelectable","onStartShouldSetResponder","touchableHandleStartShouldSetResponder","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","onResponderGrant","touchableHandleResponderGrant","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","nativeID","testID","cloneElement","renderDebugView","color","module","exports"],"mappings":"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","file":"305.js"}