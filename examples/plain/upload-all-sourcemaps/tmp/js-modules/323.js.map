{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Storage/AsyncStorage.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @flow-weak\n * @jsdoc\n */\n\n'use strict';\n\nconst NativeModules = require('NativeModules');\n\n// Use RocksDB if available, then SQLite, then file storage.\nconst RCTAsyncStorage =\n  NativeModules.AsyncRocksDBStorage ||\n  NativeModules.AsyncSQLiteDBStorage ||\n  NativeModules.AsyncLocalStorage;\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See http://facebook.github.io/react-native/docs/asyncstorage.html\n */\nconst AsyncStorage = {\n  _getRequests: ([]: Array<any>),\n  _getKeys: ([]: Array<string>),\n  _immediate: (null: ?number),\n\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getitem\n   */\n  getItem: function(\n    key: string,\n    callback?: ?(error: ?Error, result: ?string) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiGet([key], function(errors, result) {\n        // Unpack result to get value from [[key,value]]\n        const value = result && result[0] && result[0][1] ? result[0][1] : null;\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0], value);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(value);\n        }\n      });\n    });\n  },\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#setitem\n   */\n  setItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#removeitem\n   */\n  removeItem: function(\n    key: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove([key], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * **NOTE:** This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#mergeitem\n   */\n  mergeItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#clear\n   */\n  clear: function(callback?: ?(error: ?Error) => void): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.clear(function(error) {\n        callback && callback(convertError(error));\n        if (error && convertError(error)) {\n          reject(convertError(error));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getallkeys\n   */\n  getAllKeys: function(\n    callback?: ?(error: ?Error, keys: ?Array<string>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.getAllKeys(function(error, keys) {\n        callback && callback(convertError(error), keys);\n        if (error) {\n          reject(convertError(error));\n        } else {\n          resolve(keys);\n        }\n      });\n    });\n  },\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#flushgetrequests\n   * */\n  flushGetRequests: function(): void {\n    const getRequests = this._getRequests;\n    const getKeys = this._getKeys;\n\n    this._getRequests = [];\n    this._getKeys = [];\n\n    RCTAsyncStorage.multiGet(getKeys, function(errors, result) {\n      // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n      // it's much, much faster in practice for the data sets we deal with (we avoid\n      // allocating result pair arrays). This was heavily benchmarked.\n      //\n      // Is there a way to avoid using the map but fix the bug in this breaking test?\n      // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n      const map = {};\n      result &&\n        result.forEach(([key, value]) => {\n          map[key] = value;\n          return value;\n        });\n      const reqLength = getRequests.length;\n      for (let i = 0; i < reqLength; i++) {\n        const request = getRequests[i];\n        const requestKeys = request.keys;\n        const requestResult = requestKeys.map(key => [key, map[key]]);\n        request.callback && request.callback(null, requestResult);\n        request.resolve && request.resolve(requestResult);\n      }\n    });\n  },\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiget\n   */\n  multiGet: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>, result: ?Array<Array<string>>) => void,\n  ): Promise {\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        this._immediate = null;\n        this.flushGetRequests();\n      });\n    }\n\n    const getRequest = {\n      keys: keys,\n      callback: callback,\n      // do we need this?\n      keyIndex: this._getKeys.length,\n      resolve: null,\n      reject: null,\n    };\n\n    const promiseResult = new Promise((resolve, reject) => {\n      getRequest.resolve = resolve;\n      getRequest.reject = reject;\n    });\n\n    this._getRequests.push(getRequest);\n    // avoid fetching duplicates\n    keys.forEach(key => {\n      if (this._getKeys.indexOf(key) === -1) {\n        this._getKeys.push(key);\n      }\n    });\n\n    return promiseResult;\n  },\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiset\n   */\n  multiSet: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiremove\n   */\n  multiRemove: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove(keys, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * **NOTE**: This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multimerge\n   */\n  multiMerge: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n};\n\n// Not all native implementations support merge.\nif (!RCTAsyncStorage.multiMerge) {\n  delete AsyncStorage.mergeItem;\n  delete AsyncStorage.multiMerge;\n}\n\nfunction convertErrors(errs) {\n  if (!errs) {\n    return null;\n  }\n  return (Array.isArray(errs) ? errs : [errs]).map(e => convertError(e));\n}\n\nfunction convertError(error) {\n  if (!error) {\n    return null;\n  }\n  const out = new Error(error.message);\n  out.key = error.key; // flow doesn't like this :(\n  return out;\n}\n\nmodule.exports = AsyncStorage;\n"],"names":["NativeModules","require","d","RCTAsyncStorage","AsyncRocksDBStorage","AsyncSQLiteDBStorage","AsyncLocalStorage","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","convertError","getAllKeys","keys","flushGetRequests","getRequests","this","getKeys","map","forEach","_ref","_ref2","_slicedToArray","reqLength","length","i","request","requestResult","_this","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","Array","isArray","e","out","Error","message","module","exports"],"mappings":"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","file":"323.js"}