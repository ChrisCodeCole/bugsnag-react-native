{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Animated/src/animations/SpringAnimation.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('../nodes/AnimatedValue');\nconst AnimatedValueXY = require('../nodes/AnimatedValueXY');\nconst Animation = require('./Animation');\nconst SpringConfig = require('../SpringConfig');\n\nconst invariant = require('fbjs/lib/invariant');\nconst {shouldUseNativeDriver} = require('../NativeAnimatedHelper');\n\nimport type {AnimationConfig, EndCallback} from './Animation';\n\nexport type SpringAnimationConfig = AnimationConfig & {\n  toValue: number | AnimatedValue | {x: number, y: number} | AnimatedValueXY,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number | {x: number, y: number},\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport type SpringAnimationConfigSingle = AnimationConfig & {\n  toValue: number | AnimatedValue,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number,\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nfunction withDefault<T>(value: ?T, defaultValue: T): T {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  return value;\n}\n\nclass SpringAnimation extends Animation {\n  _overshootClamping: boolean;\n  _restDisplacementThreshold: number;\n  _restSpeedThreshold: number;\n  _lastVelocity: number;\n  _startPosition: number;\n  _lastPosition: number;\n  _fromValue: number;\n  _toValue: any;\n  _stiffness: number;\n  _damping: number;\n  _mass: number;\n  _initialVelocity: number;\n  _delay: number;\n  _timeout: any;\n  _startTime: number;\n  _lastTime: number;\n  _frameTime: number;\n  _onUpdate: (value: number) => void;\n  _animationFrame: any;\n  _useNativeDriver: boolean;\n\n  constructor(config: SpringAnimationConfigSingle) {\n    super();\n\n    this._overshootClamping = withDefault(config.overshootClamping, false);\n    this._restDisplacementThreshold = withDefault(\n      config.restDisplacementThreshold,\n      0.001,\n    );\n    this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    this._initialVelocity = withDefault(config.velocity, 0);\n    this._lastVelocity = withDefault(config.velocity, 0);\n    this._toValue = config.toValue;\n    this._delay = withDefault(config.delay, 0);\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction =\n      config.isInteraction !== undefined ? config.isInteraction : true;\n    this.__iterations = config.iterations !== undefined ? config.iterations : 1;\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      this._stiffness = withDefault(config.stiffness, 100);\n      this._damping = withDefault(config.damping, 10);\n      this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        withDefault(config.bounciness, 8),\n        withDefault(config.speed, 12),\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        withDefault(config.tension, 40),\n        withDefault(config.friction, 7),\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig() {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),\n      toValue: this._toValue,\n      iterations: this.__iterations,\n    };\n  }\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    const start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState(): Object {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime,\n    };\n  }\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  onUpdate(): void {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    const c: number = this._damping;\n    const m: number = this._mass;\n    const k: number = this._stiffness;\n    const v0: number = -this._initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position =\n        this._toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({finished: true});\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop(): void {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({finished: false});\n  }\n}\n\nmodule.exports = SpringAnimation;\n"],"names":["Animation","require","d","SpringConfig","invariant","shouldUseNativeDriver","withDefault","value","defaultValue","undefined","SpringAnimation","config","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","damping","mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","type","initialVelocity","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","_this2","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","start","__startNativeAnimation","_timeout","setTimeout","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","_get","prototype","clearTimeout","global","cancelAnimationFrame","module","exports"],"mappings":"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","file":"227.js"}