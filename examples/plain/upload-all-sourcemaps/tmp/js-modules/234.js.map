{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Lists/MetroListView.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst React = require('React');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype Item = any;\n\ntype NormalProps = {\n  FooterComponent?: React.ComponentType<*>,\n  renderItem: (info: Object) => ?React.Element<any>,\n  /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n   * suppresses an error when upgrading Flow's support for React. To see the\n   * error delete this comment and run Flow. */\n  renderSectionHeader?: ({section: Object}) => ?React.Element<any>,\n  SeparatorComponent?: ?React.ComponentType<*>, // not supported yet\n\n  // Provide either `items` or `sections`\n  items?: ?Array<Item>, // By default, an Item is assumed to be {key: string}\n  // $FlowFixMe - Something is a little off with the type Array<Item>\n  sections?: ?Array<{key: string, data: Array<Item>}>,\n\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: boolean,\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n};\ntype DefaultProps = {\n  keyExtractor: (item: Item, index: number) => string,\n};\ntype Props = NormalProps & DefaultProps;\n\n/**\n * This is just a wrapper around the legacy ListView that matches the new API of FlatList, but with\n * some section support tacked on. It is recommended to just use FlatList directly, this component\n * is mostly for debugging and performance comparison.\n */\nclass MetroListView extends React.Component<Props, $FlowFixMeState> {\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    throw new Error('scrollToEnd not supported in legacy ListView.');\n  }\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToIndex not supported in legacy ListView.');\n  }\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: Item,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToItem not supported in legacy ListView.');\n  }\n  scrollToLocation(params: {\n    animated?: ?boolean,\n    itemIndex: number,\n    sectionIndex: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToLocation not supported in legacy ListView.');\n  }\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    // $FlowFixMe Invalid prop usage\n    this._listRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n  getListRef() {\n    return this._listRef;\n  }\n  setNativeProps(props: Object) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n  static defaultProps: DefaultProps = {\n    keyExtractor: (item, index) => item.key || String(index),\n    renderScrollComponent: (props: Props) => {\n      if (props.onRefresh) {\n        return (\n          // $FlowFixMe Invalid prop usage\n          <ScrollView\n            {...props}\n            refreshControl={\n              /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss)\n               * This comment suppresses an error when upgrading Flow's support\n               * for React. To see the error delete this comment and run Flow.\n               */\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={props.onRefresh}\n              />\n            }\n          />\n        );\n      } else {\n        // $FlowFixMe Invalid prop usage\n        return <ScrollView {...props} />;\n      }\n    },\n  };\n  state = this._computeState(this.props, {\n    ds: new ListView.DataSource({\n      rowHasChanged: (itemA, itemB) => true,\n      sectionHeaderHasChanged: () => true,\n      getSectionHeaderData: (dataBlob, sectionID) =>\n        this.state.sectionHeaderData[sectionID],\n    }),\n    sectionHeaderData: {},\n  });\n  UNSAFE_componentWillReceiveProps(newProps: Props) {\n    this.setState(state => this._computeState(newProps, state));\n  }\n  render() {\n    return (\n      // $FlowFixMe Found when typing ListView\n      <ListView\n        {...this.props}\n        dataSource={this.state.ds}\n        ref={this._captureRef}\n        renderRow={this._renderRow}\n        renderFooter={this.props.FooterComponent && this._renderFooter}\n        renderSectionHeader={this.props.sections && this._renderSectionHeader}\n        renderSeparator={this.props.SeparatorComponent && this._renderSeparator}\n      />\n    );\n  }\n  _listRef: ?ListView;\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n  _computeState(props: Props, state) {\n    const sectionHeaderData = {};\n    if (props.sections) {\n      invariant(!props.items, 'Cannot have both sections and items props.');\n      const sections = {};\n      props.sections.forEach((sectionIn, ii) => {\n        const sectionID = 's' + ii;\n        sections[sectionID] = sectionIn.data;\n        sectionHeaderData[sectionID] = sectionIn;\n      });\n      return {\n        ds: state.ds.cloneWithRowsAndSections(sections),\n        sectionHeaderData,\n      };\n    } else {\n      invariant(!props.sections, 'Cannot have both sections and items props.');\n      return {\n        // $FlowFixMe Found when typing ListView\n        ds: state.ds.cloneWithRows(props.items),\n        sectionHeaderData,\n      };\n    }\n  }\n  /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n   * suppresses an error when upgrading Flow's support for React. To see the\n   * error delete this comment and run Flow. */\n  _renderFooter = () => <this.props.FooterComponent key=\"$footer\" />;\n  _renderRow = (item, sectionID, rowID, highlightRow) => {\n    return this.props.renderItem({item, index: rowID});\n  };\n  _renderSectionHeader = (section, sectionID) => {\n    const {renderSectionHeader} = this.props;\n    invariant(\n      renderSectionHeader,\n      'Must provide renderSectionHeader with sections prop',\n    );\n    return renderSectionHeader({section});\n  };\n  _renderSeparator = (sID, rID) => (\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    <this.props.SeparatorComponent key={sID + rID} />\n  );\n}\n\nmodule.exports = MetroListView;\n"],"names":["ListView","require","d","React","RefreshControl","ScrollView","invariant","MetroListView","state","_this","_computeState","props","ds","DataSource","rowHasChanged","itemA","itemB","sectionHeaderHasChanged","getSectionHeaderData","dataBlob","sectionID","sectionHeaderData","_captureRef","ref","_listRef","_renderFooter","createElement","_this2","FooterComponent","key","_renderRow","item","rowID","highlightRow","renderItem","index","_renderSectionHeader","section","renderSectionHeader","_renderSeparator","sID","rID","SeparatorComponent","params","Error","animated","offset","this","scrollTo","horizontal","x","y","setNativeProps","newProps","_this3","setState","_extends","dataSource","renderRow","renderFooter","sections","renderSeparator","items","forEach","sectionIn","ii","data","cloneWithRowsAndSections","cloneWithRows","Component","defaultProps","keyExtractor","String","renderScrollComponent","onRefresh","refreshControl","refreshing","module","exports"],"mappings":"4BASA,6EAEMA,EAAWC,EAAOC,EAAA,IAClBC,EAAQF,EAAOC,EAAA,IACfE,EAAiBH,EAAOC,EAAA,IACxBG,EAAaJ,EAAOC,EAAA,IAEpBI,EAAYL,EAAOC,EAAA,KA0CnBK,uLAoEJC,MAAQC,EAAKC,cAAcD,EAAKE,OAC9BC,GAAI,IAAIZ,EAASa,YACfC,cAAe,SAACC,EAAOC,GAAR,OAAkB,GACjCC,wBAAyB,WAAA,OAAM,GAC/BC,qBAAsB,SAACC,EAAUC,GAAX,OACpBX,EAAKD,MAAMa,kBAAkBD,MAEjCC,yBAoBFC,YAAc,SAAAC,GACZd,EAAKe,SAAWD,KA4BlBE,cAAgB,WAAA,OAAMtB,EAAAuB,cAACC,EAAKhB,MAAMiB,iBAAgBC,IAAI,eACtDC,WAAa,SAACC,EAAMX,EAAWY,EAAOC,GACpC,OAAOxB,EAAKE,MAAMuB,YAAYH,KAAAA,EAAMI,MAAOH,OAE7CI,qBAAuB,SAACC,EAASjB,GAAc,IACtCkB,EAAuB7B,EAAKE,MAA5B2B,oBAKP,OAJAhC,EACEgC,EACA,uDAEKA,GAAqBD,QAAAA,OAE9BE,iBAAmB,SAACC,EAAKC,GAAN,OAIjBtC,EAAAuB,cAACC,EAAKhB,MAAM+B,oBAAmBb,IAAKW,EAAMC,4DA3IhCE,GACV,MAAM,IAAIC,MAAM,uFAEJD,GAKZ,MAAM,IAAIC,MAAM,wFAELD,GAKX,MAAM,IAAIC,MAAM,2FAEDD,GAOf,MAAM,IAAIC,MAAM,6FAEHD,GAA+C,IACrDE,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,OAEjBC,KAAKvB,SAASwB,SACZD,KAAKpC,MAAMsC,YAAcC,EAAGJ,EAAQD,SAAAA,IAAaM,EAAGL,EAAQD,SAAAA,yCAI9D,OAAOE,KAAKvB,gDAECb,GACToC,KAAKvB,UACPuB,KAAKvB,SAAS4B,eAAezC,4DAsCA0C,GAAiB,IAAAC,EAAAP,KAChDA,KAAKQ,SAAS,SAAA/C,GAAK,OAAI8C,EAAK5C,cAAc2C,EAAU7C,sCAGpD,OAEEL,EAAAuB,cAAC1B,EAADwD,KACMT,KAAKpC,OACT8C,WAAYV,KAAKvC,MAAMI,GACvBW,IAAKwB,KAAKzB,YACVoC,UAAWX,KAAKjB,WAChB6B,aAAcZ,KAAKpC,MAAMiB,iBAAmBmB,KAAKtB,cACjDa,oBAAqBS,KAAKpC,MAAMiD,UAAYb,KAAKX,qBACjDyB,gBAAiBd,KAAKpC,MAAM+B,oBAAsBK,KAAKR,0DAQ/C5B,EAAcH,GAC1B,IAAMa,KACN,GAAIV,EAAMiD,SAAU,CAClBtD,GAAWK,EAAMmD,MAAO,8CACxB,IAAMF,KAMN,OALAjD,EAAMiD,SAASG,QAAQ,SAACC,EAAWC,GACjC,IAAM7C,EAAY,IAAM6C,EACxBL,EAASxC,GAAa4C,EAAUE,KAChC7C,EAAkBD,GAAa4C,KAG/BpD,GAAIJ,EAAMI,GAAGuD,yBAAyBP,GACtCvC,kBAAAA,GAIF,OADAf,GAAWK,EAAMiD,SAAU,+CAGzBhD,GAAIJ,EAAMI,GAAGwD,cAAczD,EAAMmD,OACjCzC,kBAAAA,WArHoBlB,EAAMkE,WAA5B9D,EA0CG+D,cACLC,aAAc,SAACxC,EAAMI,GAAP,OAAiBJ,EAAKF,KAAO2C,OAAOrC,IAClDsC,sBAAuB,SAAC9D,GACtB,OAAIA,EAAM+D,UAGNvE,EAAAuB,cAACrB,EAADmD,KACM7C,GACJgE,eAKExE,EAAAuB,cAACtB,GACCwE,WAAYjE,EAAMiE,WAClBF,UAAW/D,EAAM+D,eAOlBvE,EAAAuB,cAACrB,EAAeM,KAgF/BkE,EAAOC,QAAUvE","file":"234.js"}