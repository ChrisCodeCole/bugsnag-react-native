{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Animated/src/SpringConfig.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\ntype SpringConfigType = {\n  stiffness: number,\n  damping: number,\n};\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction fromOrigamiTensionAndFriction(\n  tension: number,\n  friction: number,\n): SpringConfigType {\n  return {\n    stiffness: stiffnessFromOrigamiValue(tension),\n    damping: dampingFromOrigamiValue(friction),\n  };\n}\n\nfunction fromBouncinessAndSpeed(\n  bounciness: number,\n  speed: number,\n): SpringConfigType {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return (\n      0.00000045 * Math.pow(x, 3) -\n      0.000332 * Math.pow(x, 2) +\n      0.1078 * x +\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  let b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(speed / 1.7, 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01,\n  );\n\n  return {\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction),\n  };\n}\n\nmodule.exports = {\n  fromOrigamiTensionAndFriction,\n  fromBouncinessAndSpeed,\n};\n"],"names":["stiffnessFromOrigamiValue","oValue","dampingFromOrigamiValue","module","exports","fromOrigamiTensionAndFriction","tension","friction","stiffness","damping","fromBouncinessAndSpeed","bounciness","speed","normalize","value","startValue","endValue","projectNormal","n","start","end","linearInterpolation","t","b3Friction2","x","Math","pow","b3Friction3","b","bouncyTension","bouncyFriction"],"mappings":"4BAUA,aAOA,SAASA,EAA0BC,GACjC,OAAuB,MAAfA,EAAS,IAAa,IAGhC,SAASC,EAAwBD,GAC/B,OAAsB,GAAdA,EAAS,GAAS,GA4E5BE,EAAOC,SACLC,8BA1EF,SACEC,EACAC,GAEA,OACEC,UAAWR,EAA0BM,GACrCG,QAASP,EAAwBK,KAqEnCG,uBAjEF,SACEC,EACAC,GAEA,SAASC,EAAUC,EAAOC,EAAYC,GACpC,OAAQF,EAAQC,IAAeC,EAAWD,GAG5C,SAASE,EAAcC,EAAGC,EAAOC,GAC/B,OAAOD,EAAQD,GAAKE,EAAMD,GAG5B,SAASE,EAAoBC,EAAGH,EAAOC,GACrC,OAAOE,EAAIF,GAAO,EAAIE,GAAKH,EAW7B,SAASI,EAAYC,GACnB,OAAO,MAAWC,KAAKC,IAAIF,EAAG,GAAK,KAAQC,KAAKC,IAAIF,EAAG,GAAK,IAAOA,EAAI,EAGzE,SAASG,EAAYH,GACnB,OACE,OAAaC,KAAKC,IAAIF,EAAG,GACzB,OAAWC,KAAKC,IAAIF,EAAG,GACvB,MAASA,EACT,KAcJ,IAAII,EAAIf,EAAUF,EAAa,IAAK,EAAG,IACvCiB,EAAIX,EAAcW,EAAG,EAAG,IACxB,IAjCmCN,EAAGH,EAqBlBb,EAjBCkB,EA8BfK,EAAgBZ,EADZJ,EAAUD,EAAQ,IAAK,EAAG,IACG,GAAK,KACtCkB,GAnC6BR,EAoCjCM,EApCoCT,GAqBlBb,EAgBPuB,IAfI,IAlBIL,EAmBElB,EAlBd,KAASmB,KAAKC,IAAIF,EAAG,GAAK,KAAQC,KAAKC,IAAIF,EAAG,GAAK,IAAOA,EAAI,MAmB1DlB,EAAU,IAAMA,GAAW,GAC7BiB,EAAYjB,GAEZqB,EAAYrB,GA1Bde,EAAoB,EAAIC,EAAIA,EAAIA,EAAGH,EAqC1C,MAGF,OACEX,UAAWR,EAA0B6B,GACrCpB,QAASP,EAAwB4B","file":"228.js"}