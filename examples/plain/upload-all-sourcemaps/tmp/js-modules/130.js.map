{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Blob/Blob.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from 'BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const BlobManager = require('BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  set data(data: ?BlobData) {\n    this._data = data;\n  }\n\n  get data(): BlobData {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start?: number, end?: number): Blob {\n    const BlobManager = require('BlobManager');\n    let {offset, size} = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          end = this.size + end;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    const BlobManager = require('BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  get size(): number {\n    return this.data.size;\n  }\n\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  get type(): string {\n    return this.data.type || '';\n  }\n}\n\nmodule.exports = Blob;\n"],"names":["Blob","parts","arguments","length","undefined","options","_classCallCheck","this","BlobManager","require","d","data","createFromParts","start","end","_this$data","offset","size","createFromOptions","blobId","release","_data","Error","type","module","exports"],"mappings":"4BAUA,qCAyCMA,cAQJ,SAAAA,IAAqE,IAAzDC,EAAyDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MAAvBG,EAAuBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAAE,EAAAC,KAAAP,GACnE,IAAMQ,EAAcC,EAAOC,EAAA,IAC3BH,KAAKI,KAAOH,EAAYI,gBAAgBX,EAAOI,GAASM,6CAoBpDE,EAAgBC,GACpB,IAAMN,EAAcC,EAAOC,EAAA,IADaK,EAEnBR,KAAKI,KAArBK,EAFmCD,EAEnCC,OAAQC,EAF2BF,EAE3BE,KAgBb,MAdqB,iBAAVJ,IACLA,EAAQI,IACVJ,EAAQI,GAEVD,GAAUH,EACVI,GAAQJ,EAEW,iBAARC,IACLA,EAAM,IACRA,EAAMP,KAAKU,KAAOH,GAEpBG,EAAOH,EAAMD,IAGVL,EAAYU,mBACjBC,OAAQZ,KAAKI,KAAKQ,OAClBH,OAAAA,EACAC,KAAAA,oCAiBkBR,EAAOC,EAAA,IACfU,QAAQb,KAAKI,KAAKQ,QAC9BZ,KAAKI,KAAO,gCApDLA,GACPJ,KAAKc,MAAQV,kBAIb,IAAKJ,KAAKc,MACR,MAAM,IAAIC,MAAM,mDAGlB,OAAOf,KAAKc,mCAkDZ,OAAOd,KAAKI,KAAKM,kCAQjB,OAAOV,KAAKI,KAAKY,MAAQ,aAI7BC,EAAOC,QAAUzB","file":"130.js"}