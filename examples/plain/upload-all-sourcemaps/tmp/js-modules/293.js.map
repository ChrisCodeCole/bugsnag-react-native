{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ListView = require('ListView');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst SwipeableListViewDataSource = require('SwipeableListViewDataSource');\nconst SwipeableRow = require('SwipeableRow');\n\ntype DefaultProps = {\n  bounceFirstRowOnMount: boolean,\n  renderQuickActions: Function,\n};\n\ntype Props = {\n  bounceFirstRowOnMount: boolean,\n  dataSource: SwipeableListViewDataSource,\n  maxSwipeDistance:\n    | number\n    | ((rowData: any, sectionID: string, rowID: string) => number),\n  onScroll?: ?Function,\n  renderRow: Function,\n  renderQuickActions: Function,\n};\n\ntype State = {\n  dataSource: Object,\n};\n\n/**\n * A container component that renders multiple SwipeableRow's in a ListView\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `ListView`, so use it as if it were a ListView, but\n * with extra props, i.e.\n *\n * let ds = SwipeableListView.getNewDataSource();\n * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n * // ..\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - More to come\n */\nclass SwipeableListView extends React.Component<Props, State> {\n  props: Props;\n  state: State;\n\n  _listViewRef: ?React.Element<any> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static getNewDataSource(): Object {\n    return new SwipeableListViewDataSource({\n      getRowData: (data, sectionID, rowID) => data[sectionID][rowID],\n      getSectionHeaderData: (data, sectionID) => data[sectionID],\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n  }\n\n  static propTypes = {\n    /**\n     * To alert the user that swiping is possible, the first row can bounce\n     * on component mount.\n     */\n    bounceFirstRowOnMount: PropTypes.bool.isRequired,\n    /**\n     * Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n     * then use it just like you would a normal ListView data source\n     */\n    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,\n    // Maximum distance to open to after a swipe\n    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func])\n      .isRequired,\n    // Callback method to render the swipeable view\n    renderRow: PropTypes.func.isRequired,\n    // Callback method to render the view that will be unveiled on swipe\n    renderQuickActions: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    bounceFirstRowOnMount: false,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props, context: any): void {\n    super(props, context);\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n    this.state = {\n      dataSource: this.props.dataSource,\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props): void {\n    if (\n      this.state.dataSource.getDataSource() !==\n      nextProps.dataSource.getDataSource()\n    ) {\n      this.setState({\n        dataSource: nextProps.dataSource,\n      });\n    }\n  }\n\n  render(): React.Node {\n    return (\n      // $FlowFixMe Found when typing ListView\n      <ListView\n        {...this.props}\n        ref={ref => {\n          // $FlowFixMe Found when typing ListView\n          this._listViewRef = ref;\n        }}\n        dataSource={this.state.dataSource.getDataSource()}\n        onScroll={this._onScroll}\n        renderRow={this._renderRow}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.props.dataSource.getOpenRowID()) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(null),\n      });\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  /**\n   * This is a work-around to lock vertical `ListView` scrolling on iOS and\n   * mimic Android behaviour. Locking vertical scrolling when horizontal\n   * scrolling is active allows us to significantly improve framerates\n   * (from high 20s to almost consistently 60 fps)\n   */\n  _setListViewScrollable(value: boolean): void {\n    if (\n      this._listViewRef &&\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n      * error found when Flow v0.68 was deployed. To see the error delete this\n      * comment and run Flow. */\n      typeof this._listViewRef.setNativeProps === 'function'\n    ) {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  // Passing through ListView's getScrollResponder() function\n  getScrollResponder(): ?Object {\n    if (\n      this._listViewRef &&\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n      * error found when Flow v0.68 was deployed. To see the error delete this\n      * comment and run Flow. */\n      typeof this._listViewRef.getScrollResponder === 'function'\n    ) {\n      return this._listViewRef.getScrollResponder();\n    }\n  }\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _renderRow = (\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ): React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(\n      rowData,\n      sectionID,\n      rowID,\n    );\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderRow(rowData, sectionID, rowID);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = rowID === this.props.dataSource.getFirstRowID();\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={rowData.id === this.props.dataSource.getOpenRowID()}\n        maxSwipeDistance={this._getMaxSwipeDistance(rowData, sectionID, rowID)}\n        key={rowID}\n        onOpen={() => this._onOpen(rowData.id)}\n        onClose={() => this._onClose(rowData.id)}\n        onSwipeEnd={() => this._setListViewScrollable(true)}\n        onSwipeStart={() => this._setListViewScrollable(false)}\n        shouldBounceOnMount={shouldBounceOnMount}>\n        {this.props.renderRow(rowData, sectionID, rowID)}\n      </SwipeableRow>\n    );\n  };\n\n  _onOpen(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID),\n    });\n  }\n\n  _onClose(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null),\n    });\n  }\n}\n\nmodule.exports = SwipeableListView;\n"],"names":["ListView","require","d","PropTypes","React","SwipeableListViewDataSource","SwipeableRow","SwipeableListView","props","context","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_listViewRef","_shouldBounceFirstRowOnMount","_onScroll","e","dataSource","getOpenRowID","setState","state","setOpenRowID","onScroll","_renderRow","rowData","sectionID","rowID","slideoutView","renderQuickActions","renderRow","shouldBounceOnMount","getFirstRowID","createElement","isOpen","id","maxSwipeDistance","_getMaxSwipeDistance","key","onOpen","_onOpen","onClose","_onClose","onSwipeEnd","_setListViewScrollable","onSwipeStart","bounceFirstRowOnMount","getRowData","data","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","nextProps","getDataSource","_this2","_extends","ref","value","setNativeProps","scrollEnabled","getScrollResponder","Component","propTypes","bool","isRequired","instanceOf","oneOfType","number","func","defaultProps","module","exports"],"mappings":"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","file":"293.js"}