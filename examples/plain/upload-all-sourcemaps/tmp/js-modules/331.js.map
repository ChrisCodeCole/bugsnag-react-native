{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTPushNotificationManager = require('NativeModules')\n  .PushNotificationManager;\nconst invariant = require('fbjs/lib/invariant');\n\nconst PushNotificationEmitter = new NativeEventEmitter(\n  RCTPushNotificationManager,\n);\n\nconst _notifHandlers = new Map();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Enum<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n}>;\n\n/**\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * See https://facebook.github.io/react-native/docs/pushnotificationios.html\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | Object;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#presentlocalnotification\n   */\n  static presentLocalNotification(details: Object) {\n    RCTPushNotificationManager.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#schedulelocalnotification\n   */\n  static scheduleLocalNotification(details: Object) {\n    RCTPushNotificationManager.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#cancelalllocalnotifications\n   */\n  static cancelAllLocalNotifications() {\n    RCTPushNotificationManager.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    RCTPushNotificationManager.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the appâ€™s notifications that are still displayed in Notification Center.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    RCTPushNotificationManager.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    RCTPushNotificationManager.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number) {\n    RCTPushNotificationManager.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function) {\n    RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object) {\n    RCTPushNotificationManager.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getscheduledlocalnotifications\n   */\n  static getScheduledLocalNotifications(callback: Function) {\n    RCTPushNotificationManager.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app\n   * is running in the foreground or the background.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#addeventlistener\n   */\n  static addEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        registrationInfo => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        errorInfo => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#removeeventlistener\n   */\n  static removeEventListener(\n    type: PushNotificationEventName,\n    handler: Function,\n  ) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n  }> {\n    let requestedPermissions = {};\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n      };\n    } else {\n      requestedPermissions = {\n        alert: true,\n        badge: true,\n        sound: true,\n      };\n    }\n    return RCTPushNotificationManager.requestPermissions(requestedPermissions);\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#abandonpermissions\n   */\n  static abandonPermissions() {\n    RCTPushNotificationManager.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#checkpermissions\n   */\n  static checkPermissions(callback: Function) {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    RCTPushNotificationManager.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    return RCTPushNotificationManager.getInitialNotification().then(\n      notification => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html\n      Object.keys(nativeNotif).forEach(notifKey => {\n        const notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#finish\n   */\n  finish(fetchResult: string) {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    RCTPushNotificationManager.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    // alias because \"alert\" is an ambiguous name\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notif\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n}\n\nmodule.exports = PushNotificationIOS;\n"],"names":["NativeEventEmitter","require","d","RCTPushNotificationManager","PushNotificationManager","invariant","PushNotificationEmitter","_notifHandlers","Map","PushNotificationIOS","nativeNotif","_this","this","_classCallCheck","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","Object","keys","forEach","notifKey","notifVal","_alert","alert","_sound","sound","_badgeCount","badge","_category","category","_contentAvailable","_threadID","applicationIconBadgeNumber","soundName","alertBody","userInfo","details","presentLocalNotification","scheduleLocalNotification","cancelAllLocalNotifications","removeAllDeliveredNotifications","callback","getDeliveredNotifications","identifiers","removeDeliveredNotifications","number","setApplicationIconBadgeNumber","getApplicationIconBadgeNumber","cancelLocalNotifications","getScheduledLocalNotifications","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","get","remove","delete","permissions","requestedPermissions","requestPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","fetchResult","onFinishRemoteNotification","FetchResult","NewData","NoData","ResultFailed","module","exports"],"mappings":"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","file":"331.js"}