{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/ReactNative/getNativeComponentAttributes.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst UIManager = require('UIManager');\n\nconst insetsDiffer = require('insetsDiffer');\nconst matricesDiffer = require('matricesDiffer');\nconst pointsDiffer = require('pointsDiffer');\nconst processColor = require('processColor');\nconst resolveAssetSource = require('resolveAssetSource');\nconst sizesDiffer = require('sizesDiffer');\nconst invariant = require('fbjs/lib/invariant');\nconst warning = require('fbjs/lib/warning');\n\nfunction getNativeComponentAttributes(uiViewClassName: string) {\n  const viewConfig = UIManager[uiViewClassName];\n\n  invariant(\n    viewConfig != null && viewConfig.NativeProps != null,\n    'requireNativeComponent: \"%s\" was not found in the UIManager.',\n    uiViewClassName,\n  );\n\n  // TODO: This seems like a whole lot of runtime initialization for every\n  // native component that can be either avoided or simplified.\n  let {baseModuleName, bubblingEventTypes, directEventTypes} = viewConfig;\n  let nativeProps = viewConfig.NativeProps;\n  while (baseModuleName) {\n    const baseModule = UIManager[baseModuleName];\n    if (!baseModule) {\n      warning(false, 'Base module \"%s\" does not exist', baseModuleName);\n      baseModuleName = null;\n    } else {\n      bubblingEventTypes = {\n        ...baseModule.bubblingEventTypes,\n        ...bubblingEventTypes,\n      };\n      directEventTypes = {\n        ...baseModule.directEventTypes,\n        ...directEventTypes,\n      };\n      nativeProps = {\n        ...baseModule.NativeProps,\n        ...nativeProps,\n      };\n      baseModuleName = baseModule.baseModuleName;\n    }\n  }\n\n  const validAttributes = {};\n\n  for (const key in nativeProps) {\n    const typeName = nativeProps[key];\n    const diff = getDifferForType(typeName);\n    const process = getProcessorForType(typeName);\n\n    validAttributes[key] =\n      diff == null && process == null ? true : {diff, process};\n  }\n\n  // Unfortunately, the current setup declares style properties as top-level\n  // props. This makes it so we allow style properties in the `style` prop.\n  // TODO: Move style properties into a `style` prop and disallow them as\n  // top-level props on the native side.\n  validAttributes.style = ReactNativeStyleAttributes;\n\n  Object.assign(viewConfig, {\n    uiViewClassName,\n    validAttributes,\n    bubblingEventTypes,\n    directEventTypes,\n  });\n\n  if (!hasAttachedDefaultEventTypes) {\n    attachDefaultEventTypes(viewConfig);\n    hasAttachedDefaultEventTypes = true;\n  }\n\n  return viewConfig;\n}\n\n// TODO: Figure out how this makes sense. We're using a global boolean to only\n// initialize this on the first eagerly initialized native component.\nlet hasAttachedDefaultEventTypes = false;\nfunction attachDefaultEventTypes(viewConfig: any) {\n  // This is supported on UIManager platforms (ex: Android),\n  // as lazy view managers are not implemented for all platforms.\n  // See [UIManager] for details on constants and implementations.\n  if (UIManager.ViewManagerNames) {\n    // Lazy view managers enabled.\n    viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());\n  } else {\n    viewConfig.bubblingEventTypes = merge(\n      viewConfig.bubblingEventTypes,\n      UIManager.genericBubblingEventTypes,\n    );\n    viewConfig.directEventTypes = merge(\n      viewConfig.directEventTypes,\n      UIManager.genericDirectEventTypes,\n    );\n  }\n}\n\n// TODO: Figure out how to avoid all this runtime initialization cost.\nfunction merge(destination: ?Object, source: ?Object): ?Object {\n  if (!source) {\n    return destination;\n  }\n  if (!destination) {\n    return source;\n  }\n\n  for (const key in source) {\n    if (!source.hasOwnProperty(key)) {\n      continue;\n    }\n\n    let sourceValue = source[key];\n    if (destination.hasOwnProperty(key)) {\n      const destinationValue = destination[key];\n      if (\n        typeof sourceValue === 'object' &&\n        typeof destinationValue === 'object'\n      ) {\n        sourceValue = merge(destinationValue, sourceValue);\n      }\n    }\n    destination[key] = sourceValue;\n  }\n  return destination;\n}\n\nfunction getDifferForType(\n  typeName: string,\n): ?(prevProp: any, nextProp: any) => boolean {\n  switch (typeName) {\n    // iOS Types\n    case 'CATransform3D':\n      return matricesDiffer;\n    case 'CGPoint':\n      return pointsDiffer;\n    case 'CGSize':\n      return sizesDiffer;\n    case 'UIEdgeInsets':\n      return insetsDiffer;\n    // Android Types\n    // (not yet implemented)\n  }\n  return null;\n}\n\nfunction getProcessorForType(typeName: string): ?(nextProp: any) => any {\n  switch (typeName) {\n    // iOS Types\n    case 'CGColor':\n    case 'UIColor':\n      return processColor;\n    case 'CGColorArray':\n    case 'UIColorArray':\n      return processColorArray;\n    case 'CGImage':\n    case 'UIImage':\n    case 'RCTImageSource':\n      return resolveAssetSource;\n    // Android Types\n    case 'Color':\n      return processColor;\n    case 'ColorArray':\n      return processColorArray;\n  }\n  return null;\n}\n\nfunction processColorArray(colors: ?Array<any>): ?Array<?number> {\n  return colors == null ? null : colors.map(processColor);\n}\n\nmodule.exports = getNativeComponentAttributes;\n"],"names":["ReactNativeStyleAttributes","require","d","UIManager","insetsDiffer","matricesDiffer","pointsDiffer","processColor","resolveAssetSource","sizesDiffer","invariant","warning","hasAttachedDefaultEventTypes","attachDefaultEventTypes","viewConfig","ViewManagerNames","merge","getDefaultEventTypes","bubblingEventTypes","genericBubblingEventTypes","directEventTypes","genericDirectEventTypes","destination","source","key","hasOwnProperty","sourceValue","destinationValue","getDifferForType","typeName","getProcessorForType","processColorArray","colors","map","module","exports","uiViewClassName","NativeProps","baseModuleName","nativeProps","baseModule","_objectSpread","validAttributes","diff","process","style","_extends"],"mappings":"4BAUA,qCAEMA,EAA6BC,EAAOC,EAAA,IACpCC,EAAYF,EAAOC,EAAA,IAEnBE,EAAeH,EAAOC,EAAA,IACtBG,EAAiBJ,EAAOC,EAAA,IACxBI,EAAeL,EAAOC,EAAA,IACtBK,EAAeN,EAAOC,EAAA,IACtBM,EAAqBP,EAAOC,EAAA,IAC5BO,EAAcR,EAAOC,EAAA,IACrBQ,EAAYT,EAAOC,EAAA,KACnBS,EAAUV,EAAOC,EAAA,KAuEvB,IAAIU,GAA+B,EACnC,SAASC,EAAwBC,GAI3BX,EAAUY,iBAEZD,EAAaE,EAAMF,EAAYX,EAAUc,yBAEzCH,EAAWI,mBAAqBF,EAC9BF,EAAWI,mBACXf,EAAUgB,2BAEZL,EAAWM,iBAAmBJ,EAC5BF,EAAWM,iBACXjB,EAAUkB,0BAMhB,SAASL,EAAMM,EAAsBC,GACnC,IAAKA,EACH,OAAOD,EAET,IAAKA,EACH,OAAOC,EAGT,IAAK,IAAMC,KAAOD,EAChB,GAAKA,EAAOE,eAAeD,GAA3B,CAIA,IAAIE,EAAcH,EAAOC,GACzB,GAAIF,EAAYG,eAAeD,GAAM,CACnC,IAAMG,EAAmBL,EAAYE,GAEZ,iBAAhBE,GACqB,iBAArBC,IAEPD,EAAcV,EAAMW,EAAkBD,IAG1CJ,EAAYE,GAAOE,EAErB,OAAOJ,EAGT,SAASM,EACPC,GAEA,OAAQA,GAEN,IAAK,gBACH,OAAOxB,EACT,IAAK,UACH,OAAOC,EACT,IAAK,SACH,OAAOG,EACT,IAAK,eACH,OAAOL,EAIX,OAAO,KAGT,SAAS0B,EAAoBD,GAC3B,OAAQA,GAEN,IAAK,UACL,IAAK,UACH,OAAOtB,EACT,IAAK,eACL,IAAK,eACH,OAAOwB,EACT,IAAK,UACL,IAAK,UACL,IAAK,iBACH,OAAOvB,EAET,IAAK,QACH,OAAOD,EACT,IAAK,aACH,OAAOwB,EAEX,OAAO,KAGT,SAASA,EAAkBC,GACzB,OAAiB,MAAVA,EAAiB,KAAOA,EAAOC,IAAI1B,GAG5C2B,EAAOC,QAnKP,SAAsCC,GACpC,IAAMtB,EAAaX,EAAUiC,GAE7B1B,EACgB,MAAdI,GAAgD,MAA1BA,EAAWuB,YACjC,+DACAD,GAOF,IAb6D,IAWxDE,EAAwDxB,EAAxDwB,eAAgBpB,EAAwCJ,EAAxCI,mBAAoBE,EAAoBN,EAApBM,iBACrCmB,EAAczB,EAAWuB,YACtBC,GAAgB,CACrB,IAAME,EAAarC,EAAUmC,GACxBE,GAIHtB,EAAkBuB,KACbD,EAAWtB,mBACXA,GAELE,EAAgBqB,KACXD,EAAWpB,iBACXA,GAELmB,EAAWE,KACND,EAAWH,YACXE,GAELD,EAAiBE,EAAWF,iBAf5B3B,GAAQ,EAAO,kCAAmC2B,GAClDA,EAAiB,MAkBrB,IAAMI,KAEN,IAAK,IAAMlB,KAAOe,EAAa,CAC7B,IAAMV,EAAWU,EAAYf,GACvBmB,EAAOf,EAAiBC,GACxBe,EAAUd,EAAoBD,GAEpCa,EAAgBlB,GACN,MAARmB,GAA2B,MAAXC,IAA0BD,KAAAA,EAAMC,QAAAA,GAqBpD,OAdAF,EAAgBG,MAAQ7C,EAExB8C,EAAchC,GACZsB,gBAAAA,EACAM,gBAAAA,EACAxB,mBAAAA,EACAE,iBAAAA,IAGGR,IACHC,EAAwBC,GACxBF,GAA+B,GAG1BE","file":"163.js"}