{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst React = require('React');\nconst {NativeComponent} = require('ReactNative');\n\nconst requireNativeComponent = require('requireNativeComponent');\nconst nullthrows = require('fbjs/lib/nullthrows');\n\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\n\nif (Platform.OS === 'android') {\n  const AndroidSwipeRefreshLayout = require('UIManager')\n    .AndroidSwipeRefreshLayout;\n  var RefreshLayoutConsts = AndroidSwipeRefreshLayout\n    ? AndroidSwipeRefreshLayout.Constants\n    : {SIZE: {}};\n} else {\n  var RefreshLayoutConsts = {SIZE: {}};\n}\ntype NativeRefreshControlType = Class<NativeComponent<RefreshControlProps>>;\n\nconst NativeRefreshControl: NativeRefreshControlType =\n  Platform.OS === 'ios'\n    ? (requireNativeComponent('RCTRefreshControl'): any)\n    : (requireNativeComponent('AndroidSwipeRefreshLayout'): any);\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator, see RefreshControl.SIZE.\n   */\n  size?: ?(\n    | typeof RefreshLayoutConsts.SIZE.DEFAULT\n    | typeof RefreshLayoutConsts.SIZE.LARGE\n  ),\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?Function,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  static SIZE = RefreshLayoutConsts.SIZE;\n\n  _nativeRef: ?React.ElementRef<NativeRefreshControlType> = null;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (this.props.refreshing !== this._lastNativeRefreshing) {\n      nullthrows(this._nativeRef).setNativeProps({\n        refreshing: this.props.refreshing,\n      });\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render() {\n    return (\n      <NativeRefreshControl\n        {...this.props}\n        ref={ref => {\n          this._nativeRef = ref;\n        }}\n        onRefresh={this._onRefresh}\n      />\n    );\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n}\n\nmodule.exports = RefreshControl;\n"],"names":["React","require","d","requireNativeComponent","NativeComponent","nullthrows","AndroidSwipeRefreshLayout","RefreshLayoutConsts","Constants","SIZE","NativeRefreshControl","RefreshControl","_nativeRef","_lastNativeRefreshing","_onRefresh","_this","props","onRefresh","forceUpdate","this","refreshing","prevProps","setNativeProps","_this2","createElement","_extends","ref","Component","module","exports"],"mappings":"4BAUA,6EAGMA,GADWC,EAAOC,EAAA,IACVD,EAAOC,EAAA,KAGfC,GAFoBF,EAAOC,EAAA,IAA1BE,gBAEwBH,EAAOC,EAAA,KAChCG,EAAaJ,EAAOC,EAAA,KAMlBI,EAA4BL,EAAOC,EAAA,KACtCI,0BACCC,EAAsBD,EACtBA,EAA0BE,WACzBC,SAMDC,EAGCP,EAAuB,6BAwGxBQ,gLAGJC,WAA0D,OAC1DC,uBAAwB,IAgCxBC,WAAa,WACXC,EAAKF,uBAAwB,EAE7BE,EAAKC,MAAMC,WAAaF,EAAKC,MAAMC,YAInCF,EAAKG,8EApCLC,KAAKN,sBAAwBM,KAAKH,MAAMI,sDAGvBC,GAIbF,KAAKH,MAAMI,aAAeC,EAAUD,WACtCD,KAAKN,sBAAwBM,KAAKH,MAAMI,WAC/BD,KAAKH,MAAMI,aAAeD,KAAKN,wBACxCR,EAAWc,KAAKP,YAAYU,gBAC1BF,WAAYD,KAAKH,MAAMI,aAEzBD,KAAKN,sBAAwBM,KAAKH,MAAMI,6CAInC,IAAAG,EAAAJ,KACP,OACEnB,EAAAwB,cAACd,EAADe,KACMN,KAAKH,OACTU,IAAK,SAAAA,GACHH,EAAKX,WAAac,GAEpBT,UAAWE,KAAKL,sBA/BKd,EAAM2B,WAA7BhB,EACGF,KAAOF,EAAoBE,KA8CpCmB,EAAOC,QAAUlB","file":"251.js"}