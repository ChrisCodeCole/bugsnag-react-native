{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Text/Text.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst React = require('React');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst TextAncestor = require('TextAncestor');\nconst TextPropTypes = require('TextPropTypes');\nconst Touchable = require('Touchable');\nconst UIManager = require('UIManager');\n\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst nullthrows = require('fbjs/lib/nullthrows');\nconst processColor = require('processColor');\n\nimport type {PressEvent} from 'CoreEventTypes';\nimport type {NativeComponent} from 'ReactNative';\nimport type {PressRetentionOffset, TextProps} from 'TextProps';\n\ntype ResponseHandlers = $ReadOnly<{|\n  onStartShouldSetResponder: () => boolean,\n  onResponderGrant: (event: SyntheticEvent<>, dispatchID: string) => void,\n  onResponderMove: (event: SyntheticEvent<>) => void,\n  onResponderRelease: (event: SyntheticEvent<>) => void,\n  onResponderTerminate: (event: SyntheticEvent<>) => void,\n  onResponderTerminationRequest: () => boolean,\n|}>;\n\ntype Props = $ReadOnly<{\n  ...TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n}>;\n\ntype State = {|\n  touchable: {|\n    touchState: ?string,\n    responderID: ?number,\n  |},\n  isHighlighted: boolean,\n  createResponderHandlers: () => ResponseHandlers,\n  responseHandlers: ?ResponseHandlers,\n|};\n\nconst PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nconst viewConfig = {\n  validAttributes: {\n    ...ReactNativeViewAttributes.UIView,\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout',\n    },\n  },\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * See https://facebook.github.io/react-native/docs/text.html\n */\nclass TouchableText extends React.Component<Props, State> {\n  static defaultProps = {\n    accessible: true,\n    allowFontScaling: true,\n    ellipsizeMode: 'tail',\n  };\n\n  touchableGetPressRectOffset: ?() => PressRetentionOffset;\n  touchableHandleActivePressIn: ?() => void;\n  touchableHandleActivePressOut: ?() => void;\n  touchableHandleLongPress: ?(event: PressEvent) => void;\n  touchableHandlePress: ?(event: PressEvent) => void;\n  touchableHandleResponderGrant: ?(\n    event: SyntheticEvent<>,\n    dispatchID: string,\n  ) => void;\n  touchableHandleResponderMove: ?(event: SyntheticEvent<>) => void;\n  touchableHandleResponderRelease: ?(event: SyntheticEvent<>) => void;\n  touchableHandleResponderTerminate: ?(event: SyntheticEvent<>) => void;\n  touchableHandleResponderTerminationRequest: ?() => boolean;\n\n  state = {\n    ...Touchable.Mixin.touchableGetInitialState(),\n    isHighlighted: false,\n    createResponderHandlers: this._createResponseHandlers.bind(this),\n    responseHandlers: null,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State): ?State {\n    return prevState.responseHandlers == null && isTouchable(nextProps)\n      ? {\n          ...prevState,\n          responseHandlers: prevState.createResponderHandlers(),\n        }\n      : null;\n  }\n\n  static viewConfig = viewConfig;\n\n  render(): React.Node {\n    let props = this.props;\n    if (isTouchable(props)) {\n      props = {\n        ...props,\n        ...this.state.responseHandlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (props.selectionColor != null) {\n      props = {\n        ...props,\n        selectionColor: processColor(props.selectionColor),\n      };\n    }\n    if (__DEV__) {\n      if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {\n        props = {\n          ...props,\n          style: [props.style, {color: 'magenta'}],\n        };\n      }\n    }\n    return (\n      <TextAncestor.Consumer>\n        {hasTextAncestor =>\n          hasTextAncestor ? (\n            <RCTVirtualText {...props} ref={props.forwardedRef} />\n          ) : (\n            <TextAncestor.Provider value={true}>\n              <RCTText {...props} ref={props.forwardedRef} />\n            </TextAncestor.Provider>\n          )\n        }\n      </TextAncestor.Consumer>\n    );\n  }\n\n  _createResponseHandlers(): ResponseHandlers {\n    return {\n      onStartShouldSetResponder: (): boolean => {\n        const {onStartShouldSetResponder} = this.props;\n        const shouldSetResponder =\n          (onStartShouldSetResponder == null\n            ? false\n            : onStartShouldSetResponder()) || isTouchable(this.props);\n\n        if (shouldSetResponder) {\n          this._attachTouchHandlers();\n        }\n        return shouldSetResponder;\n      },\n      onResponderGrant: (event: SyntheticEvent<>, dispatchID: string): void => {\n        nullthrows(this.touchableHandleResponderGrant)(event, dispatchID);\n        if (this.props.onResponderGrant != null) {\n          this.props.onResponderGrant.call(this, event, dispatchID);\n        }\n      },\n      onResponderMove: (event: SyntheticEvent<>): void => {\n        nullthrows(this.touchableHandleResponderMove)(event);\n        if (this.props.onResponderMove != null) {\n          this.props.onResponderMove.call(this, event);\n        }\n      },\n      onResponderRelease: (event: SyntheticEvent<>): void => {\n        nullthrows(this.touchableHandleResponderRelease)(event);\n        if (this.props.onResponderRelease != null) {\n          this.props.onResponderRelease.call(this, event);\n        }\n      },\n      onResponderTerminate: (event: SyntheticEvent<>): void => {\n        nullthrows(this.touchableHandleResponderTerminate)(event);\n        if (this.props.onResponderTerminate != null) {\n          this.props.onResponderTerminate.call(this, event);\n        }\n      },\n      onResponderTerminationRequest: (): boolean => {\n        const {onResponderTerminationRequest} = this.props;\n        if (!nullthrows(this.touchableHandleResponderTerminationRequest)()) {\n          return false;\n        }\n        if (onResponderTerminationRequest == null) {\n          return true;\n        }\n        return onResponderTerminationRequest();\n      },\n    };\n  }\n\n  /**\n   * Lazily attaches Touchable.Mixin handlers.\n   */\n  _attachTouchHandlers(): void {\n    if (this.touchableGetPressRectOffset != null) {\n      return;\n    }\n    for (const key in Touchable.Mixin) {\n      if (typeof Touchable.Mixin[key] === 'function') {\n        (this: any)[key] = Touchable.Mixin[key].bind(this);\n      }\n    }\n    this.touchableHandleActivePressIn = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: true});\n      }\n    };\n    this.touchableHandleActivePressOut = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: false});\n      }\n    };\n    this.touchableHandlePress = (event: PressEvent): void => {\n      if (this.props.onPress != null) {\n        this.props.onPress(event);\n      }\n    };\n    this.touchableHandleLongPress = (event: PressEvent): void => {\n      if (this.props.onLongPress != null) {\n        this.props.onLongPress(event);\n      }\n    };\n    this.touchableGetPressRectOffset = (): PressRetentionOffset =>\n      this.props.pressRetentionOffset == null\n        ? PRESS_RECT_OFFSET\n        : this.props.pressRetentionOffset;\n  }\n}\n\nconst isTouchable = (props: Props): boolean =>\n  props.onPress != null ||\n  props.onLongPress != null ||\n  props.onStartShouldSetResponder != null;\n\nconst RCTText = createReactNativeComponentClass(\n  viewConfig.uiViewClassName,\n  () => viewConfig,\n);\n\nconst RCTVirtualText =\n  UIManager.RCTVirtualText == null\n    ? RCTText\n    : createReactNativeComponentClass('RCTVirtualText', () => ({\n        validAttributes: {\n          ...ReactNativeViewAttributes.UIView,\n          isHighlighted: true,\n        },\n        uiViewClassName: 'RCTVirtualText',\n      }));\n\nconst Text = (\n  props: TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n) => {\n  return <TouchableText {...props} forwardedRef={forwardedRef} />;\n};\n// $FlowFixMe - TODO T29156721 `React.forwardRef` is not defined in Flow, yet.\nconst TextToExport = React.forwardRef(Text);\n\n// TODO: Deprecate this.\nTextToExport.propTypes = TextPropTypes;\n\nmodule.exports = (TextToExport: Class<NativeComponent<TextProps>>);\n"],"names":["React","require","d","ReactNativeViewAttributes","TextAncestor","TextPropTypes","Touchable","UIManager","createReactNativeComponentClass","nullthrows","processColor","PRESS_RECT_OFFSET","top","left","right","bottom","viewConfig","validAttributes","_objectSpread","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","directEventTypes","topTextLayout","registrationName","uiViewClassName","TouchableText","state","Mixin","touchableGetInitialState","createResponderHandlers","_this","_createResponseHandlers","bind","_assertThisInitialized","responseHandlers","props","this","isTouchable","createElement","Consumer","hasTextAncestor","RCTVirtualText","_extends","ref","forwardedRef","Provider","value","RCTText","_this2","onStartShouldSetResponder","shouldSetResponder","_attachTouchHandlers","onResponderGrant","event","dispatchID","touchableHandleResponderGrant","call","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","_this3","touchableGetPressRectOffset","key","touchableHandleActivePressIn","suppressHighlighting","setState","touchableHandleActivePressOut","touchableHandlePress","onPress","touchableHandleLongPress","onLongPress","pressRetentionOffset","nextProps","prevState","Component","defaultProps","accessible","TextToExport","forwardRef","propTypes","module","exports"],"mappings":"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","file":"182.js"}