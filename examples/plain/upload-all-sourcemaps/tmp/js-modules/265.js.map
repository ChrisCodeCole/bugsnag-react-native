{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StatusBar = require('StatusBar');\nconst StyleSheet = require('StyleSheet');\nconst UIManager = require('UIManager');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst DrawerConsts = UIManager.AndroidDrawerLayout.Constants;\n\nconst createReactClass = require('create-react-class');\nconst dismissKeyboard = require('dismissKeyboard');\nconst requireNativeComponent = require('requireNativeComponent');\n\nconst RK_DRAWER_REF = 'drawerlayout';\nconst INNERVIEW_REF = 'innerView';\n\nconst DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];\n\n/**\n * React component that wraps the platform `DrawerLayout` (Android only). The\n * Drawer (typically used for navigation) is rendered with `renderNavigationView`\n * and direct children are the main view (where your content goes). The navigation\n * view is initially not visible on the screen, but can be pulled in from the\n * side of the window specified by the `drawerPosition` prop and its width can\n * be set by the `drawerWidth` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var navigationView = (\n *     <View style={{flex: 1, backgroundColor: '#fff'}}>\n *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>\n *     </View>\n *   );\n *   return (\n *     <DrawerLayoutAndroid\n *       drawerWidth={300}\n *       drawerPosition={DrawerLayoutAndroid.positions.Left}\n *       renderNavigationView={() => navigationView}>\n *       <View style={{flex: 1, alignItems: 'center'}}>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>\n *       </View>\n *     </DrawerLayoutAndroid>\n *   );\n * },\n * ```\n */\nconst DrawerLayoutAndroid = createReactClass({\n  displayName: 'DrawerLayoutAndroid',\n  statics: {\n    positions: DrawerConsts.DrawerPosition,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag',\n    ]),\n    /**\n     * Specifies the background color of the drawer. The default value is white.\n     * If you want to set the opacity of the drawer, use rgba. Example:\n     *\n     * ```\n     * return (\n     *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n     *   </DrawerLayoutAndroid>\n     * );\n     * ```\n     */\n    drawerBackgroundColor: ColorPropType,\n    /**\n     * Specifies the side of the screen from which the drawer will slide in.\n     */\n    drawerPosition: PropTypes.oneOf([\n      DrawerConsts.DrawerPosition.Left,\n      DrawerConsts.DrawerPosition.Right,\n    ]),\n    /**\n     * Specifies the width of the drawer, more precisely the width of the view that be pulled in\n     * from the edge of the window.\n     */\n    drawerWidth: PropTypes.number,\n    /**\n     * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n     * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n     * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n     * - locked-open, meaning that the drawer will stay opened and not respond to gestures.\n     * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).\n     */\n    drawerLockMode: PropTypes.oneOf([\n      'unlocked',\n      'locked-closed',\n      'locked-open',\n    ]),\n    /**\n     * Function called whenever there is an interaction with the navigation view.\n     */\n    onDrawerSlide: PropTypes.func,\n    /**\n     * Function called when the drawer state has changed. The drawer can be in 3 states:\n     * - idle, meaning there is no interaction with the navigation view happening at the time\n     * - dragging, meaning there is currently an interaction with the navigation view\n     * - settling, meaning that there was an interaction with the navigation view, and the\n     * navigation view is now finishing its closing or opening animation\n     */\n    onDrawerStateChanged: PropTypes.func,\n    /**\n     * Function called whenever the navigation view has been opened.\n     */\n    onDrawerOpen: PropTypes.func,\n    /**\n     * Function called whenever the navigation view has been closed.\n     */\n    onDrawerClose: PropTypes.func,\n    /**\n     * The navigation view that will be rendered to the side of the screen and can be pulled in.\n     */\n    renderNavigationView: PropTypes.func.isRequired,\n\n    /**\n     * Make the drawer take the entire screen and draw the background of the\n     * status bar to allow it to open over the status bar. It will only have an\n     * effect on API 21+.\n     */\n    statusBarBackgroundColor: ColorPropType,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  getDefaultProps: function(): Object {\n    return {\n      drawerBackgroundColor: 'white',\n    };\n  },\n\n  getInitialState: function() {\n    return {statusBarBackgroundColor: undefined};\n  },\n\n  getInnerViewNode: function() {\n    return this.refs[INNERVIEW_REF].getInnerViewNode();\n  },\n\n  render: function() {\n    const drawStatusBar =\n      Platform.Version >= 21 && this.props.statusBarBackgroundColor;\n    const drawerViewWrapper = (\n      <View\n        style={[\n          styles.drawerSubview,\n          {\n            width: this.props.drawerWidth,\n            backgroundColor: this.props.drawerBackgroundColor,\n          },\n        ]}\n        collapsable={false}>\n        {this.props.renderNavigationView()}\n        {drawStatusBar && <View style={styles.drawerStatusBar} />}\n      </View>\n    );\n    const childrenWrapper = (\n      <View ref={INNERVIEW_REF} style={styles.mainSubview} collapsable={false}>\n        {drawStatusBar && (\n          <StatusBar\n            translucent\n            backgroundColor={this.props.statusBarBackgroundColor}\n          />\n        )}\n        {drawStatusBar && (\n          <View\n            style={[\n              styles.statusBar,\n              {backgroundColor: this.props.statusBarBackgroundColor},\n            ]}\n          />\n        )}\n        {this.props.children}\n      </View>\n    );\n    return (\n      <AndroidDrawerLayout\n        {...this.props}\n        ref={RK_DRAWER_REF}\n        drawerWidth={this.props.drawerWidth}\n        drawerPosition={this.props.drawerPosition}\n        drawerLockMode={this.props.drawerLockMode}\n        style={[styles.base, this.props.style]}\n        onDrawerSlide={this._onDrawerSlide}\n        onDrawerOpen={this._onDrawerOpen}\n        onDrawerClose={this._onDrawerClose}\n        onDrawerStateChanged={this._onDrawerStateChanged}>\n        {childrenWrapper}\n        {drawerViewWrapper}\n      </AndroidDrawerLayout>\n    );\n  },\n\n  _onDrawerSlide: function(event) {\n    if (this.props.onDrawerSlide) {\n      this.props.onDrawerSlide(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  },\n\n  _onDrawerOpen: function() {\n    if (this.props.onDrawerOpen) {\n      this.props.onDrawerOpen();\n    }\n  },\n\n  _onDrawerClose: function() {\n    if (this.props.onDrawerClose) {\n      this.props.onDrawerClose();\n    }\n  },\n\n  _onDrawerStateChanged: function(event) {\n    if (this.props.onDrawerStateChanged) {\n      this.props.onDrawerStateChanged(\n        DRAWER_STATES[event.nativeEvent.drawerState],\n      );\n    }\n  },\n\n  /**\n   * Opens the drawer.\n   */\n  openDrawer: function() {\n    UIManager.dispatchViewManagerCommand(\n      this._getDrawerLayoutHandle(),\n      UIManager.AndroidDrawerLayout.Commands.openDrawer,\n      null,\n    );\n  },\n\n  /**\n   * Closes the drawer.\n   */\n  closeDrawer: function() {\n    UIManager.dispatchViewManagerCommand(\n      this._getDrawerLayoutHandle(),\n      UIManager.AndroidDrawerLayout.Commands.closeDrawer,\n      null,\n    );\n  },\n  /**\n   * Closing and opening example\n   * Note: To access the drawer you have to give it a ref. Refs do not work on stateless components\n   * render () {\n   *   this.openDrawer = () => {\n   *     this.refs.DRAWER.openDrawer()\n   *   }\n   *   this.closeDrawer = () => {\n   *     this.refs.DRAWER.closeDrawer()\n   *   }\n   *   return (\n   *     <DrawerLayoutAndroid ref={'DRAWER'}>\n   *     </DrawerLayoutAndroid>\n   *   )\n   * }\n   */\n  _getDrawerLayoutHandle: function() {\n    return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);\n  },\n});\n\nconst styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n  },\n  statusBar: {\n    height: StatusBar.currentHeight,\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)',\n  },\n});\n\n// The View that contains both the actual drawer and the main view\nconst AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout');\n\nmodule.exports = DrawerLayoutAndroid;\n"],"names":["ColorPropType","require","d","NativeMethodsMixin","Platform","React","PropTypes","ReactNative","StatusBar","StyleSheet","UIManager","View","ViewPropTypes","DrawerConsts","AndroidDrawerLayout","Constants","createReactClass","dismissKeyboard","requireNativeComponent","DRAWER_STATES","DrawerLayoutAndroid","displayName","statics","positions","DrawerPosition","propTypes","_objectSpread","keyboardDismissMode","oneOf","drawerBackgroundColor","drawerPosition","Left","Right","drawerWidth","number","drawerLockMode","onDrawerSlide","func","onDrawerStateChanged","onDrawerOpen","onDrawerClose","renderNavigationView","isRequired","statusBarBackgroundColor","mixins","getDefaultProps","getInitialState","undefined","getInnerViewNode","this","refs","render","drawStatusBar","Version","props","drawerViewWrapper","createElement","style","styles","drawerSubview","width","backgroundColor","collapsable","drawerStatusBar","childrenWrapper","ref","mainSubview","translucent","statusBar","children","_extends","base","_onDrawerSlide","_onDrawerOpen","_onDrawerClose","_onDrawerStateChanged","event","nativeEvent","drawerState","openDrawer","dispatchViewManagerCommand","_getDrawerLayoutHandle","Commands","closeDrawer","findNodeHandle","create","flex","elevation","position","top","left","right","bottom","height","currentHeight","module","exports"],"mappings":"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","file":"265.js"}