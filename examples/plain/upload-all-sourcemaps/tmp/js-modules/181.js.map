{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/Button.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableNativeFeedback = require('TouchableNativeFeedback');\nconst TouchableOpacity = require('TouchableOpacity');\nconst View = require('View');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * A basic button component that should render nicely on any platform. Supports\n * a minimal level of customization.\n *\n * <center><img src=\"img/buttonExample.png\"></img></center>\n *\n * If this button doesn't look right for your app, you can build your own\n * button using [TouchableOpacity](docs/touchableopacity.html)\n * or [TouchableNativeFeedback](docs/touchablenativefeedback.html).\n * For inspiration, look at the [source code for this button component](https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js).\n * Or, take a look at the [wide variety of button components built by the community](https://js.coach/react-native?search=button).\n *\n * Example usage:\n *\n * ```\n * import { Button } from 'react-native';\n * ...\n *\n * <Button\n *   onPress={onPressLearnMore}\n *   title=\"Learn More\"\n *   color=\"#841584\"\n *   accessibilityLabel=\"Learn more about this purple button\"\n * />\n * ```\n *\n */\n\nclass Button extends React.Component<{\n  title: string,\n  onPress: () => any,\n  color?: ?string,\n  hasTVPreferredFocus?: ?boolean,\n  accessibilityLabel?: ?string,\n  disabled?: ?boolean,\n  testID?: ?string,\n}> {\n  static propTypes = {\n    /**\n     * Text to display inside the button\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Text to display for blindness accessibility features\n     */\n    accessibilityLabel: PropTypes.string,\n    /**\n     * Color of the text (iOS), or background color of the button (Android)\n     */\n    color: ColorPropType,\n    /**\n     * If true, disable all interactions for this component.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * TV preferred focus (see documentation for the View component).\n     */\n    hasTVPreferredFocus: PropTypes.bool,\n    /**\n     * Handler to be called when the user taps the button\n     */\n    onPress: PropTypes.func.isRequired,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      title,\n      hasTVPreferredFocus,\n      disabled,\n      testID,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    if (color) {\n      if (Platform.OS === 'ios') {\n        textStyles.push({color: color});\n      } else {\n        buttonStyles.push({backgroundColor: color});\n      }\n    }\n    const accessibilityStates = [];\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n      accessibilityStates.push('disabled');\n    }\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle =\n      Platform.OS === 'android' ? title.toUpperCase() : title;\n    const Touchable =\n      Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n    return (\n      <Touchable\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityStates={accessibilityStates}\n        hasTVPreferredFocus={hasTVPreferredFocus}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>\n            {formattedTitle}\n          </Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: Platform.select({\n    ios: {\n      // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n      color: '#007AFF',\n      textAlign: 'center',\n      padding: 8,\n      fontSize: 18,\n    },\n    android: {\n      color: 'white',\n      textAlign: 'center',\n      padding: 8,\n      fontWeight: '500',\n    },\n  }),\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    },\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    },\n  }),\n});\n\nmodule.exports = Button;\n"],"names":["ColorPropType","require","d","React","PropTypes","StyleSheet","Text","TouchableNativeFeedback","View","invariant","Button","_this$props","this","props","accessibilityLabel","color","onPress","title","hasTVPreferredFocus","disabled","testID","buttonStyles","styles","button","textStyles","text","push","backgroundColor","accessibilityStates","buttonDisabled","textDisabled","formattedTitle","toUpperCase","Touchable","createElement","accessibilityRole","style","Component","propTypes","string","isRequired","bool","func","create","elevation","borderRadius","textAlign","padding","fontWeight","module","exports"],"mappings":"4BAUA,mEAEMA,EAAgBC,EAAOC,EAAA,IAEvBC,GADWF,EAAOC,EAAA,IACVD,EAAOC,EAAA,KACfE,EAAYH,EAAOC,EAAA,IACnBG,EAAaJ,EAAOC,EAAA,IACpBI,EAAOL,EAAOC,EAAA,KACdK,EAA0BN,EAAOC,EAAA,KAEjCM,GADmBP,EAAOC,EAAA,KACnBD,EAAOC,EAAA,MAEdO,EAAYR,EAAOC,EAAA,KA8BnBQ,kIAwCK,IAAAC,EASHC,KAAKC,MAPPC,EAFKH,EAELG,mBACAC,EAHKJ,EAGLI,MACAC,EAJKL,EAILK,QACAC,EALKN,EAKLM,MACAC,EANKP,EAMLO,oBACAC,EAPKR,EAOLQ,SACAC,EARKT,EAQLS,OAEIC,GAAgBC,EAAOC,QACvBC,GAAcF,EAAOG,MACvBV,GAIAM,EAAaK,MAAMC,gBAAiBZ,IAGxC,IAAMa,KACFT,IACFE,EAAaK,KAAKJ,EAAOO,gBACzBL,EAAWE,KAAKJ,EAAOQ,cACvBF,EAAoBF,KAAK,aAE3BjB,EACmB,iBAAVQ,EACP,+CAEF,IAAMc,EACwBd,EAAMe,cAC9BC,EACwB1B,EAC9B,OACEJ,EAAA+B,cAACD,GACCnB,mBAAoBA,EACpBqB,kBAAkB,SAClBP,oBAAqBA,EACrBV,oBAAqBA,EACrBE,OAAQA,EACRD,SAAUA,EACVH,QAASA,GACTb,EAAA+B,cAAC1B,GAAK4B,MAAOf,GACXlB,EAAA+B,cAAC5B,GAAK8B,MAAOZ,EAAYL,SAAUA,GAChCY,aApFQ5B,EAAMkC,WAArB3B,EASG4B,WAILrB,MAAOb,EAAUmC,OAAOC,WAIxB1B,mBAAoBV,EAAUmC,OAI9BxB,MAAOf,EAIPmB,SAAUf,EAAUqC,KAIpBvB,oBAAqBd,EAAUqC,KAI/BzB,QAASZ,EAAUsC,KAAKF,WAIxBpB,OAAQhB,EAAUmC,QAuDtB,IAAMjB,EAASjB,EAAWsC,QACxBpB,QAGIqB,UAAW,EAEXjB,gBAAiB,UACjBkB,aAAc,GAGlBpB,MASIV,MAAO,QACP+B,UAAW,SACXC,QAAS,EACTC,WAAY,OAGhBnB,gBAGIe,UAAW,EACXjB,gBAAiB,WAGrBG,cAKIf,MAAO,aAKbkC,EAAOC,QAAUxC","file":"181.js"}