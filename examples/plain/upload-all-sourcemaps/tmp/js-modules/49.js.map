{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst EventSubscriptionVendor = require('EventSubscriptionVendor');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the StatusBarIOS module',\n      );\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the Keyboard module',\n      );\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the AppState module',\n      );\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = new RCTDeviceEventEmitter();\n"],"names":["EventEmitter","require","d","EventSubscriptionVendor","RCTDeviceEventEmitter","_this","_classCallCheck","this","sharedSubscriber","_possibleConstructorReturn","_getPrototypeOf","call","eventType","listener","context","_get","prototype","subscription","emitter","removeSubscription","module","exports"],"mappings":"4BAUA,6EAEMA,EAAeC,EAAOC,EAAA,IACtBC,EAA0BF,EAAOC,EAAA,IAkCjCE,eAGJ,SAAAA,IAAc,IAAAC,EAAAC,EAAAC,KAAAH,GACZ,IAAMI,EAAmB,IAAIL,EADjB,OAEZE,EAAAI,EAAAF,KAAAG,EAAAN,GAAAO,KAAAJ,KAAMC,KACDA,iBAAmBA,EAHZH,aAHoBL,0CAUhCY,EACAC,EACAC,GAKA,OAAAC,EAAAL,EAAAN,EAAAY,WAAA,cAAAT,MAAAI,KAAAJ,KAAyBK,EAAWC,EAAUC,8CAG7BF,GAIjBG,EAAAL,EAAAN,EAAAY,WAAA,qBAAAT,MAAAI,KAAAJ,KAAyBK,8CAGRK,GACbA,EAAaC,UAAYX,KAC3BU,EAAaC,QAAQC,mBAAmBF,GAExCF,EAAAL,EAAAN,EAAAY,WAAA,qBAAAT,MAAAI,KAAAJ,KAAyBU,aAK/BG,EAAOC,QAAU,IAAIjB","file":"49.js"}