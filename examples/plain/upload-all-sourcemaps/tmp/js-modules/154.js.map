{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Utilities/PerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst Systrace = require('Systrace');\n\nconst infoLog = require('infoLog');\nconst performanceNow =\n  global.nativeQPLTimestamp ||\n  global.nativePerformanceNow ||\n  require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n};\n\nlet timespans: {[key: string]: Timespan} = {};\nlet extras: {[key: string]: any} = {};\nconst cookies: {[key: string]: number} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n/**\n * This is meant to collect and log performance data in production, which means\n * it needs to have minimal overhead.\n */\nconst PerformanceLogger = {\n  addTimespan(key: string, lengthInMs: number, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      totalTime: lengthInMs,\n    };\n  },\n\n  startTimespan(key: string, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      startTime: performanceNow(),\n    };\n    cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  },\n\n  stopTimespan(key: string) {\n    const timespan = timespans[key];\n    if (!timespan || !timespan.startTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endTime = performanceNow();\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    Systrace.endAsyncEvent(key, cookies[key]);\n    delete cookies[key];\n  },\n\n  clear() {\n    timespans = {};\n    extras = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  },\n\n  clearCompleted() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        delete timespans[key];\n      }\n    }\n    extras = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  },\n\n  clearExceptTimespans(keys: Array<string>) {\n    timespans = Object.keys(timespans).reduce(function(previous, key) {\n      if (keys.indexOf(key) !== -1) {\n        previous[key] = timespans[key];\n      }\n      return previous;\n    }, {});\n    extras = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n    }\n  },\n\n  currentTimestamp() {\n    return performanceNow();\n  },\n\n  getTimespans() {\n    return timespans;\n  },\n\n  hasTimespan(key: string) {\n    return !!timespans[key];\n  },\n\n  logTimespans() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        infoLog(key + ': ' + timespans[key].totalTime + 'ms');\n      }\n    }\n  },\n\n  addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n    for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n      const label = labels[ii / 2];\n      PerformanceLogger.addTimespan(\n        label,\n        newTimespans[ii + 1] - newTimespans[ii],\n        label,\n      );\n    }\n  },\n\n  setExtra(key: string, value: any) {\n    if (extras[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    extras[key] = value;\n  },\n\n  getExtras() {\n    return extras;\n  },\n\n  logExtras() {\n    infoLog(extras);\n  },\n};\n\nmodule.exports = PerformanceLogger;\n"],"names":["Systrace","require","d","infoLog","performanceNow","global","nativeQPLTimestamp","nativePerformanceNow","timespans","extras","cookies","PerformanceLogger","addTimespan","key","lengthInMs","description","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","timespan","endTime","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","getExtras","logExtras","module","exports"],"mappings":"4BASA,aAEA,IAAMA,EAAWC,EAAOC,EAAA,IAElBC,EAAUF,EAAOC,EAAA,IACjBE,EACJC,EAAOC,oBACPD,EAAOE,sBACPN,EAAOC,EAAA,IASLM,KACAC,KACEC,KAQAC,GACJC,YADwB,SACZC,EAAaC,EAAoBC,GACvCP,EAAUK,KAUdL,EAAUK,IACRE,YAAaA,EACbC,UAAWF,KAIfG,cAlBwB,SAkBVJ,EAAaE,GACrBP,EAAUK,KAUdL,EAAUK,IACRE,YAAaA,EACbG,UAAWd,KAEbM,EAAQG,GAAOb,EAASmB,gBAAgBN,KAM1CO,aAvCwB,SAuCXP,GACX,IAAMQ,EAAWb,EAAUK,GACtBQ,GAAaA,EAASH,YASvBG,EAASC,UAUbD,EAASC,QAAUlB,IACnBiB,EAASL,UAAYK,EAASC,SAAWD,EAASH,WAAa,GAK/DlB,EAASuB,cAAcV,EAAKH,EAAQG,WAC7BH,EAAQG,MAGjBW,MAtEwB,WAuEtBhB,KACAC,MAMFgB,eA9EwB,WA+EtB,IAAK,IAAMZ,KAAOL,EACZA,EAAUK,GAAKG,kBACVR,EAAUK,GAGrBJ,MAMFiB,qBA1FwB,SA0FHC,GACnBnB,EAAYoB,OAAOD,KAAKnB,GAAWqB,OAAO,SAASC,EAAUjB,GAI3D,OAHI,IAAAc,EAAKI,QAAQlB,KACfiB,EAASjB,GAAOL,EAAUK,IAErBiB,OAETrB,MAMFuB,iBAvGwB,WAwGtB,OAAO5B,KAGT6B,aA3GwB,WA4GtB,OAAOzB,GAGT0B,YA/GwB,SA+GZrB,GACV,QAASL,EAAUK,IAGrBsB,aAnHwB,WAoHtB,IAAK,IAAMtB,KAAOL,EACZA,EAAUK,GAAKG,WACjBb,EAAQU,EAAM,KAAOL,EAAUK,GAAKG,UAAY,OAKtDoB,aA3HwB,SA2HXC,EAA6BC,GACxC,IAAK,IAAIC,EAAK,EAAGC,EAAIH,EAAaI,OAAQF,EAAKC,EAAGD,GAAM,EAAG,CACzD,IAAMG,EAAQJ,EAAOC,EAAK,GAC1B5B,EAAkBC,YAChB8B,EACAL,EAAaE,EAAK,GAAKF,EAAaE,GACpCG,KAKNC,SAtIwB,SAsIf9B,EAAa+B,GAChBnC,EAAOI,KASXJ,EAAOI,GAAO+B,IAGhBC,UAnJwB,WAoJtB,OAAOpC,GAGTqC,UAvJwB,WAwJtB3C,EAAQM,KAIZsC,EAAOC,QAAUrC","file":"154.js"}