{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/TextInput/TextInput.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextAncestor = require('TextAncestor');\nconst TextInputState = require('TextInputState');\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {TextStyleProp} from 'StyleSheet';\nimport type {ViewProps} from 'ViewPropTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\ntype IOSProps = $ReadOnly<{|\n  spellCheck?: ?boolean,\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n  enablesReturnKeyAutomatically?: ?boolean,\n  selectionState?: ?DocumentSelectionState,\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n  clearTextOnFocus?: ?boolean,\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n  inputAccessoryViewID?: ?string,\n  textContentType?: ?(\n    | 'none'\n    | 'URL'\n    | 'addressCity'\n    | 'addressCityAndState'\n    | 'addressState'\n    | 'countryName'\n    | 'creditCardNumber'\n    | 'emailAddress'\n    | 'familyName'\n    | 'fullStreetAddress'\n    | 'givenName'\n    | 'jobTitle'\n    | 'location'\n    | 'middleName'\n    | 'name'\n    | 'namePrefix'\n    | 'nameSuffix'\n    | 'nickname'\n    | 'organizationName'\n    | 'postalCode'\n    | 'streetAddressLine1'\n    | 'streetAddressLine2'\n    | 'sublocality'\n    | 'telephoneNumber'\n    | 'username'\n    | 'password'\n  ),\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  returnKeyLabel?: ?string,\n  numberOfLines?: ?number,\n  disableFullscreenUI?: ?boolean,\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n  underlineColorAndroid?: ?ColorValue,\n  inlineImageLeft?: ?string,\n  inlineImagePadding?: ?number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n  autoCapitalize?: ?AutoCapitalize,\n  autoCorrect?: ?boolean,\n  autoFocus?: ?boolean,\n  allowFontScaling?: ?boolean,\n  editable?: ?boolean,\n  keyboardType?: ?KeyboardType,\n  returnKeyType?: ?ReturnKeyType,\n  maxLength?: ?number,\n  multiline?: ?boolean,\n  onBlur?: ?Function,\n  onFocus?: ?Function,\n  onChange?: ?Function,\n  onChangeText?: ?Function,\n  onContentSizeChange?: ?Function,\n  onTextInput?: ?Function,\n  onEndEditing?: ?Function,\n  onSelectionChange?: ?Function,\n  onSubmitEditing?: ?Function,\n  onKeyPress?: ?Function,\n  onScroll?: ?Function,\n  placeholder?: ?Stringish,\n  placeholderTextColor?: ?ColorValue,\n  secureTextEntry?: ?boolean,\n  selectionColor?: ?ColorValue,\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n  value?: ?Stringish,\n  defaultValue?: ?Stringish,\n  selectTextOnFocus?: ?boolean,\n  blurOnSubmit?: ?boolean,\n  style?: ?TextStyleProp,\n  caretHidden?: ?boolean,\n  contextMenuHidden?: ?boolean,\n|}>;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `number-pad`\n     * - `decimal-pad`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `name-phone-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      'number-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    onTextInput: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `false`, scrolling of the text view will be disabled.\n     * The default value is `true`. Does only work with 'multiline={true}'.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n     * The highlight and cursor color of the text input.\n     */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * This property is supported only for single-line TextInput component.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     * This property is supported only for single-line TextInput component on iOS.\n     */\n    caretHidden: PropTypes.bool,\n    /*\n     * If `true`, contextMenuHidden is hidden. The default value is `false`.\n     */\n    contextMenuHidden: PropTypes.bool,\n    /**\n     * An optional identifier which links a custom InputAccessoryView to\n     * this text input. The InputAccessoryView is rendered above the\n     * keyboard when this text input is focused.\n     * @platform ios\n     */\n    inputAccessoryViewID: PropTypes.string,\n    /**\n     * Give the keyboard and the system information about the\n     * expected semantic meaning for the content that users enter.\n     * @platform ios\n     */\n    textContentType: PropTypes.oneOf([\n      'none',\n      'URL',\n      'addressCity',\n      'addressCityAndState',\n      'addressState',\n      'countryName',\n      'creditCardNumber',\n      'emailAddress',\n      'familyName',\n      'fullStreetAddress',\n      'givenName',\n      'jobTitle',\n      'location',\n      'middleName',\n      'name',\n      'namePrefix',\n      'nameSuffix',\n      'nickname',\n      'organizationName',\n      'postalCode',\n      'streetAddressLine1',\n      'streetAddressLine2',\n      'sublocality',\n      'telephoneNumber',\n      'username',\n      'password',\n    ]),\n  },\n  getDefaultProps(): Object {\n    return {\n      allowFontScaling: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.context.focusEmitter) {\n      this._focusSubscription = this.context.focusEmitter.addListener(\n        'focus',\n        el => {\n          if (this === el) {\n            this.requestAnimationFrame(this.focus);\n          } else if (this.isFocused()) {\n            this.blur();\n          }\n        },\n      );\n      if (this.props.autoFocus) {\n        this.context.onFocusRequested(this);\n      }\n    } else {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.RCTVirtualText\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n        ? this.props.defaultValue\n        : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text style={props.style} allowFontScaling={props.allowFontScaling}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[\n        props.autoCapitalize || 'sentences'\n      ];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"],"names":["AndroidTextInput","ColorPropType","require","d","DocumentSelectionState","EventEmitter","NativeMethodsMixin","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","DataDetectorTypes","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","_objectSpread","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","allowFontScaling","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onTextInput","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","scrollEnabled","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","contextMenuHidden","inputAccessoryViewID","textContentType","getDefaultProps","mixins","isFocused","findNodeHandle","this","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","_this","props","tag","registerInput","context","focusEmitter","addListener","el","requestAnimationFrame","focus","blur","onFocusRequested","componentWillUnmount","remove","unregisterInput","contextTypes","clear","setNativeProps","text","render","textInput","_renderAndroid","createElement","Provider","_getText","_setNativeRef","ref","_renderIOSLegacy","textContainer","_extends","children","childCount","Children","forEach","inputView","unshift","styles","multilineInput","RCTMultilineTextInputView","_onFocus","_onBlur","_onChange","_onSelectionChange","_onTextInput","onSelectionChangeShouldSetResponder","thatReturnsTrue","_onScroll","RCTSinglelineTextInputView","onPress","_onPress","rejectResponderTermination","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","nativeID","testID","_renderIOS","RCTTextInputView","Constants","AutoCapitalizationType","mostRecentEventCount","event","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","TypedTextInput","NativeComponent","create","paddingTop","module","exports"],"mappings":"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","file":"298.js"}