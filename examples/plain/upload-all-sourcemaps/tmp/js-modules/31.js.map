{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {ExtendedError} from 'parseErrorStack';\n\ntype ModuleConfig = [\n  string /* name */,\n  ?Object /* constants */,\n  Array<string> /* functions */,\n  Array<number> /* promise method IDs */,\n  Array<number> /* sync method IDs */,\n];\n\nexport type MethodType = 'async' | 'promise' | 'sync';\n\nfunction genModule(\n  config: ?ModuleConfig,\n  moduleID: number,\n): ?{name: string, module?: Object} {\n  if (!config) {\n    return null;\n  }\n\n  const [moduleName, constants, methods, promiseMethods, syncMethods] = config;\n  invariant(\n    !moduleName.startsWith('RCT') && !moduleName.startsWith('RK'),\n    \"Module name prefixes should've been stripped by the native side \" +\n      \"but wasn't for \" +\n      moduleName,\n  );\n\n  if (!constants && !methods) {\n    // Module contents will be filled in lazily later\n    return {name: moduleName};\n  }\n\n  const module = {};\n  methods &&\n    methods.forEach((methodName, methodID) => {\n      const isPromise =\n        promiseMethods && arrayContains(promiseMethods, methodID);\n      const isSync = syncMethods && arrayContains(syncMethods, methodID);\n      invariant(\n        !isPromise || !isSync,\n        'Cannot have a method that is both async and a sync hook',\n      );\n      const methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';\n      module[methodName] = genMethod(moduleID, methodID, methodType);\n    });\n  Object.assign(module, constants);\n\n  if (__DEV__) {\n    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);\n  }\n\n  return {name: moduleName, module};\n}\n\n// export this method as a global so we can call it from native\nglobal.__fbGenNativeModule = genModule;\n\nfunction loadModule(name: string, moduleID: number): ?Object {\n  invariant(\n    global.nativeRequireModuleConfig,\n    \"Can't lazily create module without nativeRequireModuleConfig\",\n  );\n  const config = global.nativeRequireModuleConfig(name);\n  const info = genModule(config, moduleID);\n  return info && info.module;\n}\n\nfunction genMethod(moduleID: number, methodID: number, type: MethodType) {\n  let fn = null;\n  if (type === 'promise') {\n    fn = function(...args: Array<any>) {\n      return new Promise((resolve, reject) => {\n        BatchedBridge.enqueueNativeCall(\n          moduleID,\n          methodID,\n          args,\n          data => resolve(data),\n          errorData => reject(createErrorFromErrorData(errorData)),\n        );\n      });\n    };\n  } else if (type === 'sync') {\n    fn = function(...args: Array<any>) {\n      if (__DEV__) {\n        invariant(\n          global.nativeCallSyncHook,\n          'Calling synchronous methods on native ' +\n            'modules is not supported in Chrome.\\n\\n Consider providing alternative ' +\n            'methods to expose this method in debug mode, e.g. by exposing constants ' +\n            'ahead-of-time.',\n        );\n      }\n      return global.nativeCallSyncHook(moduleID, methodID, args);\n    };\n  } else {\n    fn = function(...args: Array<any>) {\n      const lastArg = args.length > 0 ? args[args.length - 1] : null;\n      const secondLastArg = args.length > 1 ? args[args.length - 2] : null;\n      const hasSuccessCallback = typeof lastArg === 'function';\n      const hasErrorCallback = typeof secondLastArg === 'function';\n      hasErrorCallback &&\n        invariant(\n          hasSuccessCallback,\n          'Cannot have a non-function arg after a function arg.',\n        );\n      const onSuccess = hasSuccessCallback ? lastArg : null;\n      const onFail = hasErrorCallback ? secondLastArg : null;\n      const callbackCount = hasSuccessCallback + hasErrorCallback;\n      args = args.slice(0, args.length - callbackCount);\n      BatchedBridge.enqueueNativeCall(\n        moduleID,\n        methodID,\n        args,\n        onFail,\n        onSuccess,\n      );\n    };\n  }\n  fn.type = type;\n  return fn;\n}\n\nfunction arrayContains<T>(array: Array<T>, value: T): boolean {\n  return array.indexOf(value) !== -1;\n}\n\nfunction createErrorFromErrorData(errorData: {message: string}): ExtendedError {\n  const {message, ...extraErrorInfo} = errorData || {};\n  const error: ExtendedError = new Error(message);\n  error.framesToPop = 1;\n  return Object.assign(error, extraErrorInfo);\n}\n\nlet NativeModules: {[moduleName: string]: Object} = {};\nif (global.nativeModuleProxy) {\n  NativeModules = global.nativeModuleProxy;\n} else if (!global.nativeExtensions) {\n  const bridgeConfig = global.__fbBatchedBridgeConfig;\n  invariant(\n    bridgeConfig,\n    '__fbBatchedBridgeConfig is not set, cannot invoke native modules',\n  );\n\n  const defineLazyObjectProperty = require('defineLazyObjectProperty');\n  (bridgeConfig.remoteModuleConfig || []).forEach(\n    (config: ModuleConfig, moduleID: number) => {\n      // Initially this config will only contain the module name when running in JSC. The actual\n      // configuration of the module will be lazily loaded.\n      const info = genModule(config, moduleID);\n      if (!info) {\n        return;\n      }\n\n      if (info.module) {\n        NativeModules[info.name] = info.module;\n      }\n      // If there's no module config, define a lazy getter\n      else {\n        defineLazyObjectProperty(NativeModules, info.name, {\n          get: () => loadModule(info.name, moduleID),\n        });\n      }\n    },\n  );\n}\n\nmodule.exports = NativeModules;\n"],"names":["BatchedBridge","require","d","invariant","genModule","config","moduleID","_config","_slicedToArray","moduleName","constants","methods","promiseMethods","syncMethods","startsWith","name","module","forEach","methodName","methodID","isPromise","arrayContains","isSync","methodType","genMethod","_extends","loadModule","global","nativeRequireModuleConfig","info","type","fn","_len","arguments","length","args","Array","_key","Promise","resolve","reject","enqueueNativeCall","data","errorData","createErrorFromErrorData","_len2","_key2","nativeCallSyncHook","_len3","_key3","lastArg","secondLastArg","hasSuccessCallback","hasErrorCallback","onSuccess","onFail","callbackCount","slice","array","value","indexOf","_ref","message","extraErrorInfo","_objectWithoutProperties","error","Error","framesToPop","__fbGenNativeModule","NativeModules","nativeModuleProxy","nativeExtensions","bridgeConfig","__fbBatchedBridgeConfig","defineLazyObjectProperty","remoteModuleConfig","get","exports"],"mappings":"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","file":"31.js"}