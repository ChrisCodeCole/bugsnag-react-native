{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst ListViewDataSource = require('ListViewDataSource');\n\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\nclass SwipeableListViewDataSource {\n  _previousOpenRowID: string;\n  _openRowID: string;\n\n  _dataBlob: any;\n  _dataSource: ListViewDataSource;\n\n  rowIdentities: Array<Array<string>>;\n  sectionIdentities: Array<string>;\n\n  constructor(params: Object) {\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: (row1, row2) => {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return (\n          (row1.id !== this._previousOpenRowID &&\n            row2.id === this._openRowID) ||\n          (row1.id === this._previousOpenRowID &&\n            row2.id !== this._openRowID) ||\n          params.rowHasChanged(row1, row2)\n        );\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged,\n    });\n  }\n\n  cloneWithRowsAndSections(\n    dataBlob: any,\n    sectionIdentities: ?Array<string>,\n    rowIdentities: ?Array<Array<string>>,\n  ): SwipeableListViewDataSource {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(\n      dataBlob,\n      sectionIdentities,\n      rowIdentities,\n    );\n\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n\n    return this;\n  }\n\n  // For the actual ListView to use\n  getDataSource(): ListViewDataSource {\n    return this._dataSource;\n  }\n\n  getOpenRowID(): ?string {\n    return this._openRowID;\n  }\n\n  getFirstRowID(): ?string {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n    return Object.keys(this._dataBlob)[0];\n  }\n\n  getLastRowID(): ?string {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      const lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  }\n\n  setOpenRowID(rowID: string): SwipeableListViewDataSource {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(\n      this._dataBlob,\n      this.sectionIdentities,\n      this.rowIdentities,\n    );\n\n    return this;\n  }\n}\n\nmodule.exports = SwipeableListViewDataSource;\n"],"names":["ListViewDataSource","require","d","SwipeableListViewDataSource","params","_this","this","_classCallCheck","_dataSource","getRowData","getSectionHeaderData","rowHasChanged","row1","row2","id","_previousOpenRowID","_openRowID","sectionHeaderHasChanged","dataBlob","sectionIdentities","rowIdentities","cloneWithRowsAndSections","_dataBlob","Object","keys","length","lastSection","rowID","module","exports"],"mappings":"4BASA,qCAEMA,EAAqBC,EAAOC,EAAA,IAU5BC,cAUJ,SAAAA,EAAYC,GAAgB,IAAAC,EAAAC,KAAAC,EAAAD,KAAAH,GAC1BG,KAAKE,YAAc,IAAIR,GACrBS,WAAYL,EAAOK,WACnBC,qBAAsBN,EAAOM,qBAC7BC,cAAe,SAACC,EAAMC,GAKpB,OACGD,EAAKE,KAAOT,EAAKU,oBAChBF,EAAKC,KAAOT,EAAKW,YAClBJ,EAAKE,KAAOT,EAAKU,oBAChBF,EAAKC,KAAOT,EAAKW,YACnBZ,EAAOO,cAAcC,EAAMC,IAG/BI,wBAAyBb,EAAOa,qFAKlCC,EACAC,EACAC,GAYA,OAVAd,KAAKE,YAAcF,KAAKE,YAAYa,yBAClCH,EACAC,EACAC,GAGFd,KAAKgB,UAAYJ,EACjBZ,KAAKc,cAAgBd,KAAKE,YAAYY,cACtCd,KAAKa,kBAAoBb,KAAKE,YAAYW,kBAEnCb,6CAKP,OAAOA,KAAKE,mDAIZ,OAAOF,KAAKU,mDASZ,OAAIV,KAAKc,cACAd,KAAKc,cAAc,IAAMd,KAAKc,cAAc,GAAG,GAEjDG,OAAOC,KAAKlB,KAAKgB,WAAW,0CAInC,GAAIhB,KAAKc,eAAiBd,KAAKc,cAAcK,OAAQ,CACnD,IAAMC,EAAcpB,KAAKc,cAAcd,KAAKc,cAAcK,OAAS,GACnE,GAAIC,GAAeA,EAAYD,OAC7B,OAAOC,EAAYA,EAAYD,OAAS,GAG5C,OAAOF,OAAOC,KAAKlB,KAAKgB,WAAWhB,KAAKgB,UAAUG,OAAS,wCAGhDE,GAUX,OATArB,KAAKS,mBAAqBT,KAAKU,WAC/BV,KAAKU,WAAaW,EAElBrB,KAAKE,YAAcF,KAAKE,YAAYa,yBAClCf,KAAKgB,UACLhB,KAAKa,kBACLb,KAAKc,eAGAd,eAIXsB,EAAOC,QAAU1B","file":"295.js"}