{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst dismissKeyboard = require('dismissKeyboard');\nconst requireNativeComponent = require('requireNativeComponent');\n\nconst NativeAndroidViewPager = requireNativeComponent('AndroidViewPager');\n\nconst VIEWPAGER_REF = 'viewPager';\n\ntype Event = Object;\n\nexport type ViewPagerScrollState = $Enum<{\n  idle: string,\n  dragging: string,\n  settling: string,\n}>;\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `ViewPagerAndroid` will be treated as a separate page\n * and will be stretched to fill the `ViewPagerAndroid`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <ViewPagerAndroid\n *       style={styles.viewPager}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </ViewPagerAndroid>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   viewPager: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\nclass ViewPagerAndroid extends React.Component<{\n  initialPage?: number,\n  onPageScroll?: Function,\n  onPageScrollStateChanged?: Function,\n  onPageSelected?: Function,\n  pageMargin?: number,\n  peekEnabled?: boolean,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  scrollEnabled?: boolean,\n}> {\n  /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n   * when making Flow check .android.js files. */\n  static propTypes = {\n    ...ViewPropTypes,\n    /**\n     * Index of initial page that should be selected. Use `setPage` method to\n     * update the page, and `onPageSelected` to monitor page changes\n     */\n    initialPage: PropTypes.number,\n\n    /**\n     * Executed when transitioning between pages (ether because of animation for\n     * the requested page change or when user is swiping/dragging between pages)\n     * The `event.nativeEvent` object for this callback will carry following data:\n     *  - position - index of first page from the left that is currently visible\n     *  - offset - value from range [0,1) describing stage between page transitions.\n     *    Value x means that (1 - x) fraction of the page at \"position\" index is\n     *    visible, and x fraction of the next page is visible.\n     */\n    onPageScroll: PropTypes.func,\n\n    /**\n     * Function called when the page scrolling state has changed.\n     * The page scrolling state can be in 3 states:\n     * - idle, meaning there is no interaction with the page scroller happening at the time\n     * - dragging, meaning there is currently an interaction with the page scroller\n     * - settling, meaning that there was an interaction with the page scroller, and the\n     *   page scroller is now finishing it's closing or opening animation\n     */\n    onPageScrollStateChanged: PropTypes.func,\n\n    /**\n     * This callback will be called once ViewPager finish navigating to selected page\n     * (when user swipes between pages). The `event.nativeEvent` object passed to this\n     * callback will have following fields:\n     *  - position - index of page that has been selected\n     */\n    onPageSelected: PropTypes.func,\n\n    /**\n     * Blank space to show between pages. This is only visible while scrolling, pages are still\n     * edge-to-edge.\n     */\n    pageMargin: PropTypes.number,\n\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag',\n    ]),\n\n    /**\n     * When false, the content does not scroll.\n     * The default value is true.\n     */\n    scrollEnabled: PropTypes.bool,\n\n    /**\n     * Whether enable showing peekFraction or not. If this is true, the preview of\n     * last and next page will show in current screen. Defaults to false.\n     */\n    peekEnabled: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    if (this.props.initialPage != null) {\n      this.setPageWithoutAnimation(this.props.initialPage);\n    }\n  }\n\n  /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n   * when making Flow check .android.js files. */\n  getInnerViewNode = (): ReactComponent => {\n    return this.refs[VIEWPAGER_REF].getInnerViewNode();\n  };\n\n  /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n   * when making Flow check .android.js files. */\n  _childrenWithOverridenStyle = (): Array => {\n    // Override styles so that each page will fill the parent. Native component\n    // will handle positioning of elements, so it's not important to offset\n    // them correctly.\n    /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n     * when making Flow check .android.js files. */\n    return React.Children.map(this.props.children, function(child) {\n      if (!child) {\n        return null;\n      }\n      const newProps = {\n        ...child.props,\n        style: [\n          child.props.style,\n          {\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            width: undefined,\n            height: undefined,\n          },\n        ],\n        collapsable: false,\n      };\n      if (\n        child.type &&\n        child.type.displayName &&\n        child.type.displayName !== 'RCTView' &&\n        child.type.displayName !== 'View'\n      ) {\n        console.warn(\n          'Each ViewPager child must be a <View>. Was ' +\n            child.type.displayName,\n        );\n      }\n      return React.createElement(child.type, newProps);\n    });\n  };\n\n  _onPageScroll = (e: Event) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  };\n\n  _onPageScrollStateChanged = (e: Event) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);\n    }\n  };\n\n  _onPageSelected = (e: Event) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will be animated.\n   */\n  setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.AndroidViewPager.Commands.setPage,\n      [selectedPage],\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will *not* be animated.\n   */\n  setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.AndroidViewPager.Commands.setPageWithoutAnimation,\n      [selectedPage],\n    );\n  };\n\n  render() {\n    return (\n      <NativeAndroidViewPager\n        {...this.props}\n        ref={VIEWPAGER_REF}\n        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n         * found when making Flow check .android.js files. */\n        style={this.props.style}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        children={this._childrenWithOverridenStyle()}\n      />\n    );\n  }\n}\n\nmodule.exports = ViewPagerAndroid;\n"],"names":["React","require","d","PropTypes","ReactNative","UIManager","ViewPropTypes","dismissKeyboard","NativeAndroidViewPager","requireNativeComponent","VIEWPAGER_REF","ViewPagerAndroid","getInnerViewNode","_this","refs","_childrenWithOverridenStyle","Children","map","props","children","child","newProps","_objectSpread","style","position","left","top","right","bottom","width","undefined","height","collapsable","type","displayName","console","warn","createElement","_onPageScroll","e","onPageScroll","keyboardDismissMode","_onPageScrollStateChanged","onPageScrollStateChanged","nativeEvent","pageScrollState","_onPageSelected","onPageSelected","setPage","selectedPage","dispatchViewManagerCommand","findNodeHandle","_assertThisInitialized","AndroidViewPager","Commands","setPageWithoutAnimation","this","initialPage","_extends","ref","Component","propTypes","number","func","pageMargin","oneOf","scrollEnabled","bool","peekEnabled","module","exports"],"mappings":"4BAUA,iGAEMA,EAAQC,EAAOC,EAAA,IACfC,EAAYF,EAAOC,EAAA,IACnBE,EAAcH,EAAOC,EAAA,KACrBG,EAAYJ,EAAOC,EAAA,KACnBI,EAAgBL,EAAOC,EAAA,KAEvBK,EAAkBN,EAAOC,EAAA,KAGzBM,EAFyBP,EAAOC,EAAA,IAEPO,CAAuB,oBAEhDC,EAAgB,YAmDhBC,gLAsFJC,iBAAmB,WACjB,OAAOC,EAAKC,KAAKJ,GAAeE,sBAKlCG,4BAA8B,WAM5B,OAAOf,EAAMgB,SAASC,IAAIJ,EAAKK,MAAMC,SAAU,SAASC,GACtD,IAAKA,EACH,OAAO,KAET,IAAMC,EAAQC,KACTF,EAAMF,OACTK,OACEH,EAAMF,MAAMK,OAEVC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,WAAOC,EACPC,YAAQD,IAGZE,aAAa,IAaf,OAVEZ,EAAMa,MACNb,EAAMa,KAAKC,aACgB,YAA3Bd,EAAMa,KAAKC,aACgB,SAA3Bd,EAAMa,KAAKC,aAEXC,QAAQC,KACN,8CACEhB,EAAMa,KAAKC,aAGVlC,EAAMqC,cAAcjB,EAAMa,KAAMZ,QAI3CiB,cAAgB,SAACC,GACX1B,EAAKK,MAAMsB,cACb3B,EAAKK,MAAMsB,aAAaD,GAEa,YAAnC1B,EAAKK,MAAMuB,qBACblC,OAIJmC,0BAA4B,SAACH,GACvB1B,EAAKK,MAAMyB,0BACb9B,EAAKK,MAAMyB,yBAAyBJ,EAAEK,YAAYC,oBAItDC,gBAAkB,SAACP,GACb1B,EAAKK,MAAM6B,gBACblC,EAAKK,MAAM6B,eAAeR,MAQ9BS,QAAU,SAACC,GACT5C,EAAU6C,2BACR9C,EAAY+C,eAAZC,EAAAA,EAAAvC,KACAR,EAAUgD,iBAAiBC,SAASN,SACnCC,OAQLM,wBAA0B,SAACN,GACzB5C,EAAU6C,2BACR9C,EAAY+C,eAAZC,EAAAA,EAAAvC,KACAR,EAAUgD,iBAAiBC,SAASC,yBACnCN,oEA/F2B,MAA1BO,KAAKtC,MAAMuC,aACbD,KAAKD,wBAAwBC,KAAKtC,MAAMuC,8CAmG1C,OACEzD,EAAAqC,cAAC7B,EAADkD,KACMF,KAAKtC,OACTyC,IAAKjD,EAGLa,MAAOiC,KAAKtC,MAAMK,MAClBiB,aAAcgB,KAAKlB,cACnBK,yBAA0Ba,KAAKd,0BAC/BK,eAAgBS,KAAKV,gBACrB3B,SAAUqC,KAAKzC,yCA7LQf,EAAM4D,WAA/BjD,EAYGkD,eACFvD,GAKHmD,YAAatD,EAAU2D,OAWvBtB,aAAcrC,EAAU4D,KAUxBpB,yBAA0BxC,EAAU4D,KAQpChB,eAAgB5C,EAAU4D,KAM1BC,WAAY7D,EAAU2D,OAOtBrB,oBAAqBtC,EAAU8D,OAC7B,OACA,YAOFC,cAAe/D,EAAUgE,KAMzBC,YAAajE,EAAUgE,OAwH3BE,EAAOC,QAAU3D","file":"307.js"}