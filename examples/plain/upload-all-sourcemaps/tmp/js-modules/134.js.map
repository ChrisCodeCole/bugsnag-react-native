{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Network/FormData.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\ntype FormDataValue = any;\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string};\ntype FormDataPart =\n  | {\n      string: string,\n      headers: Headers,\n    }\n  | {\n      uri: string,\n      headers: Headers,\n      name?: string,\n      type?: string,\n    };\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      const headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"],"names":["FormData","_classCallCheck","this","_parts","key","value","push","map","_ref","_ref2","_slicedToArray","name","headers","content-disposition","type","_objectSpread","fieldName","string","String","module","exports"],"mappings":"4BAUA,yDAsCMA,cAGJ,SAAAA,IAAcC,EAAAC,KAAAF,GACZE,KAAKC,mDAGAC,EAAaC,GAMlBH,KAAKC,OAAOG,MAAMF,EAAKC,uCAIvB,OAAOH,KAAKC,OAAOI,IAAI,SAAAC,GAAmB,IAAAC,EAAAC,EAAAF,EAAA,GAAjBG,EAAiBF,EAAA,GAAXJ,EAAWI,EAAA,GAGlCG,GAAoBC,sBAFC,oBAAsBF,EAAO,KAQxD,MAAqB,iBAAVN,GAAsBA,GACL,iBAAfA,EAAMM,OACfC,EAAQ,wBAA0B,eAAiBP,EAAMM,KAAO,KAExC,iBAAfN,EAAMS,OACfF,EAAQ,gBAAkBP,EAAMS,MAElCC,KAAWV,GAAOO,QAAAA,EAASI,UAAWL,MAGhCM,OAAQC,OAAOb,GAAQO,QAAAA,EAASI,UAAWL,eAKzDQ,EAAOC,QAAUpB","file":"134.js"}