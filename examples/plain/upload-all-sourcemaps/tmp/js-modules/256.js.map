{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Lists/VirtualizeUtils.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nfunction elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  itemCount: number,\n  getFrameMetrics: (index: number) => {length: number, offset: number},\n): Array<number> {\n  const out = [];\n  let outLength = 0;\n  for (let ii = 0; ii < itemCount; ii++) {\n    const frame = getFrameMetrics(ii);\n    const trailingOffset = frame.offset + frame.length;\n    for (let kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(\n            outLength === offsets.length,\n            'bad offsets input, should be in increasing order: %s',\n            JSON.stringify(offsets),\n          );\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nfunction newRangeCount(\n  prev: {first: number, last: number},\n  next: {first: number, last: number},\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nfunction computeWindowedRenderLimits(\n  props: {\n    data: any,\n    getItemCount: (data: any) => number,\n    maxToRenderPerBatch: number,\n    windowSize: number,\n  },\n  prev: {first: number, last: number},\n  getFrameMetricsApprox: (index: number) => {length: number, offset: number},\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n  },\n): {first: number, last: number} {\n  const {data, getItemCount, maxToRenderPerBatch, windowSize} = props;\n  const itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  const {offset, velocity, visibleLength} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props.getItemCount(props.data),\n    getFrameMetricsApprox,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nconst VirtualizeUtils = {\n  computeWindowedRenderLimits,\n  elementsThatOverlapOffsets,\n  newRangeCount,\n};\n\nmodule.exports = VirtualizeUtils;\n"],"names":["invariant","require","d","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","VirtualizeUtils","computeWindowedRenderLimits","props","getFrameMetricsApprox","scrollMetrics","data","getItemCount","maxToRenderPerBatch","windowSize","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","fillPreference","overscanBegin","overscanEnd","_elementsThatOverlapO","_elementsThatOverlapO2","_slicedToArray","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","module","exports"],"mappings":"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","file":"256.js"}