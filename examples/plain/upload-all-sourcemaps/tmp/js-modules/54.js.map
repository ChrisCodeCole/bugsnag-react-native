{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EventSubscription from 'EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string,\n    subscription: EventSubscription,\n  ): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"],"names":["invariant","require","d","EventSubscriptionVendor","_classCallCheck","this","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"mappings":"4BAUA,qCAEMA,EAAYC,EAAOC,EAAA,IAQnBC,cAIJ,SAAAA,IAAcC,EAAAC,KAAAF,GACZE,KAAKC,yBACLD,KAAKE,qBAAuB,uDAU5BC,EACAC,GAEAT,EACES,EAAaC,aAAeL,KAC5B,0DAEGA,KAAKC,sBAAsBE,KAC9BH,KAAKC,sBAAsBE,OAE7B,IAAMG,EAAMN,KAAKC,sBAAsBE,GAAWI,OAIlD,OAHAP,KAAKC,sBAAsBE,GAAWK,KAAKJ,GAC3CA,EAAaD,UAAYA,EACzBC,EAAaE,IAAMA,EACZF,iDAScD,QACHM,IAAdN,EACFH,KAAKC,gCAEED,KAAKC,sBAAsBE,8CAUnBC,GACjB,IAAMD,EAAYC,EAAaD,UACzBG,EAAMF,EAAaE,IAEnBI,EAAuBV,KAAKC,sBAAsBE,GACpDO,UACKA,EAAqBJ,mDAgBRH,GACtB,OAAOH,KAAKC,sBAAsBE,aAItCQ,EAAOC,QAAUd","file":"54.js"}