{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n/* eslint no-bitwise: 0 */\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('fbjs/lib/invariant');\nconst normalizeColor = require('normalizeColor');\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: Array<number>,\n  /* $FlowFixMe(>=0.38.0 site=react_native_fb,react_native_oss) - Flow error\n   * detected during the deployment of v0.38.0. To see the error, remove this\n   * comment and run flow\n   */\n  outputRange: Array<number> | Array<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let int32Color = normalizeColor(input);\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n\n  const r = (int32Color & 0xff000000) >>> 24;\n  const g = (int32Color & 0x00ff0000) >>> 16;\n  const b = (int32Color & 0x0000ff00) >>> 8;\n  const a = (int32Color & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[0-9\\.-]+/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      const val = +interpolations[i++](input);\n      const rounded =\n        shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      return String(rounded);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: Array<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: Array<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: Array<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n       * one or both of the operands may be something that doesn't cleanly\n       * convert to a string, like undefined, null, and object, etc. If you really\n       * mean this implicit string conversion, you can do something like\n       * String(myThing)\n       */\n      'inputRange must be monotonically non-decreasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: Array<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly convert\n     * to a string, like undefined, null, and object, etc. If you really mean\n     * this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n    super.__makeNative();\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>) {\n    // Change the string array type to number array\n    // So we can reuse the same logic in iOS and Android platform\n    /* $FlowFixMe(>=0.70.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.70 was deployed. To see the error delete this\n     * comment and run Flow. */\n    return range.map(function(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n      if (/deg$/.test(value)) {\n        const degrees = parseFloat(value) || 0;\n        const radians = (degrees * Math.PI) / 180.0;\n        return radians;\n      } else {\n        // Assume radians\n        return parseFloat(value) || 0;\n      }\n    });\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"],"names":["AnimatedWithChildren","require","d","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","stringShapeRegex","checkPattern","map","outputRanges","match","forEach","value","number","i","push","interpolations","_objectSpread","shouldRound","startsWith","replace","val","rounded","Math","round","String","arr","pattern","name","AnimatedInterpolation","parent","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_parent","_config","_interpolation","__makeNative","_get","prototype","parentValue","__getValue","__addChild","__removeChild","test","parseFloat","PI","__transformDataType","type","__createInterpolation","module","exports"],"mappings":"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","file":"207.js"}