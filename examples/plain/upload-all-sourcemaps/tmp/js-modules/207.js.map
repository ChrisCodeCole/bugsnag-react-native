{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedValue.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedInterpolation = require('./AnimatedInterpolation');\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst InteractionManager = require('InteractionManager');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\nimport type AnimatedTracking from './AnimatedTracking';\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\ntype ValueListenerCallback = (state: {value: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode: AnimatedValue): void {\n  const animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.68 was deployed. To see the error delete this\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See http://facebook.github.io/react-native/docs/animatedvalue.html\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedTracking;\n  _listeners: {[key: string]: ValueListenerCallback};\n  __nativeAnimatedValueListener: ?any;\n\n  constructor(value: number) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    this._listeners = {};\n  }\n\n  __detach() {\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  __makeNative() {\n    super.__makeNative();\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setvalue\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setoffset\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#extractoffset\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#addlistener\n   */\n  addListener(callback: ValueListenerCallback): string {\n    const id = String(_uniqueId++);\n    this._listeners[id] = callback;\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removelistener\n   */\n  removeListener(id: string): void {\n    delete this._listeners[id];\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this._listeners = {};\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener(\n      'onAnimatedValueUpdate',\n      data => {\n        if (data.tag !== this.__getNativeTag()) {\n          return;\n        }\n        this._updateValue(data.value, false /* flush */);\n      },\n    );\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#stopanimation\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#resetanimation\n   */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#animate\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedTracking): void {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    for (const key in this._listeners) {\n      this._listeners[key]({value: this.__getValue()});\n    }\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n\nmodule.exports = AnimatedValue;\n"],"names":["AnimatedInterpolation","require","d","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_uniqueId","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","value","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_startingValue","_value","_offset","_animation","_listeners","stopAnimation","_get","prototype","Object","keys","length","_startListeningToNativeValueUpdates","stop","_updateValue","__isNative","setAnimatedNodeValue","__getNativeTag","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","callback","id","String","_stopListeningForNativeValueUpdates","_this2","__nativeAnimatedValueListener","startListeningToAnimatedNodeValue","nativeEventEmitter","addListener","data","tag","remove","stopListeningToAnimatedNodeValue","stopTracking","__getValue","config","animation","_this3","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","_tracking","__detach","tracking","flush","key","type","module","exports"],"mappings":"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","file":"207.js"}