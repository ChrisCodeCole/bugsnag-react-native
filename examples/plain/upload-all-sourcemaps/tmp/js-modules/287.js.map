{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/Switch/Switch.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst SwitchNativeComponent = require('SwitchNativeComponent');\nconst Platform = require('Platform');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\n\nimport type {SwitchChangeEvent} from 'CoreEventTypes';\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {NativeAndroidProps, NativeIOSProps} from 'SwitchNativeComponent';\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Whether the switch is disabled. Defaults to false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Boolean value of the switch. Defaults to false.\n   */\n  value?: ?boolean,\n\n  /**\n   * Custom color for the switch thumb.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n   * Custom colors for the switch track.\n   *\n   * NOTE: On iOS when the switch value is false, the track shrinks into the\n   * border. If you want to change the color of the background exposed by the\n   * shrunken track, use `ios_backgroundColor`.\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n   * On iOS, custom color for the background. This background color can be seen\n   * either when the switch value is false or when the switch is disabled (and\n   * the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the change event as an argument. If you want to only receive the\n   * new value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the new value as an argument. If you want to instead receive an\n   * event, use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\n\n/**\n * A visual toggle between two mutually exclusive states.\n *\n * This is a controlled component that requires an `onValueChange` callback that\n * updates the `value` prop in order for the component to reflect user actions.\n * If the `value` prop is not updated, the component will continue to render the\n * supplied `value` prop instead of the expected result of any user actions.\n */\nclass Switch extends React.Component<Props> {\n  _nativeSwitchRef: ?React.ElementRef<typeof SwitchNativeComponent>;\n\n  render() {\n    const {\n      disabled,\n      ios_backgroundColor,\n      onChange,\n      onValueChange,\n      style,\n      thumbColor,\n      trackColor,\n      value,\n      ...props\n    } = this.props;\n\n    // Support deprecated color props.\n    let _thumbColor = thumbColor;\n    let _trackColorForFalse = trackColor?.false;\n    let _trackColorForTrue = trackColor?.true;\n\n    // TODO: Remove support for these props after a couple releases.\n    const {thumbTintColor, tintColor, onTintColor} = (props: $FlowFixMe);\n    if (thumbTintColor != null) {\n      _thumbColor = thumbTintColor;\n      if (__DEV__) {\n        console.warn(\n          'Switch: `thumbTintColor` is deprecated, use `thumbColor` instead.',\n        );\n      }\n    }\n    if (tintColor != null) {\n      _trackColorForFalse = tintColor;\n      if (__DEV__) {\n        console.warn(\n          'Switch: `tintColor` is deprecated, use `trackColor` instead.',\n        );\n      }\n    }\n    if (onTintColor != null) {\n      _trackColorForTrue = onTintColor;\n      if (__DEV__) {\n        console.warn(\n          'Switch: `onTintColor` is deprecated, use `trackColor` instead.',\n        );\n      }\n    }\n\n    const platformProps =\n      Platform.OS === 'android'\n        ? ({\n            enabled: disabled !== true,\n            on: value === true,\n            style,\n            thumbTintColor: _thumbColor,\n            trackTintColor:\n              value === true ? _trackColorForTrue : _trackColorForFalse,\n          }: NativeAndroidProps)\n        : ({\n            disabled,\n            onTintColor: _trackColorForTrue,\n            style: StyleSheet.compose(\n              {height: 31, width: 51},\n              StyleSheet.compose(\n                style,\n                ios_backgroundColor == null\n                  ? null\n                  : {\n                      backgroundColor: ios_backgroundColor,\n                      borderRadius: 16,\n                    },\n              ),\n            ),\n            thumbTintColor: _thumbColor,\n            tintColor: _trackColorForFalse,\n            value: value === true,\n          }: NativeIOSProps);\n\n    return (\n      <SwitchNativeComponent\n        {...props}\n        {...platformProps}\n        onChange={this._handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={this._handleSwitchNativeComponentRef}\n      />\n    );\n  }\n\n  _handleChange = (event: SwitchChangeEvent) => {\n    if (this._nativeSwitchRef == null) {\n      return;\n    }\n\n    // Force value of native switch in order to control it.\n    const value = this.props.value === true;\n    if (Platform.OS === 'android') {\n      this._nativeSwitchRef.setNativeProps({on: value});\n    } else {\n      this._nativeSwitchRef.setNativeProps({value});\n    }\n\n    if (this.props.onChange != null) {\n      this.props.onChange(event);\n    }\n\n    if (this.props.onValueChange != null) {\n      this.props.onValueChange(event.nativeEvent.value);\n    }\n  };\n\n  _handleSwitchNativeComponentRef = (\n    ref: ?React.ElementRef<typeof SwitchNativeComponent>,\n  ) => {\n    this._nativeSwitchRef = ref;\n  };\n}\n\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\nmodule.exports = Switch;\n"],"names":["SwitchNativeComponent","require","d","React","Switch","_handleChange","event","_this","_nativeSwitchRef","value","props","setNativeProps","on","onChange","onValueChange","nativeEvent","_handleSwitchNativeComponentRef","ref","_this$props","this","disabled","style","ios_backgroundColor","thumbColor","trackColor","_objectWithoutProperties","_thumbColor","_trackColorForFalse","undefined","false","_trackColorForTrue","true","_ref","thumbTintColor","tintColor","onTintColor","platformProps","enabled","trackTintColor","createElement","_extends","onResponderTerminationRequest","returnsFalse","onStartShouldSetResponder","returnsTrue","Component","module","exports"],"mappings":"4BAUA,uFAEMA,EAAwBC,EAAOC,EAAA,IAE/BC,GADWF,EAAOC,EAAA,IACVD,EAAOC,EAAA,KAsEfE,GArEaH,EAAOC,EAAA,mLA+JxBG,cAAgB,SAACC,GACf,GAA6B,MAAzBC,EAAKC,iBAAT,CAKA,IAAMC,GAA6B,IAArBF,EAAKG,MAAMD,MAEvBF,EAAKC,iBAAiBG,gBAAgBC,GAAIH,IAKjB,MAAvBF,EAAKG,MAAMG,UACbN,EAAKG,MAAMG,SAASP,GAGU,MAA5BC,EAAKG,MAAMI,eACbP,EAAKG,MAAMI,cAAcR,EAAMS,YAAYN,WAI/CO,gCAAkC,SAChCC,GAEAV,EAAKC,iBAAmBS,uDAhHjB,IAAAC,EAWHC,KAAKT,MATPU,EAFKF,EAELE,SAIAC,GANKH,EAGLI,oBAHKJ,EAILL,SAJKK,EAKLJ,cALKI,EAMLG,OACAE,EAPKL,EAOLK,WACAC,EARKN,EAQLM,WACAf,EATKS,EASLT,MACGC,EAVEe,EAAAP,GAAA,WAAA,sBAAA,WAAA,gBAAA,QAAA,aAAA,aAAA,UAcHQ,EAAcH,EACdI,EAAmB,MAAGH,OAAHI,EAAGJ,EAAYK,MAClCC,EAAkB,MAAGN,OAAHI,EAAGJ,EAAYO,KAhB9BC,EAmB2CtB,EAA3CuB,EAnBAD,EAmBAC,eAAgBC,EAnBhBF,EAmBgBE,UAAWC,EAnB3BH,EAmB2BG,YACZ,MAAlBF,IACFP,EAAcO,GAOC,MAAbC,IACFP,EAAsBO,GAOL,MAAfC,IACFL,EAAqBK,GAQvB,IAAMC,GAGEC,SAAsB,IAAbjB,EACTR,IAAc,IAAVH,EACJY,MAAAA,EACAY,eAAgBP,EAChBY,gBACY,IAAV7B,EAAiBqB,EAAqBH,GAsBhD,OACExB,EAAAoC,cAACvC,EAADwC,KACM9B,EACA0B,GACJvB,SAAUM,KAAKd,cACfoC,8BAA+BC,EAC/BC,0BAA2BC,EAC3B3B,IAAKE,KAAKH,2CArFGb,EAAM0C,YAuHrBH,EAAe,WAAA,OAAM,GACrBE,EAAc,WAAA,OAAM,GAE1BE,EAAOC,QAAU3C","file":"287.js"}