__d(function(g,r,i,a,m,e,d){'use strict';var o=r(d[0]),n=r(d[1]),s=r(d[2]),l=r(d[3]),t=r(d[4]),c=r(d[5]),p=r(d[6]),h=r(d[7]),u=r(d[8]),S=r(d[9]),R=r(d[10]),T=r(d[11]).ScrollViewManager,b={Mixin:{mixins:[t.Mixin],scrollResponderMixinGetInitialState:function(){return{isTouching:!1,lastMomentumScrollBeginTime:0,lastMomentumScrollEndTime:0,observedScrollSinceBecomingResponder:!1,becameResponderWhileAnimating:!1}},scrollResponderHandleScrollShouldSetResponder:function(){return this.state.isTouching},scrollResponderHandleStartShouldSetResponder:function(o){var n=c.currentlyFocusedField();return'handled'===this.props.keyboardShouldPersistTaps&&null!=n&&o.target!==n},scrollResponderHandleStartShouldSetResponderCapture:function(o){if(this.scrollResponderIsAnimating())return!0;var n=c.currentlyFocusedField(),s=this.props.keyboardShouldPersistTaps;return!(s&&'never'!==s||null==n||c.isTextInput(o.target))},scrollResponderHandleResponderReject:function(){},scrollResponderHandleTerminationRequest:function(){return!this.state.observedScrollSinceBecomingResponder},scrollResponderHandleTouchEnd:function(o){var n=o.nativeEvent;this.state.isTouching=0!==n.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(o)},scrollResponderHandleTouchCancel:function(o){this.state.isTouching=!1,this.props.onTouchCancel&&this.props.onTouchCancel(o)},scrollResponderHandleResponderRelease:function(o){this.props.onResponderRelease&&this.props.onResponderRelease(o);var n=c.currentlyFocusedField();!0===this.props.keyboardShouldPersistTaps||'always'===this.props.keyboardShouldPersistTaps||null==n||o.target===n||this.state.observedScrollSinceBecomingResponder||this.state.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(o),c.blurTextInput(n))},scrollResponderHandleScroll:function(o){this.state.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(o)},scrollResponderHandleResponderGrant:function(o){this.state.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(o),this.state.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},scrollResponderHandleScrollBeginDrag:function(o){n.beginScroll(),this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(o)},scrollResponderHandleScrollEndDrag:function(o){var s=o.nativeEvent.velocity;this.scrollResponderIsAnimating()||s&&(0!==s.x||0!==s.y)||n.endScroll(),this.props.onScrollEndDrag&&this.props.onScrollEndDrag(o)},scrollResponderHandleMomentumScrollBegin:function(o){this.state.lastMomentumScrollBeginTime=S(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(o)},scrollResponderHandleMomentumScrollEnd:function(o){n.endScroll(),this.state.lastMomentumScrollEndTime=S(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(o)},scrollResponderHandleTouchStart:function(o){this.state.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(o)},scrollResponderHandleTouchMove:function(o){this.props.onTouchMove&&this.props.onTouchMove(o)},scrollResponderIsAnimating:function(){return S()-this.state.lastMomentumScrollEndTime<16||this.state.lastMomentumScrollEndTime<this.state.lastMomentumScrollBeginTime},scrollResponderGetScrollableNode:function(){return this.getScrollableNode?this.getScrollableNode():l.findNodeHandle(this)},scrollResponderScrollTo:function(o,n,s){if('number'==typeof o)console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');else{var l=o||{};o=l.x,n=l.y,s=l.animated}p.dispatchViewManagerCommand(u(this.scrollResponderGetScrollableNode()),p.RCTScrollView.Commands.scrollTo,[o||0,n||0,!1!==s])},scrollResponderScrollToEnd:function(o){var n=!1!==(o&&o.animated);p.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(),p.RCTScrollView.Commands.scrollToEnd,[n])},scrollResponderScrollWithoutAnimationTo:function(o,n){console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead'),this.scrollResponderScrollTo({x:o,y:n,animated:!1})},scrollResponderZoomTo:function(o,n){h(T&&T.zoomToRect,'zoomToRect is not implemented'),'animated'in o?(n=o.animated,delete o.animated):void 0!==n&&console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead'),T.zoomToRect(this.scrollResponderGetScrollableNode(),o,!1!==n)},scrollResponderFlashScrollIndicators:function(){p.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(),p.RCTScrollView.Commands.flashScrollIndicators,[])},scrollResponderScrollNativeHandleToKeyboard:function(o,n,s){this.additionalScrollOffset=n||0,this.preventNegativeScrollOffset=!!s,p.measureLayout(o,l.findNodeHandle(this.getInnerViewNode()),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},scrollResponderInputMeasureAndScrollToKeyboard:function(n,s,l,t){var c=o.get('window').height;this.keyboardWillOpenTo&&(c=this.keyboardWillOpenTo.endCoordinates.screenY);var p=s-c+t+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(p=Math.max(0,p)),this.scrollResponderScrollTo({x:0,y:p,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},scrollResponderTextInputFocusError:function(o){console.error('Error measuring text field: ',o)},UNSAFE_componentWillMount:function(){var o=this.props.keyboardShouldPersistTaps;R('boolean'!=typeof o,"'keyboardShouldPersistTaps={"+o+"}' is deprecated. Use 'keyboardShouldPersistTaps=\""+(o?'always':'never')+"\"' instead"),this.keyboardWillOpenTo=null,this.additionalScrollOffset=0,this.addListenerOn(s,'keyboardWillShow',this.scrollResponderKeyboardWillShow),this.addListenerOn(s,'keyboardWillHide',this.scrollResponderKeyboardWillHide),this.addListenerOn(s,'keyboardDidShow',this.scrollResponderKeyboardDidShow),this.addListenerOn(s,'keyboardDidHide',this.scrollResponderKeyboardDidHide)},scrollResponderKeyboardWillShow:function(o){this.keyboardWillOpenTo=o,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(o)},scrollResponderKeyboardWillHide:function(o){this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(o)},scrollResponderKeyboardDidShow:function(o){o&&(this.keyboardWillOpenTo=o),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(o)},scrollResponderKeyboardDidHide:function(o){this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(o)}}};m.exports=b},238,[64,239,240,92,243,158,56,28,192,114,117,30]);