{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst requireNativeComponent = require('requireNativeComponent');\n\nconst RCTInputAccessoryView = requireNativeComponent('RCTInputAccessoryView');\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = {\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: string,\n  style?: ViewPropTypes.style,\n  backgroundColor?: ColorPropType,\n};\n\nclass InputAccessoryView extends React.Component<Props> {\n  render(): React.Node {\n    console.warn('<InputAccessoryView> is not supported on Android yet.');\n\n    if (React.Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <RCTInputAccessoryView\n        style={[this.props.style, styles.container]}\n        nativeID={this.props.nativeID}\n        backgroundColor={this.props.backgroundColor}>\n        {this.props.children}\n      </RCTInputAccessoryView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n});\n\nmodule.exports = InputAccessoryView;\n"],"names":["React","require","d","StyleSheet","RCTInputAccessoryView","requireNativeComponent","InputAccessoryView","console","warn","Children","count","this","props","children","createElement","style","styles","container","nativeID","backgroundColor","Component","create","position","module","exports"],"mappings":"4BASA,mEAGMA,GADgBC,EAAOC,EAAA,IACfD,EAAOC,EAAA,KACfC,EAAaF,EAAOC,EAAA,IAKpBE,GAJgBH,EAAOC,EAAA,IAEED,EAAOC,EAAA,GAERG,CAAuB,0BAuE/CC,kIAIF,OAFAC,QAAQC,KAAK,yDAEqC,IAA9CR,EAAMS,SAASC,MAAMC,KAAKC,MAAMC,UAC3B,KAIPb,EAAAc,cAACV,GACCW,OAAQJ,KAAKC,MAAMG,MAAOC,EAAOC,WACjCC,SAAUP,KAAKC,MAAMM,SACrBC,gBAAiBR,KAAKC,MAAMO,iBAC3BR,KAAKC,MAAMC,kBAbab,EAAMoB,WAmBjCJ,EAASb,EAAWkB,QACxBJ,WACEK,SAAU,cAIdC,EAAOC,QAAUlB","file":"272.js"}