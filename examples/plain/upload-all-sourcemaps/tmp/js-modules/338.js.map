{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/ReactNative/takeSnapshot.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nconst ReactNative = require('ReactNative');\nconst UIManager = require('UIManager');\n\n/**\n * Capture an image of the screen, window or an individual view. The image\n * will be stored in a temporary file that will only exist for as long as the\n * app is running.\n *\n * The `view` argument can be the literal string `window` if you want to\n * capture the entire window, or it can be a reference to a specific\n * React Native component.\n *\n * The `options` argument may include:\n * - width/height (number) - the width and height of the image to capture.\n * - format (string) - either 'png' or 'jpeg'. Defaults to 'png'.\n * - quality (number) - the quality when using jpeg. 0.0 - 1.0 (default).\n *\n * Returns a Promise.\n * @platform ios\n */\nmodule.exports = function takeSnapshot(\n  view?: 'window' | React$Element<any> | number,\n  options?: {\n    width?: number,\n    height?: number,\n    format?: 'png' | 'jpeg',\n    quality?: number,\n  },\n): Promise<any> {\n  if (typeof view !== 'number' && view !== 'window') {\n    view = ReactNative.findNodeHandle(view) || 'window';\n  }\n\n  // Call the hidden '__takeSnapshot' method; the main one throws an error to\n  // prevent accidental backwards-incompatible usage.\n  return UIManager.__takeSnapshot(view, options);\n};\n"],"names":["ReactNative","require","d","UIManager","module","exports","view","options","findNodeHandle","__takeSnapshot"],"mappings":"4BAUA,IAAMA,EAAcC,EAAOC,EAAA,IACrBC,EAAYF,EAAOC,EAAA,IAmBzBE,EAAOC,QAAU,SACfC,EACAC,GAaA,MANoB,iBAATD,GAA8B,WAATA,IAC9BA,EAAON,EAAYQ,eAAeF,IAAS,UAKtCH,EAAUM,eAAeH,EAAMC","file":"338.js"}