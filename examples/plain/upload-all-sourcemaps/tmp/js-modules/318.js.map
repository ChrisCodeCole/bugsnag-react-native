{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Utilities/BackHandler.android.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst DeviceEventManager = require('NativeModules').DeviceEventManager;\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nconst DEVICE_BACK_EVENT = 'hardwareBackPress';\n\ntype BackPressEventName = $Enum<{\n  backPress: string,\n}>;\n\nconst _backPressSubscriptions = new Set();\n\nRCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function() {\n  let invokeDefault = true;\n  const subscriptions = Array.from(_backPressSubscriptions.values()).reverse();\n\n  for (let i = 0; i < subscriptions.length; ++i) {\n    if (subscriptions[i]()) {\n      invokeDefault = false;\n      break;\n    }\n  }\n\n  if (invokeDefault) {\n    BackHandler.exitApp();\n  }\n});\n\n/**\n * Detect hardware button presses for back navigation.\n *\n * Android: Detect hardware back button presses, and programmatically invoke the default back button\n * functionality to exit the app if there are no listeners or if none of the listeners return true.\n *\n * tvOS: Detect presses of the menu button on the TV remote.  (Still to be implemented:\n * programmatically disable menu button handling\n * functionality to exit the app if there are no listeners or if none of the listeners return true.)\n *\n * iOS: Not applicable.\n *\n * The event subscriptions are called in reverse order (i.e. last registered subscription first),\n * and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * Example:\n *\n * ```javascript\n * BackHandler.addEventListener('hardwareBackPress', function() {\n *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n *  // Typically you would use the navigator here to go to the last state.\n *\n *  if (!this.onMainScreen()) {\n *    this.goBack();\n *    return true;\n *  }\n *  return false;\n * });\n * ```\n */\nconst BackHandler = {\n  exitApp: function() {\n    DeviceEventManager.invokeDefaultBackPressHandler();\n  },\n\n  /**\n   * Adds an event handler. Supported events:\n   *\n   * - `hardwareBackPress`: Fires when the Android hardware back button is pressed or when the\n   * tvOS menu button is pressed.\n   */\n  addEventListener: function(\n    eventName: BackPressEventName,\n    handler: Function,\n  ): {remove: () => void} {\n    _backPressSubscriptions.add(handler);\n    return {\n      remove: () => BackHandler.removeEventListener(eventName, handler),\n    };\n  },\n\n  /**\n   * Removes the event handler.\n   */\n  removeEventListener: function(\n    eventName: BackPressEventName,\n    handler: Function,\n  ): void {\n    _backPressSubscriptions.delete(handler);\n  },\n};\n\nmodule.exports = BackHandler;\n"],"names":["DeviceEventManager","require","d","RCTDeviceEventEmitter","_backPressSubscriptions","Set","addListener","invokeDefault","subscriptions","Array","from","values","reverse","i","length","BackHandler","exitApp","invokeDefaultBackPressHandler","addEventListener","eventName","handler","add","remove","removeEventListener","delete","module","exports"],"mappings":"4BASA,aAEA,IAAMA,EAAqBC,EAAOC,EAAA,IAAkBF,mBAC9CG,EAAwBF,EAAOC,EAAA,IAQ/BE,EAA0B,IAAIC,IAEpCF,EAAsBG,YARI,oBAQ2B,WAInD,IAHA,IAAIC,GAAgB,EACdC,EAAgBC,MAAMC,KAAKN,EAAwBO,UAAUC,UAE1DC,EAAI,EAAGA,EAAIL,EAAcM,SAAUD,EAC1C,GAAIL,EAAcK,KAAM,CACtBN,GAAgB,EAChB,MAIAA,GACFQ,EAAYC,YAkChB,IAAMD,GACJC,QAAS,WACPhB,EAAmBiB,iCASrBC,iBAAkB,SAChBC,EACAC,GAGA,OADAhB,EAAwBiB,IAAID,IAE1BE,OAAQ,WAAA,OAAMP,EAAYQ,oBAAoBJ,EAAWC,MAO7DG,oBAAqB,SACnBJ,EACAC,GAEAhB,EAAwBoB,OAAOJ,KAInCK,EAAOC,QAAUX","file":"318.js"}