{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/local-cli/bundle/assetPathUtils.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {PackagerAsset} from '../../Libraries/Image/AssetRegistry';\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n    case 1:\n      return 'mdpi';\n    case 1.5:\n      return 'hdpi';\n    case 2:\n      return 'xhdpi';\n    case 3:\n      return 'xxhdpi';\n    case 4:\n      return 'xxxhdpi';\n  }\n  throw new Error('no such scale');\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(asset: PackagerAsset, scale: number) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  var suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for asset: \" +\n        JSON.stringify(asset),\n    );\n  }\n  const androidFolder = 'drawable-' + suffix;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset) {\n  var folderPath = getBasePath(asset);\n  return (folderPath + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset) {\n  var basePath = asset.httpServerLocation;\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n  return basePath;\n}\n\nmodule.exports = {\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\n  getBasePath: getBasePath,\n};\n"],"names":["getAndroidAssetSuffix","scale","Error","drawableFileTypes","Set","getBasePath","asset","basePath","httpServerLocation","substr","module","exports","getAndroidResourceFolderName","has","type","suffix","JSON","stringify","getAndroidResourceIdentifier","name","toLowerCase","replace"],"mappings":"4BAUA,aAQA,SAASA,EAAsBC,GAC7B,OAAQA,GACN,IAAK,IACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,IACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,UAEX,MAAM,IAAIC,MAAM,iBAIlB,IAAMC,EAAoB,IAAIC,KAC5B,MACA,OACA,MACA,MACA,MACA,OACA,QA2BF,SAASC,EAAYC,GACnB,IAAIC,EAAWD,EAAME,mBAIrB,MAHoB,MAAhBD,EAAS,KACXA,EAAWA,EAASE,OAAO,IAEtBF,EAGTG,EAAOC,SACLX,sBAAuBA,EACvBY,6BAlCF,SAAsCN,EAAsBL,GAC1D,IAAKE,EAAkBU,IAAIP,EAAMQ,MAC/B,MAAO,MAET,IAAIC,EAASf,EAAsBC,GACnC,IAAKc,EACH,MAAM,IAAIb,MACR,8DACEc,KAAKC,UAAUX,IAIrB,MADsB,YAAcS,GAwBpCG,6BApBF,SAAsCZ,GAEpC,OADiBD,EAAYC,GACR,IAAMA,EAAMa,MAC9BC,cACAC,QAAQ,MAAO,KACfA,QAAQ,gBAAiB,IACzBA,QAAQ,WAAY,KAevBhB,YAAaA","file":"169.js"}