{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from 'AssetRegistry';\n\nconst PixelRatio = require('PixelRatio');\nconst Platform = require('Platform');\n\nconst assetPathUtils = require('../../local-cli/bundle/assetPathUtils');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const drawbleFolder = assetPathUtils.getAndroidResourceFolderName(\n    asset,\n    scale,\n  );\n  const fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(\n      assetPathUtils.getAndroidResourceIdentifier(this.asset),\n    );\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n}\n\nmodule.exports = AssetSourceResolver;\n"],"names":["PixelRatio","require","d","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","getBasePath","name","type","getAssetPathInDrawableFolder","getAndroidResourceFolderName","getAndroidResourceIdentifier","serverUrl","jsbundleUrl","_classCallCheck","this","startsWith","isLoadedFromServer","assetServerURL","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","fromSource","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"4BASA,qCAYMA,EAAaC,EAAOC,EAAA,IAGpBC,GAFWF,EAAOC,EAAA,IAEDD,EAAOC,EAAA,KACxBE,EAAYH,EAAOC,EAAA,IAKzB,SAASG,EAAmBC,GAC1B,IAAMC,EAAQC,EAAoBC,UAAUH,EAAMI,OAAQV,EAAWW,OAC/DC,EAAwB,IAAVL,EAAc,GAAK,IAAMA,EAAQ,IAErD,OADiBJ,EAAeU,YAAYP,GAC1B,IAAMA,EAAMQ,KAAOF,EAAc,IAAMN,EAAMS,KAMjE,SAASC,EAA6BV,GACpC,IAAMC,EAAQC,EAAoBC,UAAUH,EAAMI,OAAQV,EAAWW,OAMrE,OALsBR,EAAec,6BACnCX,EACAC,GAGqB,IADNJ,EAAee,6BAA6BZ,GACrB,IAAMA,EAAMS,SAGhDP,cAOJ,SAAAA,EAAYW,EAAoBC,EAAsBd,GAAsBe,EAAAC,KAAAd,GAC1Ec,KAAKH,UAAYA,EACjBG,KAAKF,YAAcA,EACnBE,KAAKhB,MAAQA,yDAIb,QAASgB,KAAKH,2DAId,SAAUG,KAAKF,cAAeE,KAAKF,YAAYG,WAAW,mDAI1D,OAAID,KAAKE,qBACAF,KAAKG,iBAILH,KAAKI,yBACRJ,KAAKK,yBACLL,KAAKM,0EAYX,OADAxB,IAAYkB,KAAKH,UAAW,4BACrBG,KAAKO,WACVP,KAAKH,UACHd,EAAmBiB,KAAKhB,OACxB,0BAGAgB,KAAKhB,MAAMwB,gDASf,OAAOR,KAAKO,WAAWxB,EAAmBiB,KAAKhB,2DAQ/C,IAAMyB,EAAOT,KAAKF,aAAe,UACjC,OAAOE,KAAKO,WAAWE,EAAO1B,EAAmBiB,KAAKhB,iEActD,OAJAF,GAAS,EAEP,wCAEKkB,KAAKO,WACV1B,EAAee,6BAA6BI,KAAKhB,yDAUnD,IAAMyB,EAAOT,KAAKF,aAAe,UACjC,OAAOE,KAAKO,WAAWE,EAAOf,EAA6BM,KAAKhB,2CAGvD0B,GACT,OACEC,kBAAkB,EAClBC,MAAOZ,KAAKhB,MAAM4B,MAClBC,OAAQb,KAAKhB,MAAM6B,OACnBC,IAAKJ,EACLzB,MAAOC,EAAoBC,UAAUa,KAAKhB,MAAMI,OAAQV,EAAWW,4CAItDD,EAAuB2B,GAEtC,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,EAAO6B,OAAQD,IACjC,GAAI5B,EAAO4B,IAAMD,EACf,OAAO3B,EAAO4B,GAOlB,OAAO5B,EAAOA,EAAO6B,OAAS,IAAM,YAIxCC,EAAOC,QAAUjC","file":"169.js"}