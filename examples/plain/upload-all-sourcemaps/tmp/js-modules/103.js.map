{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {ExtendedError} from 'parseErrorStack';\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: boolean) {\n  const {ExceptionsManager} = require('NativeModules');\n  if (ExceptionsManager) {\n    const parseErrorStack = require('parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(\n        e.message,\n        stack,\n        currentExceptionID,\n      );\n    } else {\n      ExceptionsManager.reportSoftException(\n        e.message,\n        stack,\n        currentExceptionID,\n      );\n    }\n    if (__DEV__) {\n      const symbolicateStackTrace = require('symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(prettyStack => {\n          if (prettyStack) {\n            ExceptionsManager.updateExceptionMessage(\n              e.message,\n              prettyStack,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error =>\n          console.warn('Unable to symbolicate stack trace: ' + error.message),\n        );\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: Function,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: Error, isFatal: boolean) {\n  // Workaround for reporting errors caused by `throw 'some string'`\n  // Unfortunately there is no way to figure out the stacktrace in this\n  // case, so if you ended up here trying to trace an error, look for\n  // `throw '<error message>'` somewhere in your codebase.\n  if (!e.message) {\n    e = new Error(e);\n  }\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    const stringifySafe = require('stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {handleException, installConsoleErrorReporter};\n"],"names":["exceptionID","reportException","e","isFatal","ExceptionsManager","require","d","stack","parseErrorStack","currentExceptionID","reportFatalException","message","reportSoftException","reactConsoleErrorHandler","console","_errorOriginal","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","join","slice","error","Error","framesToPop","module","exports","handleException","installConsoleErrorReporter","bind","undefined"],"mappings":"4BAUA,aAOA,IAAIA,EAAc,EAClB,SAASC,EAAgBC,EAAkBC,GAAkB,IACpDC,EAAqBC,EAAOC,EAAA,IAA5BF,kBACP,GAAIA,EAAmB,CACrB,IACMG,EADkBF,EAAOC,EAAA,GACjBE,CAAgBN,GACxBO,IAAuBT,EACzBG,EACFC,EAAkBM,qBAChBR,EAAES,QACFJ,EACAE,GAGFL,EAAkBQ,oBAChBV,EAAES,QACFJ,EACAE,IAgDR,SAASI,IAEP,GADAC,QAAQC,eAAeC,MAAMF,QAASG,WACjCH,QAAQI,yBAIb,GAAID,UAAU,IAAMA,UAAU,GAAGV,MAC/BN,EAAgBgB,UAAU,IAAkB,OACvC,CACL,IAAME,EAAgBd,EAAOC,EAAA,IACvBc,EAAMC,MAAMC,UAAUC,IAAIC,KAAKP,UAAWE,GAAeM,KAAK,MACpE,GAAyB,eAArBL,EAAIM,MAAM,EAAG,IAIf,OAEF,IAAMC,EAAuB,IAAIC,MAAM,kBAAoBR,GAC3DO,EAAME,YAAc,EACpB5B,EAAgB0B,GAAqB,IAuBzCG,EAAOC,SAAWC,gBA1DlB,SAAyB9B,EAAUC,GAK5BD,EAAES,UACLT,EAAI,IAAI0B,MAAM1B,IAEZY,QAAQC,eACVD,QAAQC,eAAeb,EAAES,SAEzBG,QAAQa,MAAMzB,EAAES,SAElBV,EAAgBC,EAAGC,IA6Cc8B,4BAfnC,WAEMnB,QAAQC,iBAIZD,QAAQC,eAAiBD,QAAQa,MAAMO,KAAKpB,SAC5CA,QAAQa,MAAQd,OACyBsB,IAArCrB,QAAQI,2BAGVJ,QAAQI,0BAA2B","file":"103.js"}