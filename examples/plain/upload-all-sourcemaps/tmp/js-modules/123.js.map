{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/event-target-shim/lib/custom-event-target.js"],"sourcesContent":["/**\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nvar Commons = require(\"./commons\");\nvar LISTENERS = Commons.LISTENERS;\nvar ATTRIBUTE = Commons.ATTRIBUTE;\nvar newNode = Commons.newNode;\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/**\n * Gets a specified attribute listener from a given EventTarget object.\n *\n * @param {EventTarget} eventTarget - An EventTarget object to get.\n * @param {string} type - An event type to get.\n * @returns {function|null} The found attribute listener.\n */\nfunction getAttributeListener(eventTarget, type) {\n    var node = eventTarget[LISTENERS][type];\n    while (node != null) {\n        if (node.kind === ATTRIBUTE) {\n            return node.listener;\n        }\n        node = node.next;\n    }\n    return null;\n}\n\n/**\n * Sets a specified attribute listener to a given EventTarget object.\n *\n * @param {EventTarget} eventTarget - An EventTarget object to set.\n * @param {string} type - An event type to set.\n * @param {function|null} listener - A listener to be set.\n * @returns {void}\n */\nfunction setAttributeListener(eventTarget, type, listener) {\n    if (typeof listener !== \"function\" && typeof listener !== \"object\") {\n        listener = null; // eslint-disable-line no-param-reassign\n    }\n\n    var prev = null;\n    var node = eventTarget[LISTENERS][type];\n    while (node != null) {\n        if (node.kind === ATTRIBUTE) {\n            // Remove old value.\n            if (prev == null) {\n                eventTarget[LISTENERS][type] = node.next;\n            }\n            else {\n                prev.next = node.next;\n            }\n        }\n        else {\n            prev = node;\n        }\n\n        node = node.next;\n    }\n\n    // Add new value.\n    if (listener != null) {\n        if (prev == null) {\n            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);\n        }\n        else {\n            prev.next = newNode(listener, ATTRIBUTE);\n        }\n    }\n}\n\n//-----------------------------------------------------------------------------\n// Public Interface\n//-----------------------------------------------------------------------------\n\n/**\n * Defines an `EventTarget` implementation which has `onfoobar` attributes.\n *\n * @param {EventTarget} EventTargetBase - A base implementation of EventTarget.\n * @param {string[]} types - A list of event types which are defined as attribute listeners.\n * @returns {EventTarget} The defined `EventTarget` implementation which has attribute listeners.\n */\nexports.defineCustomEventTarget = function(EventTargetBase, types) {\n    function EventTarget() {\n        EventTargetBase.call(this);\n    }\n\n    var descripter = {\n        constructor: {\n            value: EventTarget,\n            configurable: true,\n            writable: true\n        }\n    };\n\n    types.forEach(function(type) {\n        descripter[\"on\" + type] = {\n            get: function() { return getAttributeListener(this, type); },\n            set: function(listener) { setAttributeListener(this, type, listener); },\n            configurable: true,\n            enumerable: true\n        };\n    });\n\n    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);\n\n    return EventTarget;\n};\n"],"names":["Commons","require","d","LISTENERS","ATTRIBUTE","newNode","getAttributeListener","eventTarget","type","node","kind","listener","next","setAttributeListener","prev","exports","defineCustomEventTarget","EventTargetBase","types","EventTarget","call","this","descripter","constructor","value","configurable","writable","forEach","get","set","enumerable","prototype","Object","create"],"mappings":"4BAMA,aAMA,IAAIA,EAAUC,EAAOC,EAAA,IACjBC,EAAYH,EAAQG,UACpBC,EAAYJ,EAAQI,UACpBC,EAAUL,EAAQK,QAatB,SAASC,EAAqBC,EAAaC,GAEvC,IADA,IAAIC,EAAOF,EAAYJ,GAAWK,GACnB,MAARC,GAAc,CACjB,GAAIA,EAAKC,OAASN,EACd,OAAOK,EAAKE,SAEhBF,EAAOA,EAAKG,KAEhB,OAAO,KAWX,SAASC,EAAqBN,EAAaC,EAAMG,GACrB,mBAAbA,GAA+C,iBAAbA,IACzCA,EAAW,MAKf,IAFA,IAAIG,EAAO,KACPL,EAAOF,EAAYJ,GAAWK,GACnB,MAARC,GACCA,EAAKC,OAASN,EAEF,MAARU,EACAP,EAAYJ,GAAWK,GAAQC,EAAKG,KAGpCE,EAAKF,KAAOH,EAAKG,KAIrBE,EAAOL,EAGXA,EAAOA,EAAKG,KAIA,MAAZD,IACY,MAARG,EACAP,EAAYJ,GAAWK,GAAQH,EAAQM,EAAUP,GAGjDU,EAAKF,KAAOP,EAAQM,EAAUP,IAgB1CW,EAAQC,wBAA0B,SAASC,EAAiBC,GACxD,SAASC,IACLF,EAAgBG,KAAKC,MAGzB,IAAIC,GACAC,aACIC,MAAOL,EACPM,cAAc,EACdC,UAAU,IAelB,OAXAR,EAAMS,QAAQ,SAASnB,GACnBc,EAAW,KAAOd,IACdoB,IAAK,WAAa,OAAOtB,EAAqBe,KAAMb,IACpDqB,IAAK,SAASlB,GAAYE,EAAqBQ,KAAMb,EAAMG,IAC3Dc,cAAc,EACdK,YAAY,KAIpBX,EAAYY,UAAYC,OAAOC,OAAOhB,EAAgBc,UAAWT,GAE1DH","file":"123.js"}