{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Lists/VirtualizedList.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst Batchinator = require('Batchinator');\nconst FillRateHelper = require('FillRateHelper');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst UIManager = require('UIManager');\nconst View = require('View');\nconst ViewabilityHelper = require('ViewabilityHelper');\n\nconst flattenStyle = require('flattenStyle');\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nconst {computeWindowedRenderLimits} = require('VirtualizeUtils');\n\nimport type {DangerouslyImpreciseStyleProp, ViewStyleProp} from 'StyleSheet';\nimport type {\n  ViewabilityConfig,\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from 'ViewabilityHelper';\n\ntype Item = any;\n\nexport type renderItemType = (info: any) => ?React.Element<any>;\n\ntype ViewabilityHelperCallbackTuple = {\n  viewabilityHelper: ViewabilityHelper,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n};\n\ntype RequiredProps = {\n  // TODO: Conflicts with the optional `renderItem` in\n  // `VirtualizedSectionList`'s props.\n  renderItem: $FlowFixMe<renderItemType>,\n  /**\n   * The default accessor functions assume this is an Array<{key: string}> but you can override\n   * getItem, getItemCount, and keyExtractor to handle any type of index-based data.\n   */\n  data?: any,\n  /**\n   * A generic accessor for extracting an item from any sort of data blob.\n   */\n  getItem: (data: any, index: number) => ?Item,\n  /**\n   * Determines how many items are in the data blob.\n   */\n  getItemCount: (data: any) => number,\n};\ntype OptionalProps = {\n  /**\n   * `debug` will turn on extra logging and visual overlays to aid with debugging both usage and\n   * implementation, but with a significant perf hit.\n   */\n  debug?: ?boolean,\n  /**\n   * DEPRECATED: Virtualization provides significant performance and memory optimizations, but fully\n   * unmounts react instances that are outside of the render window. You should only need to disable\n   * this for debugging purposes.\n   */\n  disableVirtualization: boolean,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  getItemLayout?: (\n    data: any,\n    index: number,\n  ) => {length: number, offset: number, index: number}, // e.g. height, y\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  keyExtractor: (item: Item, index: number) => string,\n  /**\n   * Each cell is rendered using this element. Can be a React Component Class,\n   * or a render function. Defaults to using View.\n   */\n  CellRendererComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListFooterComponent\n   */\n  ListFooterComponentStyle?: ViewStyleProp,\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListHeaderComponent\n   */\n  ListHeaderComponentStyle?: ViewStyleProp,\n  /**\n   * A unique identifier for this list. If there are multiple VirtualizedLists at the same level of\n   * nesting within another VirtualizedList, this key is necessary for virtualization to\n   * work properly.\n   */\n  listKey?: string,\n  /**\n   * The maximum number of items to render in each incremental render batch. The more rendered at\n   * once, the better the fill rate, but responsiveness my suffer because rendering content may\n   * interfere with responding to button taps or other interactions.\n   */\n  maxToRenderPerBatch: number,\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  onEndReachedThreshold?: ?number, // units of visible length\n  onLayout?: ?Function,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Used to handle failures when scrolling to an index that has not been measured yet. Recommended\n   * action is to either compute your own offset and `scrollTo` it, or scroll as far as possible and\n   * then try again after more items have been rendered.\n   */\n  onScrollToIndexFailed?: ?(info: {\n    index: number,\n    highestMeasuredFrameIndex: number,\n    averageItemLength: number,\n  }) => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the\n   * `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  /**\n   * A custom refresh control element. When set, it overrides the default\n   * <RefreshControl> component built internally. The onRefresh and refreshing\n   * props are also ignored. Only works for vertical VirtualizedList.\n   */\n  refreshControl?: ?React.Element<any>,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\n   */\n  renderScrollComponent?: (props: Object) => React.Element<any>,\n  /**\n   * Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off\n   * screen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.\n   */\n  updateCellsBatchingPeriod: number,\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * List of ViewabilityConfig/onViewableItemsChanged pairs. A specific onViewableItemsChanged\n   * will be called when its corresponding ViewabilityConfig's conditions are met.\n   */\n  viewabilityConfigCallbackPairs?: Array<ViewabilityConfigCallbackPair>,\n  /**\n   * Determines the maximum number of items rendered outside of the visible area, in units of\n   * visible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will\n   * render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing\n   * this number will reduce memory consumption and may improve performance, but will increase the\n   * chance that fast scrolling may reveal momentary blank areas of unrendered content.\n   */\n  windowSize: number,\n};\n/* $FlowFixMe - this Props seems to be missing a bunch of stuff. Remove this\n * comment to see the errors */\nexport type Props = RequiredProps & OptionalProps;\n\nlet _usedIndexForKey = false;\nlet _keylessItemComponentName: string = '';\n\ntype Frame = {\n  offset: number,\n  length: number,\n  index: number,\n  inLayout: boolean,\n};\n\ntype ChildListState = {\n  first: number,\n  last: number,\n  frames: {[key: number]: Frame},\n};\n\ntype State = {first: number, last: number};\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](/react-native/docs/flatlist.html)\n * and [`<SectionList>`](/react-native/docs/sectionlist.html) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nclass VirtualizedList extends React.PureComponent<Props, State> {\n  props: Props;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    const frame = this._getFrameMetricsApprox(veryLast);\n    const offset = Math.max(\n      0,\n      frame.offset +\n        frame.length +\n        this._footerLength -\n        this._scrollMetrics.visibleLength,\n    );\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this._scrollRef.scrollTo(\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    const {\n      data,\n      horizontal,\n      getItemCount,\n      getItemLayout,\n      onScrollToIndexFailed,\n    } = this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      `scrollToIndex out of range: ${index} vs ${getItemCount(data) - 1}`,\n    );\n    if (!getItemLayout && index > this._highestMeasuredFrameIndex) {\n      invariant(\n        !!onScrollToIndexFailed,\n        'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' +\n          'otherwise there is no way to know the location of offscreen indices or handle failures.',\n      );\n      onScrollToIndexFailed({\n        averageItemLength: this._averageCellLength,\n        highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,\n        index,\n      });\n      return;\n    }\n    const frame = this._getFrameMetricsApprox(index);\n    const offset =\n      Math.max(\n        0,\n        frame.offset -\n          (viewPosition || 0) *\n            (this._scrollMetrics.visibleLength - frame.length),\n      ) - (viewOffset || 0);\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this._scrollRef.scrollTo(\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: Item,\n    viewPosition?: number,\n  }) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this._scrollRef.scrollTo(\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  recordInteraction() {\n    this._nestedChildLists.forEach(childList => {\n      childList.ref && childList.ref.recordInteraction();\n    });\n    this._viewabilityTuples.forEach(t => {\n      t.viewabilityHelper.recordInteraction();\n    });\n    this._updateViewableItems(this.props.data);\n  }\n\n  flashScrollIndicators() {\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder() {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollRef);\n    }\n  }\n\n  setNativeProps(props: Object) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  }\n\n  static defaultProps = {\n    disableVirtualization: false,\n    horizontal: false,\n    initialNumToRender: 10,\n    keyExtractor: (item: Item, index: number) => {\n      if (item.key != null) {\n        return item.key;\n      }\n      _usedIndexForKey = true;\n      if (item.type && item.type.displayName) {\n        _keylessItemComponentName = item.type.displayName;\n      }\n      return String(index);\n    },\n    maxToRenderPerBatch: 10,\n    onEndReachedThreshold: 2, // multiples of length\n    scrollEventThrottle: 50,\n    updateCellsBatchingPeriod: 50,\n    windowSize: 21, // multiples of length\n  };\n\n  static contextTypes = {\n    virtualizedCell: PropTypes.shape({\n      cellKey: PropTypes.string,\n    }),\n    virtualizedList: PropTypes.shape({\n      getScrollMetrics: PropTypes.func,\n      horizontal: PropTypes.bool,\n      getOutermostParentListRef: PropTypes.func,\n      getNestedChildState: PropTypes.func,\n      registerAsNestedChild: PropTypes.func,\n      unregisterAsNestedChild: PropTypes.func,\n    }),\n  };\n\n  static childContextTypes = {\n    virtualizedList: PropTypes.shape({\n      getScrollMetrics: PropTypes.func,\n      horizontal: PropTypes.bool,\n      getOutermostParentListRef: PropTypes.func,\n      getNestedChildState: PropTypes.func,\n      registerAsNestedChild: PropTypes.func,\n      unregisterAsNestedChild: PropTypes.func,\n    }),\n  };\n\n  getChildContext() {\n    return {\n      virtualizedList: {\n        getScrollMetrics: this._getScrollMetrics,\n        horizontal: this.props.horizontal,\n        getOutermostParentListRef: this._getOutermostParentListRef,\n        getNestedChildState: this._getNestedChildState,\n        registerAsNestedChild: this._registerAsNestedChild,\n        unregisterAsNestedChild: this._unregisterAsNestedChild,\n      },\n    };\n  }\n\n  _getCellKey(): string {\n    return (\n      (this.context.virtualizedCell && this.context.virtualizedCell.cellKey) ||\n      'rootList'\n    );\n  }\n\n  _getScrollMetrics = () => {\n    return this._scrollMetrics;\n  };\n\n  hasMore(): boolean {\n    return this._hasMore;\n  }\n\n  _getOutermostParentListRef = () => {\n    if (this._isNestedWithSameOrientation()) {\n      return this.context.virtualizedList.getOutermostParentListRef();\n    } else {\n      return this;\n    }\n  };\n\n  _getNestedChildState = (key: string): ?ChildListState => {\n    const existingChildData = this._nestedChildLists.get(key);\n    return existingChildData && existingChildData.state;\n  };\n\n  _registerAsNestedChild = (childList: {\n    cellKey: string,\n    key: string,\n    ref: VirtualizedList,\n  }): ?ChildListState => {\n    // Register the mapping between this child key and the cellKey for its cell\n    const childListsInCell =\n      this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();\n    childListsInCell.add(childList.key);\n    this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);\n\n    const existingChildData = this._nestedChildLists.get(childList.key);\n    invariant(\n      !(existingChildData && existingChildData.ref !== null),\n      'A VirtualizedList contains a cell which itself contains ' +\n        'more than one VirtualizedList of the same orientation as the parent ' +\n        'list. You must pass a unique listKey prop to each sibling list.',\n    );\n    this._nestedChildLists.set(childList.key, {\n      ref: childList.ref,\n      state: null,\n    });\n\n    if (this._hasInteracted) {\n      childList.ref.recordInteraction();\n    }\n  };\n\n  _unregisterAsNestedChild = (childList: {\n    key: string,\n    state: ChildListState,\n  }): void => {\n    this._nestedChildLists.set(childList.key, {\n      ref: null,\n      state: childList.state,\n    });\n  };\n\n  state: State;\n\n  constructor(props: Props, context: Object) {\n    super(props, context);\n    invariant(\n      !props.onScroll || !props.onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n        'to support native onScroll events with useNativeDriver',\n    );\n\n    invariant(\n      props.windowSize > 0,\n      'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.',\n    );\n\n    this._fillRateHelper = new FillRateHelper(this._getFrameMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod,\n    );\n\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),\n          onViewableItemsChanged: pair.onViewableItemsChanged,\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      this._viewabilityTuples.push({\n        viewabilityHelper: new ViewabilityHelper(this.props.viewabilityConfig),\n        onViewableItemsChanged: this.props.onViewableItemsChanged,\n      });\n    }\n\n    let initialState = {\n      first: this.props.initialScrollIndex || 0,\n      last:\n        Math.min(\n          this.props.getItemCount(this.props.data),\n          (this.props.initialScrollIndex || 0) + this.props.initialNumToRender,\n        ) - 1,\n    };\n\n    if (this._isNestedWithSameOrientation()) {\n      const storedState = this.context.virtualizedList.getNestedChildState(\n        this.props.listKey || this._getCellKey(),\n      );\n      if (storedState) {\n        initialState = storedState;\n        this.state = storedState;\n        this._frames = storedState.frames;\n      }\n    }\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.virtualizedList.registerAsNestedChild({\n        cellKey: this._getCellKey(),\n        key: this.props.listKey || this._getCellKey(),\n        ref: this,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.virtualizedList.unregisterAsNestedChild({\n        key: this.props.listKey || this._getCellKey(),\n        state: {\n          first: this.state.first,\n          last: this.state.last,\n          frames: this._frames,\n        },\n      });\n    }\n    this._updateViewableItems(null);\n    this._updateCellsToRenderBatcher.dispose({abort: true});\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.dispose();\n    });\n    this._fillRateHelper.deactivateAndFlush();\n  }\n\n  static getDerivedStateFromProps(newProps: Props, prevState: State) {\n    const {data, extraData, getItemCount, maxToRenderPerBatch} = newProps;\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    return {\n      first: Math.max(\n        0,\n        Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch),\n      ),\n      last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1)),\n    };\n  }\n\n  _pushCells(\n    cells: Array<Object>,\n    stickyHeaderIndices: Array<number>,\n    stickyIndicesFromProps: Set<number>,\n    first: number,\n    last: number,\n    inversionStyle: ?DangerouslyImpreciseStyleProp,\n  ) {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      data,\n      getItem,\n      getItemCount,\n      horizontal,\n      keyExtractor,\n    } = this.props;\n    const stickyOffset = this.props.ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      const key = keyExtractor(item, ii);\n      this._indicesToKeys.set(ii, key);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n      cells.push(\n        <CellRenderer\n          CellRendererComponent={CellRendererComponent}\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          cellKey={key}\n          fillRateHelper={this._fillRateHelper}\n          horizontal={horizontal}\n          index={ii}\n          inversionStyle={inversionStyle}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onLayout={e => this._onCellLayout(e, key, ii)}\n          onUnmount={this._onCellUnmount}\n          parentProps={this.props}\n          ref={ref => {\n            this._cellRefs[key] = ref;\n          }}\n        />,\n      );\n      prevCellKey = key;\n    }\n  }\n\n  _onUpdateSeparators = (keys: Array<?string>, newProps: Object) => {\n    keys.forEach(key => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  _isVirtualizationDisabled(): boolean {\n    return this.props.disableVirtualization;\n  }\n\n  _isNestedWithSameOrientation(): boolean {\n    const nestedContext = this.context.virtualizedList;\n    return !!(\n      nestedContext && !!nestedContext.horizontal === !!this.props.horizontal\n    );\n  }\n\n  render() {\n    if (__DEV__) {\n      const flatStyles = flattenStyle(this.props.contentContainerStyle);\n      warning(\n        flatStyles == null || flatStyles.flexWrap !== 'wrap',\n        '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n          'Consider using `numColumns` with `FlatList` instead.',\n      );\n    }\n    const {\n      ListEmptyComponent,\n      ListFooterComponent,\n      ListHeaderComponent,\n    } = this.props;\n    const {data, horizontal} = this.props;\n    const isVirtualizationDisabled = this._isVirtualizationDisabled();\n    const inversionStyle = this.props.inverted\n      ? this.props.horizontal\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : null;\n    const cells = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n    if (ListHeaderComponent) {\n      if (stickyIndicesFromProps.has(0)) {\n        stickyHeaderIndices.push(0);\n      }\n      const element = React.isValidElement(ListHeaderComponent) ? (\n        ListHeaderComponent\n      ) : (\n        // $FlowFixMe\n        <ListHeaderComponent />\n      );\n      cells.push(\n        <VirtualizedCellWrapper\n          cellKey={this._getCellKey() + '-header'}\n          key=\"$header\">\n          <View\n            onLayout={this._onLayoutHeader}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListHeaderComponentStyle,\n            )}>\n            {\n              // $FlowFixMe - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedCellWrapper>,\n      );\n    }\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      _keylessItemComponentName = '';\n      const spacerKey = !horizontal ? 'height' : 'width';\n      const lastInitialIndex = this.props.initialScrollIndex\n        ? -1\n        : this.props.initialNumToRender - 1;\n      const {first, last} = this.state;\n      this._pushCells(\n        cells,\n        stickyHeaderIndices,\n        stickyIndicesFromProps,\n        0,\n        lastInitialIndex,\n        inversionStyle,\n      );\n      const firstAfterInitial = Math.max(lastInitialIndex + 1, first);\n      if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {\n        let insertedStickySpacer = false;\n        if (stickyIndicesFromProps.size > 0) {\n          const stickyOffset = ListHeaderComponent ? 1 : 0;\n          // See if there are any sticky headers in the virtualized space that we need to render.\n          for (let ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {\n            if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n              const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n              const stickyBlock = this._getFrameMetricsApprox(ii);\n              const leadSpace = stickyBlock.offset - initBlock.offset;\n              cells.push(\n                <View key=\"$sticky_lead\" style={{[spacerKey]: leadSpace}} />,\n              );\n              this._pushCells(\n                cells,\n                stickyHeaderIndices,\n                stickyIndicesFromProps,\n                ii,\n                ii,\n                inversionStyle,\n              );\n              const trailSpace =\n                this._getFrameMetricsApprox(first).offset -\n                (stickyBlock.offset + stickyBlock.length);\n              cells.push(\n                <View key=\"$sticky_trail\" style={{[spacerKey]: trailSpace}} />,\n              );\n              insertedStickySpacer = true;\n              break;\n            }\n          }\n        }\n        if (!insertedStickySpacer) {\n          const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n          const firstSpace =\n            this._getFrameMetricsApprox(first).offset -\n            (initBlock.offset + initBlock.length);\n          cells.push(\n            <View key=\"$lead_spacer\" style={{[spacerKey]: firstSpace}} />,\n          );\n        }\n      }\n      this._pushCells(\n        cells,\n        stickyHeaderIndices,\n        stickyIndicesFromProps,\n        firstAfterInitial,\n        last,\n        inversionStyle,\n      );\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key property on each ' +\n            'item or provide a custom keyExtractor.',\n          _keylessItemComponentName,\n        );\n        this._hasWarned.keys = true;\n      }\n      if (!isVirtualizationDisabled && last < itemCount - 1) {\n        const lastFrame = this._getFrameMetricsApprox(last);\n        // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n        // prevent the user for hyperscrolling into un-measured area because otherwise content will\n        // likely jump around as it renders in above the viewport.\n        const end = this.props.getItemLayout\n          ? itemCount - 1\n          : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);\n        const endFrame = this._getFrameMetricsApprox(end);\n        const tailSpacerLength =\n          endFrame.offset +\n          endFrame.length -\n          (lastFrame.offset + lastFrame.length);\n        cells.push(\n          <View key=\"$tail_spacer\" style={{[spacerKey]: tailSpacerLength}} />,\n        );\n      }\n    } else if (ListEmptyComponent) {\n      const element: React.Element<any> = ((React.isValidElement(\n        ListEmptyComponent,\n      ) ? (\n        ListEmptyComponent\n      ) : (\n        // $FlowFixMe\n        <ListEmptyComponent />\n      )): any);\n      cells.push(\n        React.cloneElement(element, {\n          key: '$empty',\n          onLayout: event => {\n            this._onLayoutEmpty(event);\n            if (element.props.onLayout) {\n              element.props.onLayout(event);\n            }\n          },\n          style: [element.props.style, inversionStyle],\n        }),\n      );\n    }\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent) ? (\n        ListFooterComponent\n      ) : (\n        // $FlowFixMe\n        <ListFooterComponent />\n      );\n      cells.push(\n        <VirtualizedCellWrapper\n          cellKey={this._getCellKey() + '-footer'}\n          key=\"$footer\">\n          <View\n            onLayout={this._onLayoutFooter}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListFooterComponentStyle,\n            )}>\n            {\n              // $FlowFixMe - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedCellWrapper>,\n      );\n    }\n    const scrollProps = {\n      ...this.props,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      scrollEventThrottle: this.props.scrollEventThrottle, // TODO: Android support\n      invertStickyHeaders:\n        this.props.invertStickyHeaders !== undefined\n          ? this.props.invertStickyHeaders\n          : this.props.inverted,\n      stickyHeaderIndices,\n    };\n    if (inversionStyle) {\n      /* $FlowFixMe(>=0.70.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.70 was deployed. To see the error delete\n       * this comment and run Flow. */\n      scrollProps.style = [inversionStyle, this.props.style];\n    }\n\n    this._hasMore =\n      this.state.last < this.props.getItemCount(this.props.data) - 1;\n\n    const ret = React.cloneElement(\n      (this.props.renderScrollComponent || this._defaultRenderScrollComponent)(\n        scrollProps,\n      ),\n      // $FlowFixMe Invalid prop usage\n      {\n        ref: this._captureScrollRef,\n      },\n      cells,\n    );\n    if (this.props.debug) {\n      return (\n        <View style={{flex: 1}}>\n          {ret}\n          {this._renderDebugOverlay()}\n        </View>\n      );\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {data, extraData} = this.props;\n    if (data !== prevProps.data || extraData !== prevProps.extraData) {\n      this._hasDataChangedSinceEndReached = true;\n\n      // clear the viewableIndices cache to also trigger\n      // the onViewableItemsChanged callback with the new data\n      this._viewabilityTuples.forEach(tuple => {\n        tuple.viewabilityHelper.resetViewableIndices();\n      });\n    }\n    this._scheduleCellsToRenderUpdate();\n  }\n\n  _averageCellLength = 0;\n  // Maps a cell key to the set of keys for all outermost child lists within that cell\n  _cellKeysToChildListKeys: Map<string, Set<string>> = new Map();\n  _cellRefs = {};\n  _fillRateHelper: FillRateHelper;\n  _frames = {};\n  _footerLength = 0;\n  _hasDataChangedSinceEndReached = true;\n  _hasInteracted = false;\n  _hasMore = false;\n  _hasWarned = {};\n  _highestMeasuredFrameIndex = 0;\n  _headerLength = 0;\n  _indicesToKeys: Map<number, string> = new Map();\n  _hasDoneInitialScroll = false;\n  _nestedChildLists: Map<\n    string,\n    {ref: ?VirtualizedList, state: ?ChildListState},\n  > = new Map();\n  _offsetFromParentVirtualizedList: number = 0;\n  _prevParentOffset: number = 0;\n  _scrollMetrics = {\n    contentLength: 0,\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0,\n  };\n  _scrollRef: ?React.ElementRef<any> = null;\n  _sentEndForContentLength = 0;\n  _totalCellLength = 0;\n  _totalCellsMeasured = 0;\n  _updateCellsToRenderBatcher: Batchinator;\n  _viewabilityTuples: Array<ViewabilityHelperCallbackTuple> = [];\n\n  _captureScrollRef = ref => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state,\n      this._scrollMetrics,\n    );\n  }\n\n  _defaultRenderScrollComponent = props => {\n    const onRefresh = props.onRefresh;\n    if (this._isNestedWithSameOrientation()) {\n      // $FlowFixMe - Typing ReactNativeComponent revealed errors\n      return <View {...props} />;\n    } else if (onRefresh) {\n      invariant(\n        typeof props.refreshing === 'boolean',\n        '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n          JSON.stringify(props.refreshing) +\n          '`',\n      );\n      return (\n        // $FlowFixMe Invalid prop usage\n        <ScrollView\n          {...props}\n          refreshControl={\n            props.refreshControl == null ? (\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={onRefresh}\n                progressViewOffset={props.progressViewOffset}\n              />\n            ) : (\n              props.refreshControl\n            )\n          }\n        />\n      );\n    } else {\n      // $FlowFixMe Invalid prop usage\n      return <ScrollView {...props} />;\n    }\n  };\n\n  _onCellLayout(e, cellKey, index) {\n    const layout = e.nativeEvent.layout;\n    const next = {\n      offset: this._selectOffset(layout),\n      length: this._selectLength(layout),\n      index,\n      inLayout: true,\n    };\n    const curr = this._frames[cellKey];\n    if (\n      !curr ||\n      next.offset !== curr.offset ||\n      next.length !== curr.length ||\n      index !== curr.index\n    ) {\n      this._totalCellLength += next.length - (curr ? curr.length : 0);\n      this._totalCellsMeasured += curr ? 0 : 1;\n      this._averageCellLength =\n        this._totalCellLength / this._totalCellsMeasured;\n      this._frames[cellKey] = next;\n      this._highestMeasuredFrameIndex = Math.max(\n        this._highestMeasuredFrameIndex,\n        index,\n      );\n      this._scheduleCellsToRenderUpdate();\n    } else {\n      this._frames[cellKey].inLayout = true;\n    }\n\n    const childListKeys = this._cellKeysToChildListKeys.get(cellKey);\n    if (childListKeys) {\n      for (let childKey of childListKeys) {\n        const childList = this._nestedChildLists.get(childKey);\n        childList &&\n          childList.ref &&\n          childList.ref.measureLayoutRelativeToContainingList();\n      }\n    }\n\n    this._computeBlankness();\n  }\n\n  _onCellUnmount = (cellKey: string) => {\n    const curr = this._frames[cellKey];\n    if (curr) {\n      this._frames[cellKey] = {...curr, inLayout: false};\n    }\n  };\n\n  measureLayoutRelativeToContainingList(): void {\n    UIManager.measureLayout(\n      ReactNative.findNodeHandle(this),\n      ReactNative.findNodeHandle(\n        this.context.virtualizedList.getOutermostParentListRef(),\n      ),\n      error => {\n        console.warn(\n          \"VirtualizedList: Encountered an error while measuring a list's\" +\n            ' offset from its containing VirtualizedList.',\n        );\n      },\n      (x, y, width, height) => {\n        this._offsetFromParentVirtualizedList = this._selectOffset({x, y});\n        this._scrollMetrics.contentLength = this._selectLength({width, height});\n\n        const scrollMetrics = this._convertParentScrollMetrics(\n          this.context.virtualizedList.getScrollMetrics(),\n        );\n        this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;\n        this._scrollMetrics.offset = scrollMetrics.offset;\n      },\n    );\n  }\n\n  _onLayout = (e: Object) => {\n    if (this._isNestedWithSameOrientation()) {\n      // Need to adjust our scroll metrics to be relative to our containing\n      // VirtualizedList before we can make claims about list item viewability\n      this.measureLayoutRelativeToContainingList();\n    } else {\n      this._scrollMetrics.visibleLength = this._selectLength(\n        e.nativeEvent.layout,\n      );\n    }\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onLayoutEmpty = e => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _onLayoutFooter = e => {\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = e => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _renderDebugOverlay() {\n    const normalize =\n      this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._getFrameMetricsApprox(ii);\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.68 was deployed. To see the error delete this\n       * comment and run Flow. */\n      if (frame.inLayout) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._getFrameMetricsApprox(this.state.first).offset;\n    const frameLast = this._getFrameMetricsApprox(this.state.last);\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n    const baseStyle = {position: 'absolute', top: 0, right: 0};\n    return (\n      <View\n        style={{\n          ...baseStyle,\n          bottom: 0,\n          width: 20,\n          borderColor: 'blue',\n          borderWidth: 1,\n        }}>\n        {framesInLayout.map((f, ii) => (\n          <View\n            key={'f' + ii}\n            style={{\n              ...baseStyle,\n              left: 0,\n              top: f.offset * normalize,\n              height: f.length * normalize,\n              backgroundColor: 'orange',\n            }}\n          />\n        ))}\n        <View\n          style={{\n            ...baseStyle,\n            left: 0,\n            top: windowTop * normalize,\n            height: windowLen * normalize,\n            borderColor: 'green',\n            borderWidth: 2,\n          }}\n        />\n        <View\n          style={{\n            ...baseStyle,\n            left: 0,\n            top: visTop * normalize,\n            height: visLen * normalize,\n            borderColor: 'red',\n            borderWidth: 2,\n          }}\n        />\n      </View>\n    );\n  }\n\n  _selectLength(metrics: $ReadOnly<{height: number, width: number}>): number {\n    return !this.props.horizontal ? metrics.height : metrics.width;\n  }\n\n  _selectOffset(metrics: $ReadOnly<{x: number, y: number}>): number {\n    return !this.props.horizontal ? metrics.y : metrics.x;\n  }\n\n  _maybeCallOnEndReached() {\n    const {\n      data,\n      getItemCount,\n      onEndReached,\n      onEndReachedThreshold,\n    } = this.props;\n    const {contentLength, visibleLength, offset} = this._scrollMetrics;\n    const distanceFromEnd = contentLength - visibleLength - offset;\n    if (\n      onEndReached &&\n      this.state.last === getItemCount(data) - 1 &&\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      distanceFromEnd < onEndReachedThreshold * visibleLength &&\n      (this._hasDataChangedSinceEndReached ||\n        this._scrollMetrics.contentLength !== this._sentEndForContentLength)\n    ) {\n      // Only call onEndReached once for a given dataset + content length.\n      this._hasDataChangedSinceEndReached = false;\n      this._sentEndForContentLength = this._scrollMetrics.contentLength;\n      onEndReached({distanceFromEnd});\n    }\n  }\n\n  _onContentSizeChange = (width: number, height: number) => {\n    if (\n      width > 0 &&\n      height > 0 &&\n      this.props.initialScrollIndex != null &&\n      this.props.initialScrollIndex > 0 &&\n      !this._hasDoneInitialScroll\n    ) {\n      this.scrollToIndex({\n        animated: false,\n        index: this.props.initialScrollIndex,\n      });\n      this._hasDoneInitialScroll = true;\n    }\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scrollMetrics.contentLength = this._selectLength({height, width});\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  /* Translates metrics from a scroll event in a parent VirtualizedList into\n   * coordinates relative to the child list.\n   */\n  _convertParentScrollMetrics = (metrics: {\n    visibleLength: number,\n    offset: number,\n  }) => {\n    // Offset of the top of the nested list relative to the top of its parent's viewport\n    const offset = metrics.offset - this._offsetFromParentVirtualizedList;\n    // Child's visible length is the same as its parent's\n    const visibleLength = metrics.visibleLength;\n    const dOffset = offset - this._scrollMetrics.offset;\n    const contentLength = this._scrollMetrics.contentLength;\n\n    return {\n      visibleLength,\n      contentLength,\n      offset,\n      dOffset,\n    };\n  };\n\n  _onScroll = (e: Object) => {\n    this._nestedChildLists.forEach(childList => {\n      childList.ref && childList.ref._onScroll(e);\n    });\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    let visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    let contentLength = this._selectLength(e.nativeEvent.contentSize);\n    let offset = this._selectOffset(e.nativeEvent.contentOffset);\n    let dOffset = offset - this._scrollMetrics.offset;\n\n    if (this._isNestedWithSameOrientation()) {\n      if (this._scrollMetrics.contentLength === 0) {\n        // Ignore scroll events until onLayout has been called and we\n        // know our offset from our offset from our parent\n        return;\n      }\n      ({\n        visibleLength,\n        contentLength,\n        offset,\n        dOffset,\n      } = this._convertParentScrollMetrics({\n        visibleLength,\n        offset,\n      }));\n    }\n\n    const dt = this._scrollMetrics.timestamp\n      ? Math.max(1, timestamp - this._scrollMetrics.timestamp)\n      : 1;\n    const velocity = dOffset / dt;\n\n    if (\n      dt > 500 &&\n      this._scrollMetrics.dt > 500 &&\n      contentLength > 5 * visibleLength &&\n      !this._hasWarned.perf\n    ) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n          'renderItem function renders components that follow React performance best practices ' +\n          'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n    this._scrollMetrics = {\n      contentLength,\n      dt,\n      dOffset,\n      offset,\n      timestamp,\n      velocity,\n      visibleLength,\n    };\n    this._updateViewableItems(this.props.data);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEndReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _scheduleCellsToRenderUpdate() {\n    const {first, last} = this.state;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    const scrollingThreshold =\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete\n       * this comment and run Flow. */\n      (this.props.onEndReachedThreshold * visibleLength) / 2;\n    // Mark as high priority if we're close to the start of the first item\n    // But only if there are items before the first rendered item\n    if (first > 0) {\n      const distTop = offset - this._getFrameMetricsApprox(first).offset;\n      hiPri =\n        hiPri || distTop < 0 || (velocity < -2 && distTop < scrollingThreshold);\n    }\n    // Mark as high priority if we're close to the end of the last item\n    // But only if there are items after the last rendered item\n    if (last < itemCount - 1) {\n      const distBottom =\n        this._getFrameMetricsApprox(last).offset - (offset + visibleLength);\n      hiPri =\n        hiPri ||\n        distBottom < 0 ||\n        (velocity > 2 && distBottom < scrollingThreshold);\n    }\n    // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n    if (hiPri && this._averageCellLength) {\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({abort: true});\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _onScrollBeginDrag = (e): void => {\n    this._nestedChildLists.forEach(childList => {\n      childList.ref && childList.ref._onScrollBeginDrag(e);\n    });\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.recordInteraction();\n    });\n    this._hasInteracted = true;\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  _onScrollEndDrag = (e): void => {\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  _onMomentumScrollEnd = (e): void => {\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    const {data, getItemCount, onEndReachedThreshold} = this.props;\n    const isVirtualizationDisabled = this._isVirtualizationDisabled();\n    this._updateViewableItems(data);\n    if (!data) {\n      return;\n    }\n    this.setState(state => {\n      let newState;\n      if (!isVirtualizationDisabled) {\n        // If we run this with bogus data, we'll force-render window {first: 0, last: 0},\n        // and wipe out the initialNumToRender rendered elements.\n        // So let's wait until the scroll view metrics have been set up. And until then,\n        // we will trust the initialNumToRender suggestion\n        if (this._scrollMetrics.visibleLength) {\n          // If we have a non-zero initialScrollIndex and run this before we've scrolled,\n          // we'll wipe out the initialNumToRender rendered elements starting at initialScrollIndex.\n          // So let's wait until we've scrolled the view to the right place. And until then,\n          // we will trust the initialScrollIndex suggestion.\n          if (!this.props.initialScrollIndex || this._scrollMetrics.offset) {\n            newState = computeWindowedRenderLimits(\n              this.props,\n              state,\n              this._getFrameMetricsApprox,\n              this._scrollMetrics,\n            );\n          }\n        }\n      } else {\n        const {contentLength, offset, visibleLength} = this._scrollMetrics;\n        const distanceFromEnd = contentLength - visibleLength - offset;\n        const renderAhead =\n          /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses\n           * an error found when Flow v0.63 was deployed. To see the error\n           * delete this comment and run Flow. */\n          distanceFromEnd < onEndReachedThreshold * visibleLength\n            ? this.props.maxToRenderPerBatch\n            : 0;\n        newState = {\n          first: 0,\n          last: Math.min(state.last + renderAhead, getItemCount(data) - 1),\n        };\n      }\n      if (newState && this._nestedChildLists.size > 0) {\n        const newFirst = newState.first;\n        const newLast = newState.last;\n        // If some cell in the new state has a child list in it, we should only render\n        // up through that item, so that we give that list a chance to render.\n        // Otherwise there's churn from multiple child lists mounting and un-mounting\n        // their items.\n        for (let ii = newFirst; ii <= newLast; ii++) {\n          const cellKeyForIndex = this._indicesToKeys.get(ii);\n          const childListKeys =\n            cellKeyForIndex &&\n            this._cellKeysToChildListKeys.get(cellKeyForIndex);\n          if (!childListKeys) {\n            continue;\n          }\n          let someChildHasMore = false;\n          // For each cell, need to check whether any child list in it has more elements to render\n          for (let childKey of childListKeys) {\n            const childList = this._nestedChildLists.get(childKey);\n            if (childList && childList.ref && childList.ref.hasMore()) {\n              someChildHasMore = true;\n              break;\n            }\n          }\n          if (someChildHasMore) {\n            newState.last = ii;\n            break;\n          }\n        }\n      }\n      return newState;\n    });\n  };\n\n  _createViewToken = (index: number, isViewable: boolean) => {\n    const {data, getItem, keyExtractor} = this.props;\n    const item = getItem(data, index);\n    return {index, item, key: keyExtractor(item, index), isViewable};\n  };\n\n  _getFrameMetricsApprox = (\n    index: number,\n  ): {length: number, offset: number} => {\n    const frame = this._getFrameMetrics(index);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {getItemLayout} = this.props;\n      invariant(\n        !getItemLayout,\n        'Should not have to estimate frames when a measurement metrics function is provided',\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n      };\n    }\n  };\n\n  _getFrameMetrics = (\n    index: number,\n  ): ?{\n    length: number,\n    offset: number,\n    index: number,\n    inLayout?: boolean,\n  } => {\n    const {\n      data,\n      getItem,\n      getItemCount,\n      getItemLayout,\n      keyExtractor,\n    } = this.props;\n    invariant(\n      getItemCount(data) > index,\n      'Tried to get frame for out of range index ' + index,\n    );\n    const item = getItem(data, index);\n    let frame = item && this._frames[keyExtractor(item, index)];\n    if (!frame || frame.index !== index) {\n      if (getItemLayout) {\n        frame = getItemLayout(data, index);\n        if (__DEV__) {\n          const frameType = PropTypes.shape({\n            length: PropTypes.number.isRequired,\n            offset: PropTypes.number.isRequired,\n            index: PropTypes.number.isRequired,\n          }).isRequired;\n          PropTypes.checkPropTypes(\n            {frame: frameType},\n            {frame},\n            'frame',\n            'VirtualizedList.getItemLayout',\n          );\n        }\n      }\n    }\n    /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.63 was deployed. To see the error delete this\n     * comment and run Flow. */\n    return frame;\n  };\n\n  _updateViewableItems(data: any) {\n    const {getItemCount} = this.props;\n\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.onUpdate(\n        getItemCount(data),\n        this._scrollMetrics.offset,\n        this._scrollMetrics.visibleLength,\n        this._getFrameMetrics,\n        this._createViewToken,\n        tuple.onViewableItemsChanged,\n        this.state,\n      );\n    });\n  }\n}\n\nclass CellRenderer extends React.Component<\n  {\n    CellRendererComponent?: ?React.ComponentType<any>,\n    ItemSeparatorComponent: ?React.ComponentType<*>,\n    cellKey: string,\n    fillRateHelper: FillRateHelper,\n    horizontal: ?boolean,\n    index: number,\n    inversionStyle: ?DangerouslyImpreciseStyleProp,\n    item: Item,\n    onLayout: (event: Object) => void, // This is extracted by ScrollViewStickyHeader\n    onUnmount: (cellKey: string) => void,\n    onUpdateSeparators: (cellKeys: Array<?string>, props: Object) => void,\n    parentProps: {\n      getItemLayout?: ?Function,\n      renderItem: renderItemType,\n    },\n    prevCellKey: ?string,\n  },\n  $FlowFixMeState,\n> {\n  state = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  static childContextTypes = {\n    virtualizedCell: PropTypes.shape({\n      cellKey: PropTypes.string,\n    }),\n  };\n\n  getChildContext() {\n    return {\n      virtualizedCell: {\n        cellKey: this.props.cellKey,\n      },\n    };\n  }\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: true,\n      });\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: false,\n      });\n    },\n    updateProps: (select: 'leading' | 'trailing', newProps: Object) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators(\n        [select === 'leading' ? prevCellKey : cellKey],\n        newProps,\n      );\n    },\n  };\n\n  updateSeparatorProps(newProps: Object) {\n    this.setState(state => ({\n      separatorProps: {...state.separatorProps, ...newProps},\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  render() {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      fillRateHelper,\n      horizontal,\n      item,\n      index,\n      inversionStyle,\n      parentProps,\n    } = this.props;\n    const {renderItem, getItemLayout} = parentProps;\n    invariant(renderItem, 'no renderItem!');\n    const element = renderItem({\n      item,\n      index,\n      separators: this._separators,\n    });\n    const onLayout =\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.68 was deployed. To see the error delete this\n       * comment and run Flow. */\n      getItemLayout && !parentProps.debug && !fillRateHelper.enabled()\n        ? undefined\n        : this.props.onLayout;\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    const itemSeparator = ItemSeparatorComponent && (\n      <ItemSeparatorComponent {...this.state.separatorProps} />\n    );\n    const cellStyle = inversionStyle\n      ? horizontal\n        ? [{flexDirection: 'row-reverse'}, inversionStyle]\n        : [{flexDirection: 'column-reverse'}, inversionStyle]\n      : horizontal\n        ? [{flexDirection: 'row'}, inversionStyle]\n        : inversionStyle;\n    if (!CellRendererComponent) {\n      return (\n        <View style={cellStyle} onLayout={onLayout}>\n          {element}\n          {itemSeparator}\n        </View>\n      );\n    }\n    return (\n      <CellRendererComponent\n        {...this.props}\n        style={cellStyle}\n        onLayout={onLayout}>\n        {element}\n        {itemSeparator}\n      </CellRendererComponent>\n    );\n  }\n}\n\nclass VirtualizedCellWrapper extends React.Component<{\n  cellKey: string,\n  children: React.Node,\n}> {\n  static childContextTypes = {\n    virtualizedCell: PropTypes.shape({\n      cellKey: PropTypes.string,\n    }),\n  };\n\n  getChildContext() {\n    return {\n      virtualizedCell: {\n        cellKey: this.props.cellKey,\n      },\n    };\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  verticallyInverted: {\n    transform: [{scaleY: -1}],\n  },\n  horizontallyInverted: {\n    transform: [{scaleX: -1}],\n  },\n});\n\nmodule.exports = VirtualizedList;\n"],"names":["Batchinator","require","d","FillRateHelper","PropTypes","React","ReactNative","RefreshControl","ScrollView","StyleSheet","UIManager","View","ViewabilityHelper","infoLog","invariant","computeWindowedRenderLimits","_usedIndexForKey","_keylessItemComponentName","VirtualizedList","props","context","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_getScrollMetrics","_scrollMetrics","_getOutermostParentListRef","_isNestedWithSameOrientation","virtualizedList","getOutermostParentListRef","_assertThisInitialized","_getNestedChildState","key","existingChildData","_nestedChildLists","get","state","_registerAsNestedChild","childList","childListsInCell","_cellKeysToChildListKeys","cellKey","Set","add","set","ref","_hasInteracted","recordInteraction","_unregisterAsNestedChild","_onUpdateSeparators","keys","newProps","forEach","_cellRefs","updateSeparatorProps","_averageCellLength","Map","_frames","_footerLength","_hasDataChangedSinceEndReached","_hasMore","_hasWarned","_highestMeasuredFrameIndex","_headerLength","_indicesToKeys","_hasDoneInitialScroll","_offsetFromParentVirtualizedList","_prevParentOffset","contentLength","dOffset","dt","offset","timestamp","velocity","visibleLength","_scrollRef","_sentEndForContentLength","_totalCellLength","_totalCellsMeasured","_viewabilityTuples","_captureScrollRef","_defaultRenderScrollComponent","onRefresh","createElement","refreshing","JSON","stringify","_extends","refreshControl","progressViewOffset","_onCellUnmount","curr","_objectSpread","inLayout","_onLayout","e","measureLayoutRelativeToContainingList","_selectLength","nativeEvent","layout","onLayout","_scheduleCellsToRenderUpdate","_maybeCallOnEndReached","_onLayoutEmpty","_onLayoutFooter","_onLayoutHeader","_onContentSizeChange","width","height","initialScrollIndex","scrollToIndex","animated","index","onContentSizeChange","_convertParentScrollMetrics","metrics","_onScroll","onScroll","timeStamp","layoutMeasurement","contentSize","_selectOffset","contentOffset","_this$_convertParentS","Math","max","perf","prevDt","_updateViewableItems","data","_fillRateHelper","activate","_computeBlankness","_onScrollBeginDrag","tuple","viewabilityHelper","onScrollBeginDrag","_onScrollEndDrag","onScrollEndDrag","_onMomentumScrollEnd","onMomentumScrollEnd","_updateCellsToRender","_this$props3","getItemCount","onEndReachedThreshold","isVirtualizationDisabled","_isVirtualizationDisabled","setState","newState","_this$_scrollMetrics","renderAhead","maxToRenderPerBatch","first","last","min","_getFrameMetricsApprox","size","newFirst","newLast","ii","cellKeyForIndex","childListKeys","someChildHasMore","_iterator","_isArray","Array","isArray","_i","Symbol","iterator","_ref","length","next","done","value","childKey","hasMore","_createViewToken","isViewable","_this$props4","getItem","keyExtractor","item","frame","_getFrameMetrics","getItemLayout","_this$props5","__isNative","windowSize","_updateCellsToRenderBatcher","updateCellsBatchingPeriod","viewabilityConfigCallbackPairs","map","pair","viewabilityConfig","onViewableItemsChanged","push","initialState","initialNumToRender","storedState","getNestedChildState","listKey","_getCellKey","frames","params","veryLast","scrollTo","horizontal","x","y","_this$props","onScrollToIndexFailed","viewOffset","viewPosition","averageItemLength","highestMeasuredFrameIndex","_this$props2","itemCount","t","flashScrollIndicators","getScrollResponder","getScrollableNode","findNodeHandle","setNativeProps","getScrollMetrics","registerAsNestedChild","unregisterAsNestedChild","virtualizedCell","dispose","abort","deactivateAndFlush","cells","stickyHeaderIndices","stickyIndicesFromProps","inversionStyle","prevCellKey","_this2","_this$props6","CellRendererComponent","ItemSeparatorComponent","stickyOffset","ListHeaderComponent","end","_loop","has","CellRenderer","undefined","fillRateHelper","onUpdateSeparators","_onCellLayout","onUnmount","parentProps","disableVirtualization","nestedContext","_this3","_this$props7","ListEmptyComponent","ListFooterComponent","_this$props8","inverted","styles","horizontallyInverted","verticallyInverted","element","isValidElement","VirtualizedCellWrapper","style","compose","ListHeaderComponentStyle","spacerKey","lastInitialIndex","_this$state","_pushCells","firstAfterInitial","insertedStickySpacer","initBlock","stickyBlock","leadSpace","_defineProperty","trailSpace","firstSpace","console","warn","lastFrame","endFrame","tailSpacerLength","cloneElement","event","ListFooterComponentStyle","scrollProps","scrollEventThrottle","invertStickyHeaders","ret","renderScrollComponent","debug","flex","_renderDebugOverlay","prevProps","_this$props9","extraData","resetViewableIndices","computeBlankness","_iterator2","_isArray2","_i2","_ref7","_this4","measureLayout","error","scrollMetrics","normalize","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","baseStyle","position","top","right","bottom","borderColor","borderWidth","f","left","backgroundColor","_this$props10","onEndReached","_this$_scrollMetrics2","distanceFromEnd","_this$state2","_this$_scrollMetrics3","hiPri","scrollingThreshold","distTop","distBottom","schedule","_this5","onUpdate","prevState","PureComponent","defaultProps","type","displayName","String","contextTypes","shape","string","func","bool","childContextTypes","separatorProps","highlighted","leadingItem","_this6","_separators","highlight","_this6$props","unhighlight","_this6$props2","updateProps","select","_this6$props3","_this$props11","renderItem","separators","enabled","itemSeparator","cellStyle","flexDirection","Component","children","create","transform","scaleY","scaleX","module","exports"],"mappings":"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","file":"252.js"}