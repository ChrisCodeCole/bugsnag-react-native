{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.android.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeModules = require('NativeModules');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\nconst UIManager = require('UIManager');\n\nconst RCTAccessibilityInfo = NativeModules.AccessibilityInfo;\n\nconst TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';\n\ntype ChangeEventName = $Enum<{\n  change: string,\n}>;\n\nconst _subscriptions = new Map();\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See http://facebook.github.io/react-native/docs/accessibilityinfo.html\n */\n\nconst AccessibilityInfo = {\n  /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n   * when making Flow check .android.js files. */\n  fetch: function(): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAccessibilityInfo.isTouchExplorationEnabled(function(resp) {\n        resolve(resp);\n      });\n    });\n  },\n\n  addEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): void {\n    const listener = RCTDeviceEventEmitter.addListener(\n      TOUCH_EXPLORATION_EVENT,\n      enabled => {\n        handler(enabled);\n      },\n    );\n    _subscriptions.set(handler, listener);\n  },\n\n  removeEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   *\n   * See http://facebook.github.io/react-native/docs/accessibilityinfo.html#setaccessibilityfocus\n   */\n  setAccessibilityFocus: function(reactTag: number): void {\n    UIManager.sendAccessibilityEvent(\n      reactTag,\n      UIManager.AccessibilityEventTypes.typeViewFocused,\n    );\n  },\n};\n\nmodule.exports = AccessibilityInfo;\n"],"names":["NativeModules","require","d","RCTDeviceEventEmitter","UIManager","RCTAccessibilityInfo","AccessibilityInfo","_subscriptions","Map","fetch","Promise","resolve","reject","isTouchExplorationEnabled","resp","addEventListener","eventName","handler","listener","addListener","enabled","set","removeEventListener","get","remove","delete","setAccessibilityFocus","reactTag","sendAccessibilityEvent","AccessibilityEventTypes","typeViewFocused","module","exports"],"mappings":"4BAUA,aAEA,IAAMA,EAAgBC,EAAOC,EAAA,IACvBC,EAAwBF,EAAOC,EAAA,IAC/BE,EAAYH,EAAOC,EAAA,IAEnBG,EAAuBL,EAAcM,kBAQrCC,EAAiB,IAAIC,IAYrBF,GAGJG,MAAO,WACL,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BP,EAAqBQ,0BAA0B,SAASC,GACtDH,EAAQG,QAKdC,iBAAkB,SAChBC,EACAC,GAEA,IAAMC,EAAWf,EAAsBgB,YAjCX,4BAmC1B,SAAAC,GACEH,EAAQG,KAGZb,EAAec,IAAIJ,EAASC,IAG9BI,oBAAqB,SACnBN,EACAC,GAEA,IAAMC,EAAWX,EAAegB,IAAIN,GAC/BC,IAGLA,EAASM,SACTjB,EAAekB,OAAOR,KAQxBS,sBAAuB,SAASC,GAC9BvB,EAAUwB,uBACRD,EACAvB,EAAUyB,wBAAwBC,mBAKxCC,EAAOC,QAAU1B","file":"29.js"}