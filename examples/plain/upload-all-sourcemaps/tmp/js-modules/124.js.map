{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Network/RCTNetworking.android.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\n// Do not require the native RCTNetworking module directly! Use this wrapper module instead.\n// It will add the necessary requestId, so that you don't have to generate it yourself.\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTNetworkingNative = require('NativeModules').Networking;\nconst convertRequestBody = require('convertRequestBody');\n\nimport type {RequestBody} from 'convertRequestBody';\n\ntype Header = [string, string];\n\n// Convert FormData headers to arrays, which are easier to consume in\n// native on Android.\nfunction convertHeadersMapToArray(headers: Object): Array<Header> {\n  const headerArray = [];\n  for (const name in headers) {\n    headerArray.push([name, headers[name]]);\n  }\n  return headerArray;\n}\n\nlet _requestId = 1;\nfunction generateRequestId(): number {\n  return _requestId++;\n}\n\n/**\n * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique\n * requestId to each network request that can be used to abort that request later on.\n */\nclass RCTNetworking extends NativeEventEmitter {\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTNetworkingNative);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => any,\n    withCredentials: boolean,\n  ) {\n    const body = convertRequestBody(data);\n    if (body && body.formData) {\n      body.formData = body.formData.map(part => ({\n        ...part,\n        headers: convertHeadersMapToArray(part.headers),\n      }));\n    }\n    const requestId = generateRequestId();\n    RCTNetworkingNative.sendRequest(\n      method,\n      url,\n      requestId,\n      convertHeadersMapToArray(headers),\n      {...body, trackingName},\n      responseType,\n      incrementalUpdates,\n      timeout,\n      withCredentials,\n    );\n    callback(requestId);\n  }\n\n  abortRequest(requestId: number) {\n    RCTNetworkingNative.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    RCTNetworkingNative.clearCookies(callback);\n  }\n}\n\nif (__DEV__ && !RCTNetworkingNative) {\n  class MissingNativeRCTNetworkingShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTNetworking', 'Networking');\n    }\n\n    sendRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    abortRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    clearCookies(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTNetworkingNative` module. If you don't include it,\n  // `RCTNetworking.isAvailable` will return `false`, and any method calls will throw.\n  // We reassign the class variable to keep the autodoc generator happy.\n  RCTNetworking = new MissingNativeRCTNetworkingShim();\n} else {\n  RCTNetworking = new RCTNetworking();\n}\n\nmodule.exports = RCTNetworking;\n"],"names":["NativeEventEmitter","require","d","RCTNetworkingNative","Networking","convertRequestBody","convertHeadersMapToArray","headers","headerArray","name","push","_requestId","RCTNetworking","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","isAvailable","method","trackingName","url","data","responseType","incrementalUpdates","timeout","callback","withCredentials","body","formData","map","part","_objectSpread","requestId","sendRequest","abortRequest","clearCookies","module","exports"],"mappings":"4BAUA,6EAKMA,GADgCC,EAAOC,EAAA,IAClBD,EAAOC,EAAA,KAC5BC,EAAsBF,EAAOC,EAAA,IAAkBE,WAC/CC,EAAqBJ,EAAOC,EAAA,IAQlC,SAASI,EAAyBC,GAChC,IAAMC,KACN,IAAK,IAAMC,KAAQF,EACjBC,EAAYE,MAAMD,EAAMF,EAAQE,KAElC,OAAOD,EAGT,IAAIG,EAAa,MASXC,eAGJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,EAAAC,KAAAH,IACZC,EAAAG,EAAAD,KAAAE,EAAAL,GAAAM,KAAAH,KAAMZ,KAHRgB,aAAuB,EAETN,aAHYb,0CAQxBoB,EACAC,EACAC,EACAf,EACAgB,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAOxB,EAAmBkB,GAC5BM,GAAQA,EAAKC,WACfD,EAAKC,SAAWD,EAAKC,SAASC,IAAI,SAAAC,GAAI,OAAAC,KACjCD,GACHzB,QAASD,EAAyB0B,EAAKzB,cAG3C,IAAM2B,EAjCDvB,IAkCLR,EAAoBgC,YAClBf,EACAE,EACAY,EACA5B,EAAyBC,GAJ3B0B,KAKMJ,GAAMR,aAAAA,IACVG,EACAC,EACAC,EACAE,GAEFD,EAASO,wCAGEA,GACX/B,EAAoBiC,aAAaF,wCAGtBP,GACXxB,EAAoBkC,aAAaV,aA4BnCf,EAAgB,IAAIA,EAGtB0B,EAAOC,QAAU3B","file":"124.js"}