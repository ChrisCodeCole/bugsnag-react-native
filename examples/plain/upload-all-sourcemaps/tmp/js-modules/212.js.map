{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<any>,\n};\nexport type Task = Function | SimpleTask | PromiseTask;\n\nconst DEBUG = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('genPromise for task ' + task.name);\n          this._genPromise((task: any)); // Rather than annoying tagged union\n        } else if (task.run) {\n          DEBUG && infoLog('run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{tasks: Array<Task>, popable: boolean}>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('push new queue: ', {stackIdx});\n    DEBUG && infoLog('exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        this._queueStack[stackIdx].popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${\n          task.name\n        }: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\nmodule.exports = TaskQueue;\n"],"names":["invariant","require","d","TaskQueue","_ref","onMoreTasks","_classCallCheck","this","_onMoreTasks","_queueStack","tasks","popable","task","_getCurrentQueue","push","_this","forEach","enqueue","tasksToCancel","map","queue","_objectSpread","filter","indexOf","idx","length","shift","gen","_genPromise","run","JSON","stringify","e","message","name","stackIdx","pop","_this2","then","hasTasksToProcess","catch","ex","done","module","exports"],"mappings":"4BAUA,+CAGMA,GADUC,EAAOC,EAAA,IACLD,EAAOC,EAAA,KA8BnBC,cAQJ,SAAAA,EAAAC,GAAsD,IAAzCC,EAAyCD,EAAzCC,YAAyCC,EAAAC,KAAAJ,GACpDI,KAAKC,aAAeH,EACpBE,KAAKE,cAAgBC,SAAWC,SAAS,8CAQnCC,GACNL,KAAKM,mBAAmBC,KAAKF,wCAGlBF,GAA0B,IAAAK,EAAAR,KACrCG,EAAMM,QAAQ,SAAAJ,GAAI,OAAIG,EAAKE,QAAQL,yCAGzBM,GAEVX,KAAKE,YAAcF,KAAKE,YACrBU,IAAI,SAAAC,GAAK,OAAAC,KACLD,GACHV,MAAOU,EAAMV,MAAMY,OAAO,SAAAV,GAAI,OAAI,IAAAM,EAAcK,QAAQX,SAEzDU,OAAO,SAACF,EAAOI,GAAR,OAAgBJ,EAAMV,MAAMe,OAAS,GAAa,IAARD,gDAcpD,OAAOjB,KAAKM,mBAAmBY,OAAS,wCAOxC,IAAML,EAAQb,KAAKM,mBACnB,GAAIO,EAAMK,OAAQ,CAChB,IAAMb,EAAOQ,EAAMM,QACnB,IACMd,EAAKe,IAEPpB,KAAKqB,YAAahB,GACTA,EAAKiB,IAEdjB,EAAKiB,OAEL7B,EACkB,mBAATY,EACP,4DACEkB,KAAKC,UAAUnB,EAAM,KAAM,IAG/BA,KAEF,MAAOoB,GAGP,MAFAA,EAAEC,QACA,+BAAiCrB,EAAKsB,MAAQ,IAAM,KAAOF,EAAEC,QACzDD,+CASV,IAAMG,EAAW5B,KAAKE,YAAYgB,OAAS,EACrCL,EAAQb,KAAKE,YAAY0B,GAC/B,OACEf,EAAMT,SACiB,IAAvBS,EAAMV,MAAMe,QACZlB,KAAKE,YAAYgB,OAAS,GAE1BlB,KAAKE,YAAY2B,MAMV7B,KAAKM,oBAELO,EAAMV,0CAILE,GAAmB,IAAAyB,EAAA9B,KAK7BA,KAAKE,YAAYK,MAAMJ,SAAWC,SAAS,IAC3C,IAAMwB,EAAW5B,KAAKE,YAAYgB,OAAS,EAG3Cb,EACGe,MACAW,KAAK,WAMJD,EAAK5B,YAAY0B,GAAUxB,SAAU,EACrC0B,EAAKE,qBAAuBF,EAAK7B,iBAElCgC,MAAM,SAAAC,GAIL,MAHAA,EAAGR,QAAH,8CACErB,EAAKsB,KADP,KAEKO,EAAGR,QACFQ,IAEPC,iBAIPC,EAAOC,QAAUzC","file":"212.js"}