{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Interaction/Batchinator.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst InteractionManager = require('InteractionManager');\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback: () => void;\n  _delay: number;\n  _taskHandle: ?{cancel: () => void};\n  constructor(callback: () => void, delayMS: number) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose(options: {abort: boolean} = {abort: false}) {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  }\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n    const timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n"],"names":["InteractionManager","require","d","Batchinator","callback","delayMS","_classCallCheck","this","_delay","_callback","options","arguments","length","undefined","abort","_taskHandle","cancel","_this","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout","module","exports"],"mappings":"4BAUA,qCAEMA,EAAqBC,EAAOC,EAAA,IAwB5BC,cAIJ,SAAAA,EAAYC,EAAsBC,GAAiBC,EAAAC,KAAAJ,GACjDI,KAAKC,OAASH,EACdE,KAAKE,UAAYL,8CAQiC,IAA5CM,EAA4CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,IAAfG,OAAO,GACtCP,KAAKQ,cACPR,KAAKQ,YAAYC,SACZN,EAAQI,OACXP,KAAKE,YAEPF,KAAKQ,YAAc,yCAGZ,IAAAE,EAAAV,KACT,IAAIA,KAAKQ,YAAT,CAGA,IAAMG,EAAgBC,WAAW,WAC/BF,EAAKF,YAAcf,EAAmBoB,qBAAqB,WAGzDH,EAAKF,YAAc,KACnBE,EAAKR,eAENF,KAAKC,QACRD,KAAKQ,aAAeC,OAAQ,WAAA,OAAMK,aAAaH,gBAInDI,EAAOC,QAAUpB","file":"253.js"}