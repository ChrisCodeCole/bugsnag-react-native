{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an error\n   * found when Flow v0.63 was deployed. To see the error delete this comment\n   * and run Flow. */\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    invariant(\n      last < itemCount,\n      'Invalid render range ' + JSON.stringify({renderRange, itemCount}),\n    );\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0)\n    ) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"],"names":["invariant","require","d","ViewabilityHelper","config","arguments","length","undefined","viewAreaCoveragePercentThreshold","_classCallCheck","this","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","_this$_config","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","first","last","JSON","stringify","idx","metrics","top","offset","bottom","_isViewable","push","createViewToken","onViewableItemsChanged","_this","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","_this2","filter","includes","prevItems","nextItems","map","viewable","key","changed","_iterator","_isArray","Array","isArray","_i","Symbol","iterator","_ref4","next","done","value","_ref3","_slicedToArray","has","_iterator2","_isArray2","_i2","_ref7","_ref6","_objectSpread","isViewable","viewableItems","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","visibleHeight","Math","min","max","module","exports"],"mappings":"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","file":"255.js"}