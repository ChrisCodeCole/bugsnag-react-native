{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Vibration/Vibration.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nconst RCTVibration = require('NativeModules').Vibration;\nconst Platform = require('Platform');\n\n/**\n * Vibration API\n *\n * See https://facebook.github.io/react-native/docs/vibration.html\n */\n\nlet _vibrating: boolean = false;\nlet _id: number = 0; // _id is necessary to prevent race condition.\n\nfunction vibrateByPattern(pattern: Array<number>, repeat: boolean = false) {\n  if (_vibrating) {\n    return;\n  }\n  _vibrating = true;\n  if (pattern[0] === 0) {\n    RCTVibration.vibrate();\n    pattern = pattern.slice(1);\n  }\n  if (pattern.length === 0) {\n    _vibrating = false;\n    return;\n  }\n  setTimeout(() => vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);\n}\n\nfunction vibrateScheduler(\n  id,\n  pattern: Array<number>,\n  repeat: boolean,\n  nextIndex: number,\n) {\n  if (!_vibrating || id !== _id) {\n    return;\n  }\n  RCTVibration.vibrate();\n  if (nextIndex >= pattern.length) {\n    if (repeat) {\n      nextIndex = 0;\n    } else {\n      _vibrating = false;\n      return;\n    }\n  }\n  setTimeout(\n    () => vibrateScheduler(id, pattern, repeat, nextIndex + 1),\n    pattern[nextIndex],\n  );\n}\n\nconst Vibration = {\n  /**\n   * Trigger a vibration with specified `pattern`.\n   *\n   * See https://facebook.github.io/react-native/docs/vibration.html#vibrate\n   */\n  vibrate: function(\n    pattern: number | Array<number> = 400,\n    repeat: boolean = false,\n  ) {\n    if (Platform.OS === 'android') {\n      if (typeof pattern === 'number') {\n        RCTVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    } else {\n      if (_vibrating) {\n        return;\n      }\n      if (typeof pattern === 'number') {\n        RCTVibration.vibrate();\n      } else if (Array.isArray(pattern)) {\n        vibrateByPattern(pattern, repeat);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    }\n  },\n  /**\n   * Stop vibration\n   *\n   * See https://facebook.github.io/react-native/docs/vibration.html#cancel\n   */\n  cancel: function() {\n    if (Platform.OS === 'ios') {\n      _vibrating = false;\n    } else {\n      RCTVibration.cancel();\n    }\n  },\n};\n\nmodule.exports = Vibration;\n"],"names":["RCTVibration","require","d","Vibration","vibrate","pattern","arguments","length","undefined","repeat","Array","isArray","Error","vibrateByPattern","cancel","module","exports"],"mappings":"4BAWA,aAEA,IAAMA,EAAeC,EAAOC,EAAA,IAAkBC,UAC7BF,EAAOC,EAAA,IAmDxB,IAAMC,GAMJC,QAAS,WAGP,IAFAC,EAEAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFkC,IAClCG,EACAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEE,GAAuB,iBAAZD,EACTL,EAAaI,QAAQC,OAChB,CAAA,IAAIK,MAAMC,QAAQN,GAGvB,MAAM,IAAIO,MAAM,iDAFhBZ,EAAaa,iBAAiBR,EAASI,EAAS,GAAH,KAsBnDK,OAAQ,WAIJd,EAAac,WAKnBC,EAAOC,QAAUb","file":"335.js"}