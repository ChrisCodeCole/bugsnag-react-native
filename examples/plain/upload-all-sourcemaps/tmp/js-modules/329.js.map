{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Network/NetInfo.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Map = require('Map');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\nconst RCTNetInfo = NativeModules.NetInfo;\n\nconst NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);\n\nconst DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';\n\ntype ChangeEventName = $Enum<{\n  connectionChange: string,\n  change: string,\n}>;\n\ntype ReachabilityStateIOS = $Enum<{\n  cell: string,\n  none: string,\n  unknown: string,\n  wifi: string,\n}>;\n\ntype ConnectivityStateAndroid = $Enum<{\n  NONE: string,\n  MOBILE: string,\n  WIFI: string,\n  MOBILE_MMS: string,\n  MOBILE_SUPL: string,\n  MOBILE_DUN: string,\n  MOBILE_HIPRI: string,\n  WIMAX: string,\n  BLUETOOTH: string,\n  DUMMY: string,\n  ETHERNET: string,\n  MOBILE_FOTA: string,\n  MOBILE_IMS: string,\n  MOBILE_CBS: string,\n  WIFI_P2P: string,\n  MOBILE_IA: string,\n  MOBILE_EMERGENCY: string,\n  PROXY: string,\n  VPN: string,\n  UNKNOWN: string,\n}>;\n\nconst _subscriptions = new Map();\n\nlet _isConnectedDeprecated;\nif (Platform.OS === 'ios') {\n  _isConnectedDeprecated = function(\n    reachability: ReachabilityStateIOS,\n  ): boolean {\n    return reachability !== 'none' && reachability !== 'unknown';\n  };\n} else if (Platform.OS === 'android') {\n  _isConnectedDeprecated = function(\n    connectionType: ConnectivityStateAndroid,\n  ): boolean {\n    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';\n  };\n}\n\nfunction _isConnected(connection) {\n  return connection.type !== 'none' && connection.type !== 'unknown';\n}\n\nconst _isConnectedSubscriptions = new Map();\n\n/**\n * NetInfo exposes info about online/offline status.\n *\n * See https://facebook.github.io/react-native/docs/netinfo.html\n */\nconst NetInfo = {\n  /**\n   * Adds an event handler.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#addeventlistener\n   */\n  addEventListener(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): {remove: () => void} {\n    let listener;\n    if (eventName === 'connectionChange') {\n      listener = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        appStateData => {\n          handler({\n            type: appStateData.connectionType,\n            effectiveType: appStateData.effectiveConnectionType,\n          });\n        },\n      );\n    } else if (eventName === 'change') {\n      console.warn(\n        'NetInfo\\'s \"change\" event is deprecated. Listen to the \"connectionChange\" event instead.',\n      );\n\n      listener = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        appStateData => {\n          handler(appStateData.network_info);\n        },\n      );\n    } else {\n      console.warn('Trying to subscribe to unknown event: \"' + eventName + '\"');\n      return {\n        remove: () => {},\n      };\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: () => NetInfo.removeEventListener(eventName, handler),\n    };\n  },\n\n  /**\n   * Removes the listener for network status changes.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#removeeventlistener\n   */\n  removeEventListener(eventName: ChangeEventName, handler: Function): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n  /**\n   * This function is deprecated. Use `getConnectionInfo` instead.\n   * Returns a promise that resolves with one of the deprecated connectivity\n   * types:\n   *\n   * The following connectivity types are deprecated. They're used by the\n   * deprecated APIs `fetch` and the `change` event.\n   *\n   * iOS connectivity types (deprecated):\n   * - `none` - device is offline\n   * - `wifi` - device is online and connected via wifi, or is the iOS simulator\n   * - `cell` - device is connected via Edge, 3G, WiMax, or LTE\n   * - `unknown` - error case and the network status is unknown\n   *\n   * Android connectivity types (deprecated).\n   * - `NONE` - device is offline\n   * - `BLUETOOTH` - The Bluetooth data connection.\n   * - `DUMMY` -  Dummy data connection.\n   * - `ETHERNET` - The Ethernet data connection.\n   * - `MOBILE` - The Mobile data connection.\n   * - `MOBILE_DUN` - A DUN-specific Mobile data connection.\n   * - `MOBILE_HIPRI` - A High Priority Mobile data connection.\n   * - `MOBILE_MMS` - An MMS-specific Mobile data connection.\n   * - `MOBILE_SUPL` -  A SUPL-specific Mobile data connection.\n   * - `VPN` -  A virtual network using one or more native bearers. Requires\n   * API Level 21\n   * - `WIFI` - The WIFI data connection.\n   * - `WIMAX` -  The WiMAX data connection.\n   * - `UNKNOWN` - Unknown data connection.\n   *\n   * The rest of the connectivity types are hidden by the Android API, but can\n   * be used if necessary.\n   */\n  fetch(): Promise<any> {\n    console.warn(\n      'NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.',\n    );\n    return RCTNetInfo.getCurrentConnectivity().then(resp => resp.network_info);\n  },\n\n  /**\n   * See https://facebook.github.io/react-native/docs/netinfo.html#getconnectioninfo\n   */\n  getConnectionInfo(): Promise<any> {\n    return RCTNetInfo.getCurrentConnectivity().then(resp => {\n      return {\n        type: resp.connectionType,\n        effectiveType: resp.effectiveConnectionType,\n      };\n    });\n  },\n\n  /**\n   * An object with the same methods as above but the listener receives a\n   * boolean which represents the internet connectivity.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#isconnected\n   */\n  isConnected: {\n    addEventListener(\n      eventName: ChangeEventName,\n      handler: Function,\n    ): {remove: () => void} {\n      const listener = connection => {\n        if (eventName === 'change') {\n          handler(_isConnectedDeprecated(connection));\n        } else if (eventName === 'connectionChange') {\n          handler(_isConnected(connection));\n        }\n      };\n      _isConnectedSubscriptions.set(handler, listener);\n      NetInfo.addEventListener(eventName, listener);\n      return {\n        remove: () =>\n          NetInfo.isConnected.removeEventListener(eventName, handler),\n      };\n    },\n\n    removeEventListener(eventName: ChangeEventName, handler: Function): void {\n      const listener = _isConnectedSubscriptions.get(handler);\n      NetInfo.removeEventListener(\n        eventName,\n        /* $FlowFixMe(>=0.36.0 site=react_native_fb,react_native_oss) Flow error\n         * detected during the deploy of Flow v0.36.0. To see the error, remove\n         * this comment and run Flow */\n        listener,\n      );\n      _isConnectedSubscriptions.delete(handler);\n    },\n\n    fetch(): Promise<any> {\n      return NetInfo.getConnectionInfo().then(_isConnected);\n    },\n  },\n\n  isConnectionExpensive(): Promise<boolean> {\n    return Platform.OS === 'android'\n      ? RCTNetInfo.isConnectionMetered()\n      : Promise.reject(new Error('Currently not supported on iOS'));\n  },\n};\n\nmodule.exports = NetInfo;\n"],"names":["_isConnectedDeprecated","Map","require","d","NativeEventEmitter","NativeModules","RCTNetInfo","NetInfo","NetInfoEventEmitter","_subscriptions","_isConnected","connection","type","connectionType","_isConnectedSubscriptions","addEventListener","eventName","handler","listener","addListener","appStateData","effectiveType","effectiveConnectionType","console","warn","remove","network_info","set","removeEventListener","get","delete","fetch","getCurrentConnectivity","then","resp","getConnectionInfo","isConnected","isConnectionExpensive","isConnectionMetered","module","exports"],"mappings":"4BAUA,aAEA,IA+CIA,EA/CEC,EAAMC,EAAOC,EAAA,IACbC,EAAqBF,EAAOC,EAAA,IAC5BE,EAAgBH,EAAOC,EAAA,IAEvBG,GADWJ,EAAOC,EAAA,IACLE,EAAcE,SAE3BC,EAAsB,IAAIJ,EAAmBE,GAuC7CG,EAAiB,IAAIR,EAiB3B,SAASS,EAAaC,GACpB,MAA2B,SAApBA,EAAWC,MAAuC,YAApBD,EAAWC,KARhDZ,EAAyB,SACvBa,GAEA,MAA0B,SAAnBA,GAAgD,YAAnBA,GAQxC,IAAMC,EAA4B,IAAIb,EAOhCM,GAMJQ,iBANc,SAOZC,EACAC,GAEA,IAAIC,EACJ,GAAkB,qBAAdF,EACFE,EAAWV,EAAoBW,YA7EH,yBA+E1B,SAAAC,GACEH,GACEL,KAAMQ,EAAaP,eACnBQ,cAAeD,EAAaE,gCAI7B,CAAA,GAAkB,WAAdN,EAaT,OADAO,QAAQC,KAAK,0CAA4CR,EAAY,MAEnES,OAAQ,cAbVF,QAAQC,KACN,4FAGFN,EAAWV,EAAoBW,YA3FH,yBA6F1B,SAAAC,GACEH,EAAQG,EAAaM,gBAW3B,OADAjB,EAAekB,IAAIV,EAASC,IAE1BO,OAAQ,WAAA,OAAMlB,EAAQqB,oBAAoBZ,EAAWC,MASzDW,oBAlDc,SAkDMZ,EAA4BC,GAC9C,IAAMC,EAAWT,EAAeoB,IAAIZ,GAC/BC,IAGLA,EAASO,SACThB,EAAeqB,OAAOb,KAoCxBc,MA5Fc,WAgGZ,OAHAR,QAAQC,KACN,2EAEKlB,EAAW0B,yBAAyBC,KAAK,SAAAC,GAAI,OAAIA,EAAKR,gBAM/DS,kBAtGc,WAuGZ,OAAO7B,EAAW0B,yBAAyBC,KAAK,SAAAC,GAC9C,OACEtB,KAAMsB,EAAKrB,eACXQ,cAAea,EAAKZ,4BAW1Bc,aACErB,iBADW,SAETC,EACAC,GAEA,IAAMC,EAAW,SAAAP,GACG,WAAdK,EACFC,EAAQjB,EAAuBW,IACR,qBAAdK,GACTC,EAAQP,EAAaC,KAKzB,OAFAG,EAA0Ba,IAAIV,EAASC,GACvCX,EAAQQ,iBAAiBC,EAAWE,IAElCO,OAAQ,WAAA,OACNlB,EAAQ6B,YAAYR,oBAAoBZ,EAAWC,MAIzDW,oBApBW,SAoBSZ,EAA4BC,GAC9C,IAAMC,EAAWJ,EAA0Be,IAAIZ,GAC/CV,EAAQqB,oBACNZ,EAIAE,GAEFJ,EAA0BgB,OAAOb,IAGnCc,MAhCW,WAiCT,OAAOxB,EAAQ4B,oBAAoBF,KAAKvB,KAI5C2B,sBA1Jc,WA2JZ,OACI/B,EAAWgC,wBAKnBC,EAAOC,QAAUjC","file":"329.js"}