{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Network/XMLHttpRequest.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventTarget = require('event-target-shim');\nconst RCTNetworking = require('RCTNetworking');\n\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst base64 = require('base64-js');\nconst invariant = require('fbjs/lib/invariant');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\nconst BlobManager = require('BlobManager');\n\nexport type NativeResponseType = 'base64' | 'blob' | 'text';\nexport type ResponseType =\n  | ''\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'text';\nexport type Response = ?Object | string;\n\ntype XHRInterceptor = {\n  requestSent(id: number, url: string, method: string, headers: Object): void,\n  responseReceived(\n    id: number,\n    url: string,\n    status: number,\n    headers: Object,\n  ): void,\n  dataReceived(id: number, data: string): void,\n  loadingFinished(id: number, encodedDataLength: number): void,\n  loadingFailed(id: number, error: string): void,\n};\n\n// The native blob module is optional so inject it here if available.\nif (BlobManager.isAvailable) {\n  BlobManager.addNetworkingHandler();\n}\n\nconst UNSENT = 0;\nconst OPENED = 1;\nconst HEADERS_RECEIVED = 2;\nconst LOADING = 3;\nconst DONE = 4;\n\nconst SUPPORTED_RESPONSE_TYPES = {\n  arraybuffer: typeof global.ArrayBuffer === 'function',\n  blob: typeof global.Blob === 'function',\n  document: false,\n  json: true,\n  text: true,\n  '': true,\n};\n\nconst REQUEST_EVENTS = [\n  'abort',\n  'error',\n  'load',\n  'loadstart',\n  'progress',\n  'timeout',\n  'loadend',\n];\n\nconst XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\n\nclass XMLHttpRequestEventTarget extends EventTarget(...REQUEST_EVENTS) {\n  onload: ?Function;\n  onloadstart: ?Function;\n  onprogress: ?Function;\n  ontimeout: ?Function;\n  onerror: ?Function;\n  onabort: ?Function;\n  onloadend: ?Function;\n}\n\n/**\n * Shared base for platform-specific XMLHttpRequest implementations.\n */\nclass XMLHttpRequest extends EventTarget(...XHR_EVENTS) {\n  static UNSENT: number = UNSENT;\n  static OPENED: number = OPENED;\n  static HEADERS_RECEIVED: number = HEADERS_RECEIVED;\n  static LOADING: number = LOADING;\n  static DONE: number = DONE;\n\n  static _interceptor: ?XHRInterceptor = null;\n\n  UNSENT: number = UNSENT;\n  OPENED: number = OPENED;\n  HEADERS_RECEIVED: number = HEADERS_RECEIVED;\n  LOADING: number = LOADING;\n  DONE: number = DONE;\n\n  // EventTarget automatically initializes these to `null`.\n  onload: ?Function;\n  onloadstart: ?Function;\n  onprogress: ?Function;\n  ontimeout: ?Function;\n  onerror: ?Function;\n  onabort: ?Function;\n  onloadend: ?Function;\n  onreadystatechange: ?Function;\n\n  readyState: number = UNSENT;\n  responseHeaders: ?Object;\n  status: number = 0;\n  timeout: number = 0;\n  responseURL: ?string;\n  withCredentials: boolean = true;\n\n  upload: XMLHttpRequestEventTarget = new XMLHttpRequestEventTarget();\n\n  _requestId: ?number;\n  _subscriptions: Array<*>;\n\n  _aborted: boolean = false;\n  _cachedResponse: Response;\n  _hasError: boolean = false;\n  _headers: Object;\n  _lowerCaseResponseHeaders: Object;\n  _method: ?string = null;\n  _response: string | ?Object;\n  _responseType: ResponseType;\n  _response: string = '';\n  _sent: boolean;\n  _url: ?string = null;\n  _timedOut: boolean = false;\n  _trackingName: string = 'unknown';\n  _incrementalEvents: boolean = false;\n\n  static setInterceptor(interceptor: ?XHRInterceptor) {\n    XMLHttpRequest._interceptor = interceptor;\n  }\n\n  constructor() {\n    super();\n    this._reset();\n  }\n\n  _reset(): void {\n    this.readyState = this.UNSENT;\n    this.responseHeaders = undefined;\n    this.status = 0;\n    delete this.responseURL;\n\n    this._requestId = null;\n\n    this._cachedResponse = undefined;\n    this._hasError = false;\n    this._headers = {};\n    this._response = '';\n    this._responseType = '';\n    this._sent = false;\n    this._lowerCaseResponseHeaders = {};\n\n    this._clearSubscriptions();\n    this._timedOut = false;\n  }\n\n  get responseType(): ResponseType {\n    return this._responseType;\n  }\n\n  set responseType(responseType: ResponseType): void {\n    if (this._sent) {\n      throw new Error(\n        \"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" +\n          'response type cannot be set after the request has been sent.',\n      );\n    }\n    if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\n      warning(\n        false,\n        `The provided value '${responseType}' is not a valid 'responseType'.`,\n      );\n      return;\n    }\n\n    // redboxes early, e.g. for 'arraybuffer' on ios 7\n    invariant(\n      SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document',\n      `The provided value '${responseType}' is unsupported in this environment.`,\n    );\n\n    if (responseType === 'blob') {\n      invariant(\n        BlobManager.isAvailable,\n        'Native module BlobModule is required for blob support',\n      );\n    }\n    this._responseType = responseType;\n  }\n\n  get responseText(): string {\n    if (this._responseType !== '' && this._responseType !== 'text') {\n      throw new Error(\n        \"The 'responseText' property is only available if 'responseType' \" +\n          `is set to '' or 'text', but it is '${this._responseType}'.`,\n      );\n    }\n    if (this.readyState < LOADING) {\n      return '';\n    }\n    return this._response;\n  }\n\n  get response(): Response {\n    const {responseType} = this;\n    if (responseType === '' || responseType === 'text') {\n      return this.readyState < LOADING || this._hasError ? '' : this._response;\n    }\n\n    if (this.readyState !== DONE) {\n      return null;\n    }\n\n    if (this._cachedResponse !== undefined) {\n      return this._cachedResponse;\n    }\n\n    switch (responseType) {\n      case 'document':\n        this._cachedResponse = null;\n        break;\n\n      case 'arraybuffer':\n        this._cachedResponse = base64.toByteArray(this._response).buffer;\n        break;\n\n      case 'blob':\n        if (typeof this._response === 'object' && this._response) {\n          this._cachedResponse = BlobManager.createFromOptions(this._response);\n        } else if (this._response === '') {\n          this._cachedResponse = null;\n        } else { \n          throw new Error(`Invalid response for blob: ${this._response}`);\n        }\n        break;\n\n      case 'json':\n        try {\n          this._cachedResponse = JSON.parse(this._response);\n        } catch (_) {\n          this._cachedResponse = null;\n        }\n        break;\n\n      default:\n        this._cachedResponse = null;\n    }\n\n    return this._cachedResponse;\n  }\n\n  // exposed for testing\n  __didCreateRequest(requestId: number): void {\n    this._requestId = requestId;\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.requestSent(\n        requestId,\n        this._url || '',\n        this._method || 'GET',\n        this._headers,\n      );\n  }\n\n  // exposed for testing\n  __didUploadProgress(\n    requestId: number,\n    progress: number,\n    total: number,\n  ): void {\n    if (requestId === this._requestId) {\n      this.upload.dispatchEvent({\n        type: 'progress',\n        lengthComputable: true,\n        loaded: progress,\n        total,\n      });\n    }\n  }\n\n  __didReceiveResponse(\n    requestId: number,\n    status: number,\n    responseHeaders: ?Object,\n    responseURL: ?string,\n  ): void {\n    if (requestId === this._requestId) {\n      this.status = status;\n      this.setResponseHeaders(responseHeaders);\n      this.setReadyState(this.HEADERS_RECEIVED);\n      if (responseURL || responseURL === '') {\n        this.responseURL = responseURL;\n      } else {\n        delete this.responseURL;\n      }\n\n      XMLHttpRequest._interceptor &&\n        XMLHttpRequest._interceptor.responseReceived(\n          requestId,\n          responseURL || this._url || '',\n          status,\n          responseHeaders || {},\n        );\n    }\n  }\n\n  __didReceiveData(requestId: number, response: string): void {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    this._response = response;\n    this._cachedResponse = undefined; // force lazy recomputation\n    this.setReadyState(this.LOADING);\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.dataReceived(requestId, response);\n  }\n\n  __didReceiveIncrementalData(\n    requestId: number,\n    responseText: string,\n    progress: number,\n    total: number,\n  ) {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    if (!this._response) {\n      this._response = responseText;\n    } else {\n      this._response += responseText;\n    }\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\n\n    this.setReadyState(this.LOADING);\n    this.__didReceiveDataProgress(requestId, progress, total);\n  }\n\n  __didReceiveDataProgress(\n    requestId: number,\n    loaded: number,\n    total: number,\n  ): void {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    this.dispatchEvent({\n      type: 'progress',\n      lengthComputable: total >= 0,\n      loaded,\n      total,\n    });\n  }\n\n  // exposed for testing\n  __didCompleteResponse(\n    requestId: number,\n    error: string,\n    timeOutError: boolean,\n  ): void {\n    if (requestId === this._requestId) {\n      if (error) {\n        if (this._responseType === '' || this._responseType === 'text') {\n          this._response = error;\n        }\n        this._hasError = true;\n        if (timeOutError) {\n          this._timedOut = true;\n        }\n      }\n      this._clearSubscriptions();\n      this._requestId = null;\n      this.setReadyState(this.DONE);\n\n      if (error) {\n        XMLHttpRequest._interceptor &&\n          XMLHttpRequest._interceptor.loadingFailed(requestId, error);\n      } else {\n        XMLHttpRequest._interceptor &&\n          XMLHttpRequest._interceptor.loadingFinished(\n            requestId,\n            this._response.length,\n          );\n      }\n    }\n  }\n\n  _clearSubscriptions(): void {\n    (this._subscriptions || []).forEach(sub => {\n      if (sub) {\n        sub.remove();\n      }\n    });\n    this._subscriptions = [];\n  }\n\n  getAllResponseHeaders(): ?string {\n    if (!this.responseHeaders) {\n      // according to the spec, return null if no response has been received\n      return null;\n    }\n    const headers = this.responseHeaders || {};\n    return Object.keys(headers)\n      .map(headerName => {\n        return headerName + ': ' + headers[headerName];\n      })\n      .join('\\r\\n');\n  }\n\n  getResponseHeader(header: string): ?string {\n    const value = this._lowerCaseResponseHeaders[header.toLowerCase()];\n    return value !== undefined ? value : null;\n  }\n\n  setRequestHeader(header: string, value: any): void {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('Request has not been opened');\n    }\n    this._headers[header.toLowerCase()] = String(value);\n  }\n\n  /**\n   * Custom extension for tracking origins of request.\n   */\n  setTrackingName(trackingName: string): XMLHttpRequest {\n    this._trackingName = trackingName;\n    return this;\n  }\n\n  open(method: string, url: string, async: ?boolean): void {\n    /* Other optional arguments are not supported yet */\n    if (this.readyState !== this.UNSENT) {\n      throw new Error('Cannot open, already sending');\n    }\n    if (async !== undefined && !async) {\n      // async is default\n      throw new Error('Synchronous http requests are not supported');\n    }\n    if (!url) {\n      throw new Error('Cannot load an empty url');\n    }\n    this._method = method.toUpperCase();\n    this._url = url;\n    this._aborted = false;\n    this.setReadyState(this.OPENED);\n  }\n\n  send(data: any): void {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('Request has not been opened');\n    }\n    if (this._sent) {\n      throw new Error('Request has already been sent');\n    }\n    this._sent = true;\n    const incrementalEvents =\n      this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\n\n    this._subscriptions.push(\n      RCTNetworking.addListener('didSendNetworkData', args =>\n        this.__didUploadProgress(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkResponse', args =>\n        this.__didReceiveResponse(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkData', args =>\n        this.__didReceiveData(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkIncrementalData', args =>\n        this.__didReceiveIncrementalData(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkDataProgress', args =>\n        this.__didReceiveDataProgress(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didCompleteNetworkResponse', args =>\n        this.__didCompleteResponse(...args),\n      ),\n    );\n\n    let nativeResponseType: NativeResponseType = 'text';\n    if (this._responseType === 'arraybuffer') {\n      nativeResponseType = 'base64';\n    }\n    if (this._responseType === 'blob') {\n      nativeResponseType = 'blob';\n    }\n\n    invariant(this._method, 'Request method needs to be defined.');\n    invariant(this._url, 'Request URL needs to be defined.');\n    RCTNetworking.sendRequest(\n      this._method,\n      this._trackingName,\n      this._url,\n      this._headers,\n      data,\n      /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n       * when making Flow check .android.js files. */\n      nativeResponseType,\n      incrementalEvents,\n      this.timeout,\n      this.__didCreateRequest.bind(this),\n      this.withCredentials,\n    );\n  }\n\n  abort(): void {\n    this._aborted = true;\n    if (this._requestId) {\n      RCTNetworking.abortRequest(this._requestId);\n    }\n    // only call onreadystatechange if there is something to abort,\n    // below logic is per spec\n    if (\n      !(\n        this.readyState === this.UNSENT ||\n        (this.readyState === this.OPENED && !this._sent) ||\n        this.readyState === this.DONE\n      )\n    ) {\n      this._reset();\n      this.setReadyState(this.DONE);\n    }\n    // Reset again after, in case modified in handler\n    this._reset();\n  }\n\n  setResponseHeaders(responseHeaders: ?Object): void {\n    this.responseHeaders = responseHeaders || null;\n    const headers = responseHeaders || {};\n    this._lowerCaseResponseHeaders = Object.keys(headers).reduce(\n      (lcaseHeaders, headerName) => {\n        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\n        return lcaseHeaders;\n      },\n      {},\n    );\n  }\n\n  setReadyState(newState: number): void {\n    this.readyState = newState;\n    this.dispatchEvent({type: 'readystatechange'});\n    if (newState === this.DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({type: 'abort'});\n      } else if (this._hasError) {\n        if (this._timedOut) {\n          this.dispatchEvent({type: 'timeout'});\n        } else {\n          this.dispatchEvent({type: 'error'});\n        }\n      } else {\n        this.dispatchEvent({type: 'load'});\n      }\n      this.dispatchEvent({type: 'loadend'});\n    }\n  }\n\n  /* global EventListener */\n  addEventListener(type: string, listener: EventListener): void {\n    // If we dont' have a 'readystatechange' event handler, we don't\n    // have to send repeated LOADING events with incremental updates\n    // to responseText, which will avoid a bunch of native -> JS\n    // bridge traffic.\n    if (type === 'readystatechange' || type === 'progress') {\n      this._incrementalEvents = true;\n    }\n    super.addEventListener(type, listener);\n  }\n}\n\nmodule.exports = XMLHttpRequest;\n"],"names":["EventTarget","require","d","RCTNetworking","base64","invariant","warning","BlobManager","isAvailable","addNetworkingHandler","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SUPPORTED_RESPONSE_TYPES","arraybuffer","global","ArrayBuffer","blob","Blob","document","json","text","","REQUEST_EVENTS","XHR_EVENTS","concat","XMLHttpRequestEventTarget","apply","undefined","XMLHttpRequest","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","readyState","status","timeout","withCredentials","upload","_aborted","_hasError","_method","_response","_url","_timedOut","_trackingName","_incrementalEvents","_reset","interceptor","_interceptor","responseHeaders","responseURL","_requestId","_cachedResponse","_headers","_responseType","_sent","_lowerCaseResponseHeaders","_clearSubscriptions","requestId","requestSent","progress","total","dispatchEvent","type","lengthComputable","loaded","setResponseHeaders","setReadyState","responseReceived","response","dataReceived","responseText","__didReceiveDataProgress","error","timeOutError","loadingFailed","loadingFinished","length","_subscriptions","forEach","sub","remove","headers","Object","keys","map","headerName","join","header","value","toLowerCase","Error","String","trackingName","method","url","async","toUpperCase","data","_this2","incrementalEvents","onreadystatechange","onprogress","push","addListener","args","__didUploadProgress","_toConsumableArray","__didReceiveResponse","__didReceiveData","__didReceiveIncrementalData","__didCompleteResponse","nativeResponseType","sendRequest","__didCreateRequest","bind","abortRequest","reduce","lcaseHeaders","newState","listener","_get","prototype","responseType","hasOwnProperty","toByteArray","buffer","createFromOptions","JSON","parse","_","module","exports"],"mappings":"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","file":"120.js"}