{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst Platform = require('Platform');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nconst dimensions = {};\nclass Dimensions {\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: {[key: string]: any}): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    if (dims && dims.windowPhysicalPixels) {\n      // parse/stringify => Clone hack\n      dims = JSON.parse(JSON.stringify(dims));\n\n      const windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n      if (Platform.OS === 'android') {\n        // Screen and window dimensions are different on android\n        const screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale,\n        };\n\n        // delete so no callers rely on this existing\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n      // delete so no callers rely on this existing\n      delete dims.windowPhysicalPixels;\n    }\n\n    Object.assign(dimensions, dims);\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen,\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet dims: ?{[key: string]: any} =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nlet nativeExtensionsEnabled = true;\nif (!dims) {\n  const DeviceInfo = require('DeviceInfo');\n  dims = DeviceInfo.Dimensions;\n  nativeExtensionsEnabled = false;\n}\n\ninvariant(\n  dims,\n  'Either DeviceInfo native extension or DeviceInfo Native Module must be registered',\n);\nDimensions.set(dims);\nif (!nativeExtensionsEnabled) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function(update) {\n    Dimensions.set(update);\n  });\n}\n\nmodule.exports = Dimensions;\n"],"names":["EventEmitter","require","d","RCTDeviceEventEmitter","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dims","windowPhysicalPixels","JSON","parse","stringify","window","width","scale","height","fontScale","screenPhysicalPixels","screen","_extends","emit","dim","type","handler","addListener","removeListener","global","nativeExtensions","DeviceInfo","nativeExtensionsEnabled","set","update","module","exports"],"mappings":"4BAUA,+CAEMA,EAAeC,EAAOC,EAAA,IAEtBC,GADWF,EAAOC,EAAA,IACMD,EAAOC,EAAA,KAE/BE,EAAYH,EAAOC,EAAA,IAEnBG,EAAe,IAAIL,EACrBM,GAAwB,EACtBC,KACAC,gFAOOC,GAIT,GAAIA,GAAQA,EAAKC,qBAAsB,CAIrC,IAAMA,GAFND,EAAOE,KAAKC,MAAMD,KAAKE,UAAUJ,KAECC,qBAClCD,EAAKK,QACHC,MAAOL,EAAqBK,MAAQL,EAAqBM,MACzDC,OAAQP,EAAqBO,OAASP,EAAqBM,MAC3DA,MAAON,EAAqBM,MAC5BE,UAAWR,EAAqBQ,WAIhC,IAAMC,EAAuBV,EAAKU,qBAClCV,EAAKW,QACHL,MAAOI,EAAqBJ,MAAQI,EAAqBH,MACzDC,OAAQE,EAAqBF,OAASE,EAAqBH,MAC3DA,MAAOG,EAAqBH,MAC5BE,UAAWC,EAAqBD,kBAI3BT,EAAKU,4BAKPV,EAAKC,qBAGdW,EAAcd,EAAYE,GACtBH,EAEFD,EAAaiB,KAAK,UAChBR,OAAQP,EAAWO,OACnBM,OAAQb,EAAWa,SAGrBd,GAAwB,8BAmBjBiB,GAET,OADAnB,EAAUG,EAAWgB,GAAM,4BAA8BA,GAClDhB,EAAWgB,4CAWIC,EAAcC,GACpCrB,EACW,WAAToB,EACA,6CACAA,GAEFnB,EAAaqB,YAAYF,EAAMC,+CAMND,EAAcC,GACvCrB,EACW,WAAToB,EACA,oDACAA,GAEFnB,EAAasB,eAAeH,EAAMC,aAIlChB,EACFmB,EAAOC,kBACPD,EAAOC,iBAAiBC,YACxBF,EAAOC,iBAAiBC,WAAWtB,WACjCuB,GAA0B,EACzBtB,IAEHA,EADmBR,EAAOC,EAAA,IACRM,WAClBuB,GAA0B,GAG5B3B,EACEK,EACA,qFAEFD,EAAWwB,IAAIvB,GACVsB,GACH5B,EAAsBuB,YAAY,sBAAuB,SAASO,GAChEzB,EAAWwB,IAAIC,KAInBC,EAAOC,QAAU3B","file":"65.js"}