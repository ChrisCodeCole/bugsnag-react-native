{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst Touchable = require('Touchable');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst View = require('View');\n\nconst createReactClass = require('create-react-class');\nconst ensurePositiveDelayProps = require('ensurePositiveDelayProps');\nconst processColor = require('processColor');\n\nconst rippleBackgroundPropType = PropTypes.shape({\n  type: PropTypes.oneOf(['RippleAndroid']),\n  color: PropTypes.number,\n  borderless: PropTypes.bool,\n});\n\nconst themeAttributeBackgroundPropType = PropTypes.shape({\n  type: PropTypes.oneOf(['ThemeAttrAndroid']),\n  attribute: PropTypes.string.isRequired,\n});\n\nconst backgroundPropType = PropTypes.oneOfType([\n  rippleBackgroundPropType,\n  themeAttributeBackgroundPropType,\n]);\n\ntype Event = Object;\n\nconst PRESS_RETENTION_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\n/**\n * A wrapper for making views respond properly to touches (Android only).\n * On Android this component uses native state drawable to display touch\n * feedback.\n *\n * At the moment it only supports having a single View instance as a child\n * node, as it's implemented by replacing that View with another instance of\n * RCTView node with some additional properties set.\n *\n * Background drawable of native feedback touchable can be customized with\n * `background` property.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableNativeFeedback\n *         onPress={this._onPressButton}\n *         background={TouchableNativeFeedback.SelectableBackground()}>\n *       <View style={{width: 150, height: 100, backgroundColor: 'red'}}>\n *         <Text style={{margin: 30}}>Button</Text>\n *       </View>\n *     </TouchableNativeFeedback>\n *   );\n * },\n * ```\n */\n\nconst TouchableNativeFeedback = createReactClass({\n  displayName: 'TouchableNativeFeedback',\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n\n    /**\n     * Determines the type of background drawable that's going to be used to\n     * display feedback. It takes an object with `type` property and extra data\n     * depending on the `type`. It's recommended to use one of the static\n     * methods to generate that dictionary.\n     */\n    background: backgroundPropType,\n\n    /**\n     * TV preferred focus (see documentation for the View component).\n     */\n    hasTVPreferredFocus: PropTypes.bool,\n\n    /**\n     * Set to true to add the ripple effect to the foreground of the view, instead of the\n     * background. This is useful if one of your child views has a background of its own, or you're\n     * e.g. displaying images, and you don't want the ripple to be covered by them.\n     *\n     * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is only available on\n     * Android 6.0 and above. If you try to use this on older versions you will get a warning and\n     * fallback to background.\n     */\n    useForeground: PropTypes.bool,\n  },\n\n  statics: {\n    /**\n     * Creates an object that represents android theme's default background for\n     * selectable elements (?android:attr/selectableItemBackground).\n     */\n    SelectableBackground: function() {\n      return {type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground'};\n    },\n    /**\n     * Creates an object that represent android theme's default background for borderless\n     * selectable elements (?android:attr/selectableItemBackgroundBorderless).\n     * Available on android API level 21+.\n     */\n    SelectableBackgroundBorderless: function() {\n      return {\n        type: 'ThemeAttrAndroid',\n        attribute: 'selectableItemBackgroundBorderless',\n      };\n    },\n    /**\n     * Creates an object that represents ripple drawable with specified color (as a\n     * string). If property `borderless` evaluates to true the ripple will\n     * render outside of the view bounds (see native actionbar buttons as an\n     * example of that behavior). This background type is available on Android\n     * API level 21+.\n     *\n     * @param color The ripple color\n     * @param borderless If the ripple can render outside it's bounds\n     */\n    Ripple: function(color: string, borderless: boolean) {\n      return {\n        type: 'RippleAndroid',\n        color: processColor(color),\n        borderless: borderless,\n      };\n    },\n\n    canUseNativeForeground: function() {\n      return Platform.OS === 'android' && Platform.Version >= 23;\n    },\n  },\n\n  mixins: [Touchable.Mixin],\n\n  getDefaultProps: function() {\n    return {\n      background: this.SelectableBackground(),\n    };\n  },\n\n  getInitialState: function() {\n    return this.touchableGetInitialState();\n  },\n\n  componentDidMount: function() {\n    ensurePositiveDelayProps(this.props);\n  },\n\n  UNSAFE_componentWillReceiveProps: function(nextProps) {\n    ensurePositiveDelayProps(nextProps);\n  },\n\n  /**\n   * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are\n   * defined on your component.\n   */\n  touchableHandleActivePressIn: function(e: Event) {\n    this.props.onPressIn && this.props.onPressIn(e);\n    this._dispatchPressedStateChange(true);\n    if (this.pressInLocation) {\n      this._dispatchHotspotUpdate(\n        this.pressInLocation.locationX,\n        this.pressInLocation.locationY,\n      );\n    }\n  },\n\n  touchableHandleActivePressOut: function(e: Event) {\n    this.props.onPressOut && this.props.onPressOut(e);\n    this._dispatchPressedStateChange(false);\n  },\n\n  touchableHandlePress: function(e: Event) {\n    this.props.onPress && this.props.onPress(e);\n  },\n\n  touchableHandleLongPress: function(e: Event) {\n    this.props.onLongPress && this.props.onLongPress(e);\n  },\n\n  touchableGetPressRectOffset: function() {\n    // Always make sure to predeclare a constant!\n    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n\n  touchableGetHitSlop: function() {\n    return this.props.hitSlop;\n  },\n\n  touchableGetHighlightDelayMS: function() {\n    return this.props.delayPressIn;\n  },\n\n  touchableGetLongPressDelayMS: function() {\n    return this.props.delayLongPress;\n  },\n\n  touchableGetPressOutDelayMS: function() {\n    return this.props.delayPressOut;\n  },\n\n  _handleResponderMove: function(e) {\n    this.touchableHandleResponderMove(e);\n    this._dispatchHotspotUpdate(\n      e.nativeEvent.locationX,\n      e.nativeEvent.locationY,\n    );\n  },\n\n  _dispatchHotspotUpdate: function(destX, destY) {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.RCTView.Commands.hotspotUpdate,\n      [destX || 0, destY || 0],\n    );\n  },\n\n  _dispatchPressedStateChange: function(pressed) {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.RCTView.Commands.setPressed,\n      [pressed],\n    );\n  },\n\n  render: function() {\n    const child = React.Children.only(this.props.children);\n    let children = child.props.children;\n    if (Touchable.TOUCH_TARGET_DEBUG && child.type === View) {\n      if (!Array.isArray(children)) {\n        children = [children];\n      }\n      children.push(\n        Touchable.renderDebugView({\n          color: 'brown',\n          hitSlop: this.props.hitSlop,\n        }),\n      );\n    }\n    if (\n      this.props.useForeground &&\n      !TouchableNativeFeedback.canUseNativeForeground()\n    ) {\n      console.warn(\n        'Requested foreground ripple, but it is not available on this version of Android. ' +\n          'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' +\n          'Touchable if the result is false.',\n      );\n    }\n    const drawableProp =\n      this.props.useForeground &&\n      TouchableNativeFeedback.canUseNativeForeground()\n        ? 'nativeForegroundAndroid'\n        : 'nativeBackgroundAndroid';\n    const childProps = {\n      ...child.props,\n      [drawableProp]: this.props.background,\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityStates: this.props.accessibilityStates,\n      children,\n      testID: this.props.testID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n      isTVSelectable: true,\n      hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,\n      onResponderTerminationRequest: this\n        .touchableHandleResponderTerminationRequest,\n      onResponderGrant: this.touchableHandleResponderGrant,\n      onResponderMove: this._handleResponderMove,\n      onResponderRelease: this.touchableHandleResponderRelease,\n      onResponderTerminate: this.touchableHandleResponderTerminate,\n    };\n\n    // We need to clone the actual element so that the ripple background drawable\n    // can be applied directly to the background of this element rather than to\n    // a wrapper view as done in other Touchable*\n    return React.cloneElement(child, childProps);\n  },\n});\n\nmodule.exports = TouchableNativeFeedback;\n"],"names":["Platform","require","d","React","PropTypes","ReactNative","Touchable","TouchableWithoutFeedback","UIManager","View","createReactClass","ensurePositiveDelayProps","processColor","rippleBackgroundPropType","shape","type","oneOf","color","number","borderless","bool","themeAttributeBackgroundPropType","attribute","string","isRequired","backgroundPropType","oneOfType","PRESS_RETENTION_OFFSET","top","left","right","bottom","TouchableNativeFeedback","displayName","propTypes","_objectSpread","background","hasTVPreferredFocus","useForeground","statics","SelectableBackground","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","Version","mixins","Mixin","getDefaultProps","this","getInitialState","touchableGetInitialState","componentDidMount","props","UNSAFE_componentWillReceiveProps","nextProps","touchableHandleActivePressIn","e","onPressIn","_dispatchPressedStateChange","pressInLocation","_dispatchHotspotUpdate","locationX","locationY","touchableHandleActivePressOut","onPressOut","touchableHandlePress","onPress","touchableHandleLongPress","onLongPress","touchableGetPressRectOffset","pressRetentionOffset","touchableGetHitSlop","hitSlop","touchableGetHighlightDelayMS","delayPressIn","touchableGetLongPressDelayMS","delayLongPress","touchableGetPressOutDelayMS","delayPressOut","_handleResponderMove","touchableHandleResponderMove","nativeEvent","destX","destY","dispatchViewManagerCommand","findNodeHandle","RCTView","Commands","hotspotUpdate","pressed","setPressed","render","_objectSpread2","child","Children","only","children","TOUCH_TARGET_DEBUG","Array","isArray","push","renderDebugView","console","warn","drawableProp","childProps","_defineProperty","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","testID","onLayout","touchableHandleStartShouldSetResponder","touchableHandleResponderTerminationRequest","touchableHandleResponderGrant","touchableHandleResponderRelease","touchableHandleResponderTerminate","cloneElement","module","exports"],"mappings":"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","file":"194.js"}