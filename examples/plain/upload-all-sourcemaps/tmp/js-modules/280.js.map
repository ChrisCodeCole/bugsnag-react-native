{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/Picker/Picker.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst PickerIOS = require('PickerIOS');\nconst PickerAndroid = require('PickerAndroid');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst TextStylePropTypes = require('TextStylePropTypes');\nconst UnimplementedView = require('UnimplementedView');\nconst ViewPropTypes = require('ViewPropTypes');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nconst itemStylePropType = StyleSheetPropType(TextStylePropTypes);\n\nconst pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\nconst MODE_DIALOG = 'dialog';\nconst MODE_DROPDOWN = 'dropdown';\n\n/**\n * Individual selectable item in a Picker.\n */\nclass PickerItem extends React.Component<{\n  label: string,\n  value?: any,\n  color?: ColorPropType,\n  testID?: string,\n}> {\n  static propTypes = {\n    /**\n     * Text to display for this item.\n     */\n    label: PropTypes.string.isRequired,\n    /**\n     * The value to be passed to picker's `onValueChange` callback when\n     * this item is selected. Can be a string or an integer.\n     */\n    value: PropTypes.any,\n    /**\n     * Color of this item's text.\n     * @platform android\n     */\n    color: ColorPropType,\n    /**\n     * Used to locate the item in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    // The items are not rendered directly\n    throw null;\n  }\n}\n\n/**\n * Renders the native picker component on iOS and Android. Example:\n *\n *     <Picker\n *       selectedValue={this.state.language}\n *       onValueChange={(itemValue, itemIndex) => this.setState({language: itemValue})}>\n *       <Picker.Item label=\"Java\" value=\"java\" />\n *       <Picker.Item label=\"JavaScript\" value=\"js\" />\n *     </Picker>\n */\nclass Picker extends React.Component<{\n  style?: $FlowFixMe,\n  selectedValue?: any,\n  onValueChange?: Function,\n  enabled?: boolean,\n  mode?: 'dialog' | 'dropdown',\n  itemStyle?: $FlowFixMe,\n  prompt?: string,\n  testID?: string,\n}> {\n  /**\n   * On Android, display the options in a dialog.\n   */\n  static MODE_DIALOG = MODE_DIALOG;\n\n  /**\n   * On Android, display the options in a dropdown (this is the default).\n   */\n  static MODE_DROPDOWN = MODE_DROPDOWN;\n\n  static Item = PickerItem;\n\n  static defaultProps = {\n    mode: MODE_DIALOG,\n  };\n\n  // $FlowFixMe(>=0.41.0)\n  static propTypes = {\n    ...ViewPropTypes,\n    style: pickerStyleType,\n    /**\n     * Value matching value of one of the items. Can be a string or an integer.\n     */\n    selectedValue: PropTypes.any,\n    /**\n     * Callback for when an item is selected. This is called with the following parameters:\n     *   - `itemValue`: the `value` prop of the item that was selected\n     *   - `itemPosition`: the index of the selected item in this picker\n     */\n    onValueChange: PropTypes.func,\n    /**\n     * If set to false, the picker will be disabled, i.e. the user will not be able to make a\n     * selection.\n     * @platform android\n     */\n    enabled: PropTypes.bool,\n    /**\n     * On Android, specifies how to display the selection items when the user taps on the picker:\n     *\n     *   - 'dialog': Show a modal dialog. This is the default.\n     *   - 'dropdown': Shows a dropdown anchored to the picker view\n     *\n     * @platform android\n     */\n    mode: PropTypes.oneOf(['dialog', 'dropdown']),\n    /**\n     * Style to apply to each of the item labels.\n     * @platform ios\n     */\n    itemStyle: itemStylePropType,\n    /**\n     * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n     * @platform android\n     */\n    prompt: PropTypes.string,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    if (Platform.OS === 'ios') {\n      // $FlowFixMe found when converting React.createClass to ES6\n      return <PickerIOS {...this.props}>{this.props.children}</PickerIOS>;\n    } else if (Platform.OS === 'android') {\n      return (\n        // $FlowFixMe found when converting React.createClass to ES6\n        <PickerAndroid {...this.props}>{this.props.children}</PickerAndroid>\n      );\n    } else {\n      return <UnimplementedView />;\n    }\n  }\n}\n\nmodule.exports = Picker;\n"],"names":["ColorPropType","require","d","PickerAndroid","React","PropTypes","StyleSheetPropType","TextStylePropTypes","ViewPropTypes","ViewStylePropTypes","itemStylePropType","pickerStyleType","_objectSpread","color","PickerItem","Component","propTypes","label","string","isRequired","value","any","testID","Picker","createElement","this","props","children","MODE_DIALOG","MODE_DROPDOWN","Item","defaultProps","mode","style","selectedValue","onValueChange","func","enabled","bool","oneOf","itemStyle","prompt","module","exports"],"mappings":"4BAUA,6EAEMA,EAAgBC,EAAOC,EAAA,IAEvBC,GADYF,EAAOC,EAAA,IACHD,EAAOC,EAAA,KAEvBE,GADWH,EAAOC,EAAA,IACVD,EAAOC,EAAA,MACfG,EAAYJ,EAAOC,EAAA,KACnBI,EAAqBL,EAAOC,EAAA,KAC5BK,EAAqBN,EAAOC,EAAA,KAE5BM,GADoBP,EAAOC,EAAA,KACXD,EAAOC,EAAA,MACvBO,EAAqBR,EAAOC,EAAA,KAE5BQ,EAAoBJ,EAAmBC,GAEvCI,EAAkBL,EAAkBM,KACrCH,GACHI,MAAOb,KASHc,kIA6BF,MAAM,aA7BeV,EAAMW,WAAzBD,EAMGE,WAILC,MAAOZ,EAAUa,OAAOC,WAKxBC,MAAOf,EAAUgB,IAKjBR,MAAOb,EAIPsB,OAAQjB,EAAUa,YAmBhBK,kIA4EA,OAEEnB,EAAAoB,cAACrB,EAAkBsB,KAAKC,MAAQD,KAAKC,MAAMC,kBA9E9BvB,EAAMW,WAArBQ,EAaGK,YA9DW,SAiDdL,EAkBGM,cAlEa,WAgDhBN,EAoBGO,KAAOhB,EApBVS,EAsBGQ,cACLC,KAxEgB,UAiDdT,EA2BGP,eACFR,GACHyB,MAAOtB,EAIPuB,cAAe7B,EAAUgB,IAMzBc,cAAe9B,EAAU+B,KAMzBC,QAAShC,EAAUiC,KASnBN,KAAM3B,EAAUkC,OAAO,SAAU,aAKjCC,UAAW9B,EAKX+B,OAAQpC,EAAUa,OAIlBI,OAAQjB,EAAUa,SAkBtBwB,EAAOC,QAAUpB","file":"280.js"}