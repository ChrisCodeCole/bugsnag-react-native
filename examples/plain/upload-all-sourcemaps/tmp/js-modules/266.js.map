{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\n\nconst processColor = require('processColor');\n\nconst StatusBarManager = require('NativeModules').StatusBarManager;\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Enum<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Enum<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n}>;\n\ntype DefaultProps = {\n  animated: boolean,\n};\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there is also an imperative\n * API exposed as static functions on the component. It is however not recommended\n * to use the static API and the component for the same prop because any value\n * set by the static API will get overriden by the one set by the component in\n * the next render.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<{\n  hidden?: boolean,\n  animated?: boolean,\n  backgroundColor?: string,\n  translucent?: boolean,\n  barStyle?: 'default' | 'light-content' | 'dark-content',\n  networkActivityIndicatorVisible?: boolean,\n  showHideTransition?: 'fade' | 'slide',\n}> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight = StatusBarManager.HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    StatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n    StatusBarManager.setColor(processColor(color), animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    StatusBarManager.setTranslucent(translucent);\n  }\n\n  static propTypes = {\n    /**\n     * If the status bar is hidden.\n     */\n    hidden: PropTypes.bool,\n    /**\n     * If the transition between status bar property changes should be animated.\n     * Supported for backgroundColor, barStyle and hidden.\n     */\n    animated: PropTypes.bool,\n    /**\n     * The background color of the status bar.\n     * @platform android\n     */\n    backgroundColor: ColorPropType,\n    /**\n     * If the status bar is translucent.\n     * When translucent is set to true, the app will draw under the status bar.\n     * This is useful when using a semi transparent status bar color.\n     *\n     * @platform android\n     */\n    translucent: PropTypes.bool,\n    /**\n     * Sets the color of the status bar text.\n     */\n    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),\n    /**\n     * If the network activity indicator should be visible.\n     *\n     * @platform ios\n     */\n    networkActivityIndicatorVisible: PropTypes.bool,\n    /**\n     * The transition effect when showing and hiding the status bar using the `hidden`\n     * prop. Defaults to 'fade'.\n     *\n     * @platform ios\n     */\n    showHideTransition: PropTypes.oneOf(['fade', 'slide']),\n  };\n\n  static defaultProps = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack.push(this._stackEntry);\n    this._updatePropsStack();\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    StatusBar._propsStack.splice(index, 1);\n\n    this._updatePropsStack();\n  }\n\n  componentDidUpdate() {\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack[index] = this._stackEntry;\n\n    this._updatePropsStack();\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          StatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          StatusBarManager.setColor(\n            processColor(mergedProps.backgroundColor.value),\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          StatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"names":["React","require","d","PropTypes","ColorPropType","processColor","StatusBarManager","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","_updatePropsStack","clearImmediate","_updateImmediate","setImmediate","propsStack","defaultValues","oldProps","_currentValues","mergedProps","_propsStack","_defaultProps","reduce","prev","cur","prop","_extends","setStyle","setColor","setHidden","setTranslucent","this","push","index","indexOf","splice","animation","style","visible","console","warn","color","Component","currentHeight","HEIGHT","propTypes","bool","oneOf","defaultProps","module","exports"],"mappings":"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","file":"266.js"}