{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedValueXY.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('./AnimatedValue');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype ValueXYListenerCallback = (value: {x: number, y: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * 2D Value for driving 2D animations, such as pan gestures. Almost identical\n * API to normal `Animated.Value`, but multiplexed.\n *\n * See http://facebook.github.io/react-native/docs/animatedvaluexy.html\n */\nclass AnimatedValueXY extends AnimatedWithChildren {\n  x: AnimatedValue;\n  y: AnimatedValue;\n  _listeners: {[key: string]: {x: string, y: string}};\n\n  constructor(\n    valueIn?: ?{+x: number | AnimatedValue, +y: number | AnimatedValue},\n  ) {\n    super();\n    const value: any = valueIn || {x: 0, y: 0}; // @flowfixme: shouldn't need `: any`\n    if (typeof value.x === 'number' && typeof value.y === 'number') {\n      this.x = new AnimatedValue(value.x);\n      this.y = new AnimatedValue(value.y);\n    } else {\n      invariant(\n        value.x instanceof AnimatedValue && value.y instanceof AnimatedValue,\n        'AnimatedValueXY must be initialized with an object of numbers or ' +\n          'AnimatedValues.',\n      );\n      this.x = value.x;\n      this.y = value.y;\n    }\n    this._listeners = {};\n  }\n\n  /**\n   * Directly set the value. This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#setvalue\n   */\n  setValue(value: {x: number, y: number}) {\n    this.x.setValue(value.x);\n    this.y.setValue(value.y);\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether\n   * via `setValue`, an animation, or `Animated.event`. Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#setoffset\n   */\n  setOffset(offset: {x: number, y: number}) {\n    this.x.setOffset(offset.x);\n    this.y.setOffset(offset.y);\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this.x.flattenOffset();\n    this.y.flattenOffset();\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to\n   * zero. The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#extractoffset\n   */\n  extractOffset(): void {\n    this.x.extractOffset();\n    this.y.extractOffset();\n  }\n\n  __getValue(): {x: number, y: number} {\n    return {\n      x: this.x.__getValue(),\n      y: this.y.__getValue(),\n    };\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#resetanimation\n   */\n  resetAnimation(callback?: (value: {x: number, y: number}) => void): void {\n    this.x.resetAnimation();\n    this.y.resetAnimation();\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#stopanimation\n   */\n  stopAnimation(callback?: (value: {x: number, y: number}) => void): void {\n    this.x.stopAnimation();\n    this.y.stopAnimation();\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to synchronously read\n   * the value because it might be driven natively.\n   *\n   * Returns a string that serves as an identifier for the listener.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#addlistener\n   */\n  addListener(callback: ValueXYListenerCallback): string {\n    const id = String(_uniqueId++);\n    const jointCallback = ({value: number}) => {\n      callback(this.__getValue());\n    };\n    this._listeners[id] = {\n      x: this.x.addListener(jointCallback),\n      y: this.y.addListener(jointCallback),\n    };\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#removelistener\n   */\n  removeListener(id: string): void {\n    this.x.removeListener(this._listeners[id].x);\n    this.y.removeListener(this._listeners[id].y);\n    delete this._listeners[id];\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this.x.removeAllListeners();\n    this.y.removeAllListeners();\n    this._listeners = {};\n  }\n\n  /**\n   * Converts `{x, y}` into `{left, top}` for use in style.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#getlayout\n   */\n  getLayout(): {[key: string]: AnimatedValue} {\n    return {\n      left: this.x,\n      top: this.y,\n    };\n  }\n\n  /**\n   * Converts `{x, y}` into a useable translation transform.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#gettranslatetransform\n   */\n  getTranslateTransform(): Array<{[key: string]: AnimatedValue}> {\n    return [{translateX: this.x}, {translateY: this.y}];\n  }\n}\n\nmodule.exports = AnimatedValueXY;\n"],"names":["AnimatedValue","require","d","AnimatedWithChildren","invariant","_uniqueId","AnimatedValueXY","valueIn","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","value","x","y","_listeners","setValue","offset","setOffset","flattenOffset","extractOffset","__getValue","callback","resetAnimation","stopAnimation","_this2","id","String","jointCallback","_ref","addListener","removeListener","removeAllListeners","left","top","translateX","translateY","module","exports"],"mappings":"4BASA,mEAEMA,EAAgBC,EAAOC,EAAA,IACvBC,EAAuBF,EAAOC,EAAA,IAE9BE,EAAYH,EAAOC,EAAA,IAIrBG,EAAY,EAQVC,eAKJ,SAAAA,EACEC,GACA,IAAAC,EAAAC,EAAAC,KAAAJ,GACAE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,OACA,IAAMI,EAAaP,IAAYQ,EAAG,EAAGC,EAAG,GAFxC,MAGuB,iBAAZF,EAAMC,GAAqC,iBAAZD,EAAME,GAC9CR,EAAKO,EAAI,IAAIf,EAAcc,EAAMC,GACjCP,EAAKQ,EAAI,IAAIhB,EAAcc,EAAME,KAEjCZ,EACEU,EAAMC,aAAaf,GAAiBc,EAAME,aAAahB,EADhD,oFAKTQ,EAAKO,EAAID,EAAMC,EACfP,EAAKQ,EAAIF,EAAME,GAEjBR,EAAKS,cAfLT,aAP0BL,uCA+BnBW,GACPJ,KAAKK,EAAEG,SAASJ,EAAMC,GACtBL,KAAKM,EAAEE,SAASJ,EAAME,qCAUdG,GACRT,KAAKK,EAAEK,UAAUD,EAAOJ,GACxBL,KAAKM,EAAEI,UAAUD,EAAOH,2CAUxBN,KAAKK,EAAEM,gBACPX,KAAKM,EAAEK,wDAUPX,KAAKK,EAAEO,gBACPZ,KAAKM,EAAEM,qDAIP,OACEP,EAAGL,KAAKK,EAAEQ,aACVP,EAAGN,KAAKM,EAAEO,qDASCC,GACbd,KAAKK,EAAEU,iBACPf,KAAKM,EAAES,iBACPD,GAAYA,EAASd,KAAKa,oDAUdC,GACZd,KAAKK,EAAEW,gBACPhB,KAAKM,EAAEU,gBACPF,GAAYA,EAASd,KAAKa,kDAYhBC,GAA2C,IAAAG,EAAAjB,KAC/CkB,EAAKC,OAAOxB,KACZyB,EAAgB,SAAAC,GAAqBA,EAAnBjB,MACtBU,EAASG,EAAKJ,eAMhB,OAJAb,KAAKO,WAAWW,IACdb,EAAGL,KAAKK,EAAEiB,YAAYF,GACtBd,EAAGN,KAAKM,EAAEgB,YAAYF,IAEjBF,yCASMA,GACblB,KAAKK,EAAEkB,eAAevB,KAAKO,WAAWW,GAAIb,GAC1CL,KAAKM,EAAEiB,eAAevB,KAAKO,WAAWW,GAAIZ,UACnCN,KAAKO,WAAWW,gDASvBlB,KAAKK,EAAEmB,qBACPxB,KAAKM,EAAEkB,qBACPxB,KAAKO,kDASL,OACEkB,KAAMzB,KAAKK,EACXqB,IAAK1B,KAAKM,mDAUZ,QAASqB,WAAY3B,KAAKK,IAAKuB,WAAY5B,KAAKM,cAIpDuB,EAAOC,QAAUlC","file":"223.js"}