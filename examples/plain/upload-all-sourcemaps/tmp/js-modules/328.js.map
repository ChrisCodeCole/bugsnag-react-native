{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Linking/Linking.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst LinkingManager =\n  Platform.OS === 'android'\n    ? NativeModules.IntentAndroid\n    : NativeModules.LinkingManager;\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://facebook.github.io/react-native/docs/linking.html\n */\nclass Linking extends NativeEventEmitter {\n  constructor() {\n    super(LinkingManager);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://facebook.github.io/react-native/docs/linking.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    this.addListener(type, handler);\n  }\n\n  /**\n   * Remove a handler by passing the `url` event type and the handler.\n   *\n   * See https://facebook.github.io/react-native/docs/linking.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    this.removeListener(type, handler);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://facebook.github.io/react-native/docs/linking.html#openurl\n   */\n  openURL(url: string): Promise<any> {\n    this._validateURL(url);\n    return LinkingManager.openURL(url);\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://facebook.github.io/react-native/docs/linking.html#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    return LinkingManager.canOpenURL(url);\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://facebook.github.io/react-native/docs/linking.html#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return LinkingManager.getInitialURL();\n  }\n\n  _validateURL(url: string) {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = new Linking();\n"],"names":["NativeEventEmitter","require","d","NativeModules","invariant","LinkingManager","IntentAndroid","Linking","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","type","handler","addListener","removeListener","url","_validateURL","openURL","canOpenURL","getInitialURL","module","exports"],"mappings":"4BAUA,mEAEMA,EAAqBC,EAAOC,EAAA,IAC5BC,EAAgBF,EAAOC,EAAA,IAGvBE,GAFWH,EAAOC,EAAA,IAEND,EAAOC,EAAA,KAEnBG,EAEAF,EAAcG,cASdC,eACJ,SAAAA,IAAc,OAAAC,EAAAC,KAAAF,GAAAG,EAAAD,KAAAE,EAAAJ,GAAAK,KAAAH,KACNJ,eAFYL,+CAWHa,EAAcC,GAC7BL,KAAKM,YAAYF,EAAMC,+CAQLD,EAAcC,GAChCL,KAAKO,eAAeH,EAAMC,mCAQpBG,GAEN,OADAR,KAAKS,aAAaD,GACXZ,EAAec,QAAQF,sCAQrBA,GAET,OADAR,KAAKS,aAAaD,GACXZ,EAAee,WAAWH,2CAUjC,OAAOZ,EAAegB,qDAGXJ,GACXb,EACiB,iBAARa,EACP,yCAA2CA,GAE7Cb,EAAUa,EAAK,0CAInBK,EAAOC,QAAU,IAAIhB","file":"328.js"}