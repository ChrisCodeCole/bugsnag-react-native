{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\nconst isEmpty = require('isEmpty');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nfunction defaultGetRowData(\n  dataBlob: any,\n  sectionID: number | string,\n  rowID: number | string,\n): any {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(\n  dataBlob: any,\n  sectionID: number | string,\n): any {\n  return dataBlob[sectionID];\n}\n\ntype differType = (data1: any, data2: any) => boolean;\n\ntype ParamType = {\n  rowHasChanged: differType,\n  getRowData?: ?typeof defaultGetRowData,\n  sectionHeaderHasChanged?: ?differType,\n  getSectionHeaderData?: ?typeof defaultGetSectionHeaderData,\n};\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nclass ListViewDataSource {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  constructor(params: ParamType) {\n    invariant(\n      params && typeof params.rowHasChanged === 'function',\n      'Must provide a rowHasChanged function.',\n    );\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData =\n      params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n  cloneWithRows(\n    dataBlob: $ReadOnlyArray<any> | {+[key: string]: any},\n    rowIdentities: ?$ReadOnlyArray<string>,\n  ): ListViewDataSource {\n    const rowIds = rowIdentities ? [[...rowIdentities]] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = () => false;\n    }\n    return this.cloneWithRowsAndSections({s1: dataBlob}, ['s1'], rowIds);\n  }\n\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n  cloneWithRowsAndSections(\n    dataBlob: any,\n    sectionIdentities: ?Array<string>,\n    rowIdentities: ?Array<Array<string>>,\n  ): ListViewDataSource {\n    invariant(\n      typeof this._sectionHeaderHasChanged === 'function',\n      'Must provide a sectionHeaderHasChanged function with section data.',\n    );\n    invariant(\n      !sectionIdentities ||\n        !rowIdentities ||\n        sectionIdentities.length === rowIdentities.length,\n      'row and section ids lengths must be the same',\n    );\n\n    const newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged,\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(sectionID => {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(\n      this._dataBlob,\n      this.sectionIdentities,\n      this.rowIdentities,\n    );\n\n    return newSource;\n  }\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n  getRowCount(): number {\n    return this._cachedRowCount;\n  }\n\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n  getRowAndSectionCount(): number {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  }\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n  rowShouldUpdate(sectionIndex: number, rowIndex: number): boolean {\n    const needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(\n      needsUpdate !== undefined,\n      'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex,\n    );\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the row.\n   */\n  getRowData(sectionIndex: number, rowIndex: number): any {\n    const sectionID = this.sectionIdentities[sectionIndex];\n    const rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(\n      sectionID !== undefined && rowID !== undefined,\n      'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex,\n    );\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  }\n\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n  getRowIDForFlatIndex(index: number): ?string {\n    let accessIndex = index;\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n  getSectionIDForFlatIndex(index: number): ?string {\n    let accessIndex = index;\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n  getSectionLengths(): Array<number> {\n    const results = [];\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  }\n\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n  sectionHeaderShouldUpdate(sectionIndex: number): boolean {\n    const needsUpdate = this._dirtySections[sectionIndex];\n    warning(\n      needsUpdate !== undefined,\n      'missing dirtyBit for section: ' + sectionIndex,\n    );\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the section header\n   */\n  getSectionHeaderData(sectionIndex: number): any {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    const sectionID = this.sectionIdentities[sectionIndex];\n    warning(\n      sectionID !== undefined,\n      'renderSection called on invalid section: ' + sectionIndex,\n    );\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  }\n\n  /**\n   * Private members and methods.\n   */\n\n  _getRowData: typeof defaultGetRowData;\n  _getSectionHeaderData: typeof defaultGetSectionHeaderData;\n  _rowHasChanged: differType;\n  _sectionHeaderHasChanged: ?differType;\n\n  _dataBlob: any;\n  _dirtyRows: Array<Array<boolean>>;\n  _dirtySections: Array<boolean>;\n  _cachedRowCount: number;\n\n  // These two 'protected' variables are accessed by ListView to iterate over\n  // the data in this class.\n  rowIdentities: Array<Array<string>>;\n  sectionIdentities: Array<string>;\n\n  _calculateDirtyArrays(\n    prevDataBlob: any,\n    prevSectionIDs: Array<string>,\n    prevRowIDs: Array<Array<string>>,\n  ): void {\n    // construct a hashmap of the existing (old) id arrays\n    const prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    const prevRowsHash = {};\n    for (let ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(\n        !prevRowsHash[sectionID],\n        'SectionID appears more than once: ' + sectionID,\n      );\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    // compare the 2 identity array and get the dirtied rows\n    this._dirtySections = [];\n    this._dirtyRows = [];\n\n    let dirty;\n    for (let sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      // dirty if the sectionHeader is new or _sectionHasChanged is true\n      dirty = !prevSectionsHash[sectionID];\n      const sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(\n          this._getSectionHeaderData(prevDataBlob, sectionID),\n          this._getSectionHeaderData(this._dataBlob, sectionID),\n        );\n      }\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n      for (\n        let rIndex = 0;\n        rIndex < this.rowIdentities[sIndex].length;\n        rIndex++\n      ) {\n        const rowID = this.rowIdentities[sIndex][rIndex];\n        // dirty if the section is new, row is new or _rowHasChanged is true\n        dirty =\n          !prevSectionsHash[sectionID] ||\n          !prevRowsHash[sectionID][rowID] ||\n          this._rowHasChanged(\n            this._getRowData(prevDataBlob, sectionID, rowID),\n            this._getRowData(this._dataBlob, sectionID, rowID),\n          );\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  }\n}\n\nfunction countRows(allRowIDs) {\n  let totalRows = 0;\n  for (let sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    const rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  const result = {};\n  for (let ii = 0; ii < arr.length; ii++) {\n    const key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nmodule.exports = ListViewDataSource;\n"],"names":["invariant","require","d","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","_classCallCheck","this","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","rowIds","_toConsumableArray","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","sectionIndex","rowIndex","needsUpdate","undefined","index","accessIndex","ii","results","prevDataBlob","prevSectionIDs","prevRowIDs","dirty","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","arr","result","key","module","exports"],"mappings":"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","file":"237.js"}