{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Blob/BlobManager.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst Blob = require('Blob');\nconst BlobRegistry = require('BlobRegistry');\nconst {BlobModule} = require('NativeModules');\n\nimport type {BlobData, BlobOptions} from 'BlobTypes';\n\n/*eslint-disable no-bitwise */\n/*eslint-disable eqeqeq */\n\n/**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */\nfunction uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Module to manage blobs. Wrapper around the native blob module.\n */\nclass BlobManager {\n  /**\n   * If the native blob module is available.\n   */\n  static isAvailable = !!BlobModule;\n\n  /**\n   * Create blob from existing array of blobs.\n   */\n  static createFromParts(\n    parts: Array<Blob | string>,\n    options?: BlobOptions,\n  ): Blob {\n    const blobId = uuidv4();\n    const items = parts.map(part => {\n      if (\n        part instanceof ArrayBuffer ||\n        (global.ArrayBufferView && part instanceof global.ArrayBufferView)\n      ) {\n        throw new Error(\n          \"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\",\n        );\n      }\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob',\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string',\n        };\n      }\n    });\n    const size = items.reduce((acc, curr) => {\n      if (curr.type === 'string') {\n        return acc + global.unescape(encodeURI(curr.data)).length;\n      } else {\n        return acc + curr.data.size;\n      }\n    }, 0);\n\n    BlobModule.createFromParts(items, blobId);\n\n    return BlobManager.createFromOptions({\n      blobId,\n      offset: 0,\n      size,\n      type: options ? options.type : '',\n      lastModified: options ? options.lastModified : Date.now(),\n    });\n  }\n\n  /**\n   * Create blob instance from blob data from native.\n   * Used internally by modules like XHR, WebSocket, etc.\n   */\n  static createFromOptions(options: BlobData): Blob {\n    BlobRegistry.register(options.blobId);\n    return Object.assign(Object.create(Blob.prototype), {data: options});\n  }\n\n  /**\n   * Deallocate resources for a blob.\n   */\n  static release(blobId: string): void {\n    BlobRegistry.unregister(blobId);\n    if (BlobRegistry.has(blobId)) {\n      return;\n    }\n    BlobModule.release(blobId);\n  }\n\n  /**\n   * Inject the blob content handler in the networking module to support blob\n   * requests and responses.\n   */\n  static addNetworkingHandler(): void {\n    BlobModule.addNetworkingHandler();\n  }\n\n  /**\n   * Indicate the websocket should return a blob for incoming binary\n   * messages.\n   */\n  static addWebSocketHandler(socketId: number): void {\n    BlobModule.addWebSocketHandler(socketId);\n  }\n\n  /**\n   * Indicate the websocket should no longer return a blob for incoming\n   * binary messages.\n   */\n  static removeWebSocketHandler(socketId: number): void {\n    BlobModule.removeWebSocketHandler(socketId);\n  }\n\n  /**\n   * Send a blob message to a websocket.\n   */\n  static sendOverSocket(blob: Blob, socketId: number): void {\n    BlobModule.sendOverSocket(blob.data, socketId);\n  }\n}\n\nmodule.exports = BlobManager;\n"],"names":["Blob","require","d","BlobRegistry","BlobModule","BlobManager","parts","options","blobId","replace","c","r","Math","random","toString","items","map","part","ArrayBuffer","global","ArrayBufferView","Error","data","type","String","size","reduce","acc","curr","unescape","encodeURI","length","createFromParts","createFromOptions","offset","lastModified","Date","now","register","_extends","Object","create","prototype","unregister","has","release","addNetworkingHandler","socketId","addWebSocketHandler","removeWebSocketHandler","blob","sendOverSocket","isAvailable","module","exports"],"mappings":"4BAUA,+CAEMA,EAAOC,EAAOC,EAAA,IACdC,EAAeF,EAAOC,EAAA,IACrBE,EAAcH,EAAOC,EAAA,IAArBE,eAsBDC,4FAUFC,EACAC,GAEA,IAAMC,EAvBD,uCAAuCC,QAAQ,QAAS,SAAAC,GAC7D,IAAMC,EAAqB,GAAhBC,KAAKC,SAAiB,EAEjC,OADW,KAALH,EAAWC,EAAS,EAAJA,EAAW,GACxBG,SAAS,MAqBZC,EAAQT,EAAMU,IAAI,SAAAC,GACtB,GACEA,aAAgBC,aACfC,EAAOC,iBAAmBH,aAAgBE,EAAOC,gBAElD,MAAM,IAAIC,MACR,6EAGJ,OAAIJ,aAAgBjB,GAEhBsB,KAAML,EAAKK,KACXC,KAAM,SAIND,KAAME,OAAOP,GACbM,KAAM,YAINE,EAAOV,EAAMW,OAAO,SAACC,EAAKC,GAC9B,MAAkB,WAAdA,EAAKL,KACAI,EAAMR,EAAOU,SAASC,UAAUF,EAAKN,OAAOS,OAE5CJ,EAAMC,EAAKN,KAAKG,MAExB,GAIH,OAFArB,EAAW4B,gBAAgBjB,EAAOP,GAE3BH,EAAY4B,mBACjBzB,OAAAA,EACA0B,OAAQ,EACRT,KAAAA,EACAF,KAAMhB,EAAUA,EAAQgB,KAAO,GAC/BY,aAAc5B,EAAUA,EAAQ4B,aAAeC,KAAKC,kDAQ/B9B,GAEvB,OADAJ,EAAamC,SAAS/B,EAAQC,QACvB+B,EAAcC,OAAOC,OAAOzC,EAAK0C,YAAapB,KAAMf,oCAM9CC,GACbL,EAAawC,WAAWnC,GACpBL,EAAayC,IAAIpC,IAGrBJ,EAAWyC,QAAQrC,kDAQnBJ,EAAW0C,mEAOcC,GACzB3C,EAAW4C,oBAAoBD,kDAOHA,GAC5B3C,EAAW6C,uBAAuBF,0CAMdG,EAAYH,GAChC3C,EAAW+C,eAAeD,EAAK5B,KAAMyB,aAtGnC1C,EAIG+C,cAAgBhD,EAsGzBiD,EAAOC,QAAUjD","file":"132.js"}