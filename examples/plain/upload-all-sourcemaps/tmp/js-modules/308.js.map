{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/WebView/WebView.android.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst ActivityIndicator = require('ActivityIndicator');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst UIManager = require('UIManager');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst WebViewShared = require('WebViewShared');\n\nconst deprecatedPropType = require('deprecatedPropType');\nconst keyMirror = require('fbjs/lib/keyMirror');\nconst requireNativeComponent = require('requireNativeComponent');\nconst resolveAssetSource = require('resolveAssetSource');\n\nconst RCT_WEBVIEW_REF = 'webview';\n\nconst WebViewState = keyMirror({\n  IDLE: null,\n  LOADING: null,\n  ERROR: null,\n});\n\nconst defaultRenderLoading = () => (\n  <View style={styles.loadingView}>\n    <ActivityIndicator style={styles.loadingProgressBar} />\n  </View>\n);\n\n/**\n * Renders a native WebView.\n */\nclass WebView extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    renderError: PropTypes.func,\n    renderLoading: PropTypes.func,\n    onLoad: PropTypes.func,\n    onLoadEnd: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onError: PropTypes.func,\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    contentInset: EdgeInsetsPropType,\n    onNavigationStateChange: PropTypes.func,\n    onMessage: PropTypes.func,\n    onContentSizeChange: PropTypes.func,\n    startInLoadingState: PropTypes.bool, // force WebView to show loadingView on first load\n    style: ViewPropTypes.style,\n\n    html: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.',\n    ),\n\n    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),\n\n    /**\n     * Loads static html or a uri (with optional headers) in the WebView.\n     */\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        /*\n         * The URI to load in the WebView. Can be a local or remote file.\n         */\n        uri: PropTypes.string,\n        /*\n         * The HTTP Method to use. Defaults to GET if not specified.\n         * NOTE: On Android, only GET and POST are supported.\n         */\n        method: PropTypes.oneOf(['GET', 'POST']),\n        /*\n         * Additional HTTP headers to send with the request.\n         * NOTE: On Android, this can only be used with GET requests.\n         */\n        headers: PropTypes.object,\n        /*\n         * The HTTP body to send with the request. This must be a valid\n         * UTF-8 string, and will be sent exactly as specified, with no\n         * additional encoding (e.g. URL-escaping or base64) applied.\n         * NOTE: On Android, this can only be used with POST requests.\n         */\n        body: PropTypes.string,\n      }),\n      PropTypes.shape({\n        /*\n         * A static HTML page to display in the WebView.\n         */\n        html: PropTypes.string,\n        /*\n         * The base URL to be used for any relative links in the HTML.\n         */\n        baseUrl: PropTypes.string,\n      }),\n      /*\n       * Used internally by packager.\n       */\n      PropTypes.number,\n    ]),\n\n    /**\n     * If true, use WKWebView instead of UIWebView.\n     * @platform ios\n     */\n    useWebKit: PropTypes.bool,\n\n    /**\n     * Used on Android only, JS is enabled by default for WebView on iOS\n     * @platform android\n     */\n    javaScriptEnabled: PropTypes.bool,\n\n    /**\n     * Used on Android Lollipop and above only, third party cookies are enabled\n     * by default for WebView on Android Kitkat and below and on iOS\n     * @platform android\n     */\n    thirdPartyCookiesEnabled: PropTypes.bool,\n\n    /**\n     * Used on Android only, controls whether DOM Storage is enabled or not\n     * @platform android\n     */\n    domStorageEnabled: PropTypes.bool,\n\n    /**\n     * Sets whether Geolocation is enabled. The default is false.\n     * @platform android\n     */\n    geolocationEnabled: PropTypes.bool,\n\n    /**\n     * Sets the JS to be injected when the webpage loads.\n     */\n    injectedJavaScript: PropTypes.string,\n\n    /**\n     * Sets whether the webpage scales to fit the view and the user can change the scale.\n     */\n    scalesPageToFit: PropTypes.bool,\n\n    /**\n     * Sets whether the webview allow access to file system.\n     * @platform android\n     */\n    allowFileAccess: PropTypes.bool,\n\n    /**\n     * Sets the user-agent for this WebView. The user-agent can also be set in native using\n     * WebViewConfig. This prop will overwrite that config.\n     */\n    userAgent: PropTypes.string,\n\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n\n    /**\n     * Determines whether HTML5 audio & videos require the user to tap before they can\n     * start playing. The default value is `false`.\n     */\n    mediaPlaybackRequiresUserAction: PropTypes.bool,\n\n    /**\n     * Boolean that sets whether JavaScript running in the context of a file\n     * scheme URL should be allowed to access content from any origin.\n     * Including accessing content from other file scheme URLs\n     * @platform android\n     */\n    allowUniversalAccessFromFileURLs: PropTypes.bool,\n\n    /**\n     * List of origin strings to allow being navigated to. The strings allow\n     * wildcards and get matched against *just* the origin (not the full URL).\n     * If the user taps to navigate to a new page but the new page is not in\n     * this whitelist, the URL will be opened by the Android OS.\n     * The default whitelisted origins are \"http://*\" and \"https://*\".\n     */\n    originWhitelist: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Function that accepts a string that will be passed to the WebView and\n     * executed immediately as JavaScript.\n     */\n    injectJavaScript: PropTypes.func,\n\n    /**\n     * Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.\n     *\n     * Possible values for `mixedContentMode` are:\n     *\n     * - `'never'` (default) - WebView will not allow a secure origin to load content from an insecure origin.\n     * - `'always'` - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.\n     * - `'compatibility'` -  WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.\n     * @platform android\n     */\n    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),\n\n    /**\n     * Used on Android only, controls whether form autocomplete data should be saved\n     * @platform android\n     */\n    saveFormDataDisabled: PropTypes.bool,\n\n    /**\n     * Override the native component used to render the WebView. Enables a custom native\n     * WebView which uses the same JavaScript as the original WebView.\n     */\n    nativeConfig: PropTypes.shape({\n      /*\n       * The native component used to render the WebView.\n       */\n      component: PropTypes.any,\n      /*\n       * Set props directly on the native component WebView. Enables custom props which the\n       * original WebView doesn't pass through.\n       */\n      props: PropTypes.object,\n      /*\n       * Set the ViewManager to use for communication with the native side.\n       * @platform ios\n       */\n      viewManager: PropTypes.object,\n    }),\n    /*\n     * Used on Android only, controls whether the given list of URL prefixes should\n     * make {@link com.facebook.react.views.webview.ReactWebViewClient} to launch a\n     * default activity intent for those URL instead of loading it within the webview.\n     * Use this to list URLs that WebView cannot handle, e.g. a PDF url.\n     * @platform android\n     */\n    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string),\n  };\n\n  static defaultProps = {\n    javaScriptEnabled: true,\n    thirdPartyCookiesEnabled: true,\n    scalesPageToFit: true,\n    saveFormDataDisabled: false,\n    originWhitelist: WebViewShared.defaultOriginWhitelist,\n  };\n\n  state = {\n    viewState: WebViewState.IDLE,\n    lastErrorEvent: null,\n    startInLoadingState: true,\n  };\n\n  UNSAFE_componentWillMount() {\n    if (this.props.startInLoadingState) {\n      this.setState({viewState: WebViewState.LOADING});\n    }\n  }\n\n  render() {\n    let otherView = null;\n\n    if (this.state.viewState === WebViewState.LOADING) {\n      otherView = (this.props.renderLoading || defaultRenderLoading)();\n    } else if (this.state.viewState === WebViewState.ERROR) {\n      const errorEvent = this.state.lastErrorEvent;\n      otherView =\n        this.props.renderError &&\n        this.props.renderError(\n          errorEvent.domain,\n          errorEvent.code,\n          errorEvent.description,\n        );\n    } else if (this.state.viewState !== WebViewState.IDLE) {\n      console.error(\n        'RCTWebView invalid state encountered: ' + this.state.loading,\n      );\n    }\n\n    const webViewStyles = [styles.container, this.props.style];\n    if (\n      this.state.viewState === WebViewState.LOADING ||\n      this.state.viewState === WebViewState.ERROR\n    ) {\n      // if we're in either LOADING or ERROR states, don't show the webView\n      webViewStyles.push(styles.hidden);\n    }\n\n    const source = this.props.source || {};\n    if (this.props.html) {\n      source.html = this.props.html;\n    } else if (this.props.url) {\n      source.uri = this.props.url;\n    }\n\n    if (source.method === 'POST' && source.headers) {\n      console.warn(\n        'WebView: `source.headers` is not supported when using POST.',\n      );\n    } else if (source.method === 'GET' && source.body) {\n      console.warn('WebView: `source.body` is not supported when using GET.');\n    }\n\n    const nativeConfig = this.props.nativeConfig || {};\n\n    const originWhitelist = (this.props.originWhitelist || []).map(\n      WebViewShared.originWhitelistToRegex,\n    );\n\n    let NativeWebView = nativeConfig.component || RCTWebView;\n\n    const webView = (\n      <NativeWebView\n        ref={RCT_WEBVIEW_REF}\n        key=\"webViewKey\"\n        style={webViewStyles}\n        source={resolveAssetSource(source)}\n        scalesPageToFit={this.props.scalesPageToFit}\n        allowFileAccess={this.props.allowFileAccess}\n        injectedJavaScript={this.props.injectedJavaScript}\n        userAgent={this.props.userAgent}\n        javaScriptEnabled={this.props.javaScriptEnabled}\n        thirdPartyCookiesEnabled={this.props.thirdPartyCookiesEnabled}\n        domStorageEnabled={this.props.domStorageEnabled}\n        messagingEnabled={typeof this.props.onMessage === 'function'}\n        onMessage={this.onMessage}\n        contentInset={this.props.contentInset}\n        automaticallyAdjustContentInsets={\n          this.props.automaticallyAdjustContentInsets\n        }\n        onContentSizeChange={this.props.onContentSizeChange}\n        onLoadingStart={this.onLoadingStart}\n        onLoadingFinish={this.onLoadingFinish}\n        onLoadingError={this.onLoadingError}\n        testID={this.props.testID}\n        geolocationEnabled={this.props.geolocationEnabled}\n        mediaPlaybackRequiresUserAction={\n          this.props.mediaPlaybackRequiresUserAction\n        }\n        allowUniversalAccessFromFileURLs={\n          this.props.allowUniversalAccessFromFileURLs\n        }\n        originWhitelist={originWhitelist}\n        mixedContentMode={this.props.mixedContentMode}\n        saveFormDataDisabled={this.props.saveFormDataDisabled}\n        urlPrefixesForDefaultIntent={this.props.urlPrefixesForDefaultIntent}\n        {...nativeConfig.props}\n      />\n    );\n\n    return (\n      <View style={styles.container}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n\n  goForward = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goForward,\n      null,\n    );\n  };\n\n  goBack = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goBack,\n      null,\n    );\n  };\n\n  reload = () => {\n    this.setState({\n      viewState: WebViewState.LOADING,\n    });\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.reload,\n      null,\n    );\n  };\n\n  stopLoading = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.stopLoading,\n      null,\n    );\n  };\n\n  postMessage = data => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.postMessage,\n      [String(data)],\n    );\n  };\n\n  /**\n   * Injects a javascript string into the referenced WebView. Deliberately does not\n   * return a response because using eval() to return a response breaks this method\n   * on pages with a Content Security Policy that disallows eval(). If you need that\n   * functionality, look into postMessage/onMessage.\n   */\n  injectJavaScript = data => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.injectJavaScript,\n      [data],\n    );\n  };\n\n  /**\n   * We return an event with a bunch of fields including:\n   *  url, title, loading, canGoBack, canGoForward\n   */\n  updateNavigationState = event => {\n    if (this.props.onNavigationStateChange) {\n      this.props.onNavigationStateChange(event.nativeEvent);\n    }\n  };\n\n  getWebViewHandle = () => {\n    return ReactNative.findNodeHandle(this.refs[RCT_WEBVIEW_REF]);\n  };\n\n  onLoadingStart = event => {\n    const onLoadStart = this.props.onLoadStart;\n    onLoadStart && onLoadStart(event);\n    this.updateNavigationState(event);\n  };\n\n  onLoadingError = event => {\n    event.persist(); // persist this event because we need to store it\n    const {onError, onLoadEnd} = this.props;\n    onError && onError(event);\n    onLoadEnd && onLoadEnd(event);\n    console.warn('Encountered an error loading page', event.nativeEvent);\n\n    this.setState({\n      lastErrorEvent: event.nativeEvent,\n      viewState: WebViewState.ERROR,\n    });\n  };\n\n  onLoadingFinish = event => {\n    const {onLoad, onLoadEnd} = this.props;\n    onLoad && onLoad(event);\n    onLoadEnd && onLoadEnd(event);\n    this.setState({\n      viewState: WebViewState.IDLE,\n    });\n    this.updateNavigationState(event);\n  };\n\n  onMessage = (event: Event) => {\n    const {onMessage} = this.props;\n    onMessage && onMessage(event);\n  };\n}\n\nconst RCTWebView = requireNativeComponent('RCTWebView');\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    height: 0,\n    flex: 0, // disable 'flex:1' when hiding a View\n  },\n  loadingView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n});\n\nmodule.exports = WebView;\n"],"names":["EdgeInsetsPropType","require","d","ActivityIndicator","React","PropTypes","ReactNative","StyleSheet","UIManager","View","ViewPropTypes","WebViewShared","deprecatedPropType","keyMirror","requireNativeComponent","resolveAssetSource","RCT_WEBVIEW_REF","WebViewState","IDLE","LOADING","ERROR","defaultRenderLoading","createElement","style","styles","loadingView","loadingProgressBar","WebView","state","viewState","lastErrorEvent","startInLoadingState","goForward","dispatchViewManagerCommand","_this","getWebViewHandle","RCTWebView","Commands","goBack","reload","setState","stopLoading","postMessage","data","String","injectJavaScript","updateNavigationState","event","props","onNavigationStateChange","nativeEvent","findNodeHandle","refs","onLoadingStart","onLoadStart","onLoadingError","persist","_this$props","onError","onLoadEnd","console","warn","onLoadingFinish","_this$props2","onLoad","onMessage","this","otherView","renderLoading","errorEvent","renderError","domain","code","description","error","loading","webViewStyles","container","push","hidden","source","html","url","uri","method","headers","body","nativeConfig","originWhitelist","map","originWhitelistToRegex","NativeWebView","component","webView","_extends","ref","key","scalesPageToFit","allowFileAccess","injectedJavaScript","userAgent","javaScriptEnabled","thirdPartyCookiesEnabled","domStorageEnabled","messagingEnabled","contentInset","automaticallyAdjustContentInsets","onContentSizeChange","testID","geolocationEnabled","mediaPlaybackRequiresUserAction","allowUniversalAccessFromFileURLs","mixedContentMode","saveFormDataDisabled","urlPrefixesForDefaultIntent","Component","propTypes","func","bool","string","oneOfType","shape","oneOf","object","baseUrl","number","useWebKit","arrayOf","any","viewManager","defaultProps","defaultOriginWhitelist","create","flex","height","justifyContent","alignItems","module","exports"],"mappings":"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","file":"308.js"}