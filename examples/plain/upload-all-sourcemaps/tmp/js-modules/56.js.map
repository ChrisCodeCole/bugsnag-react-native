{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/ReactNative/UIManager.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nconst defineLazyObjectProperty = require('defineLazyObjectProperty');\nconst invariant = require('fbjs/lib/invariant');\n\nconst {UIManager} = NativeModules;\n\ninvariant(\n  UIManager,\n  'UIManager is undefined. The native module config is probably incorrect.',\n);\n\n// In past versions of ReactNative users called UIManager.takeSnapshot()\n// However takeSnapshot was moved to ReactNative in order to support flat\n// bundles and to avoid a cyclic dependency between UIManager and ReactNative.\n// UIManager.takeSnapshot still exists though. In order to avoid confusion or\n// accidental usage, mask the method with a deprecation warning.\nUIManager.__takeSnapshot = UIManager.takeSnapshot;\nUIManager.takeSnapshot = function() {\n  invariant(\n    false,\n    'UIManager.takeSnapshot should not be called directly. ' +\n      'Use ReactNative.takeSnapshot instead.',\n  );\n};\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(UIManager).forEach(viewName => {\n    const viewConfig = UIManager[viewName];\n    if (viewConfig.Manager) {\n      defineLazyObjectProperty(viewConfig, 'Constants', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const constants = {};\n          viewManager &&\n            Object.keys(viewManager).forEach(key => {\n              const value = viewManager[key];\n              if (typeof value !== 'function') {\n                constants[key] = value;\n              }\n            });\n          return constants;\n        },\n      });\n      defineLazyObjectProperty(viewConfig, 'Commands', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const commands = {};\n          let index = 0;\n          viewManager &&\n            Object.keys(viewManager).forEach(key => {\n              const value = viewManager[key];\n              if (typeof value === 'function') {\n                commands[key] = index++;\n              }\n            });\n          return commands;\n        },\n      });\n    }\n  });\n} else if (UIManager.ViewManagerNames) {\n  // We want to add all the view managers to the UIManager.\n  // However, the way things are set up, the list of view managers is not known at compile time.\n  // As Prepack runs at compile it, it cannot process this loop.\n  // So we wrap it in a special __residual call, which basically tells Prepack to ignore it.\n  let residual = global.__residual\n    ? global.__residual\n    : (_, f, ...args) => f.apply(undefined, args);\n  residual(\n    'void',\n    (UIManager, defineLazyObjectProperty) => {\n      UIManager.ViewManagerNames.forEach(viewManagerName => {\n        defineLazyObjectProperty(UIManager, viewManagerName, {\n          get: () => UIManager.getConstantsForViewManager(viewManagerName),\n        });\n      });\n    },\n    UIManager,\n    defineLazyObjectProperty,\n  );\n\n  // As Prepack now no longer knows which properties exactly the UIManager has,\n  // we also tell Prepack that it has only partial knowledge of the UIManager,\n  // so that any accesses to unknown properties along the global code will fail\n  // when Prepack encounters them.\n  if (global.__makePartial) global.__makePartial(UIManager);\n}\n\nmodule.exports = UIManager;\n"],"names":["NativeModules","require","d","defineLazyObjectProperty","invariant","UIManager","__takeSnapshot","takeSnapshot","ViewManagerNames","global","__residual","_","f","_len","arguments","length","args","Array","_key","apply","undefined","forEach","viewManagerName","get","getConstantsForViewManager","__makePartial","module","exports"],"mappings":"4BASA,aAEA,IAAMA,EAAgBC,EAAOC,EAAA,IAGvBC,GAFWF,EAAOC,EAAA,IAESD,EAAOC,EAAA,KAClCE,EAAYH,EAAOC,EAAA,IAElBG,EAAaL,EAAbK,WAEPD,EACEC,EACA,2EAQFA,EAAUC,eAAiBD,EAAUE,aACrCF,EAAUE,aAAe,WACvBH,GACE,EADO,gGA+CAC,EAAUG,qBAKJC,EAAOC,WAClBD,EAAOC,WACP,SAACC,EAAGC,GAAJ,IAAA,IAAAC,EAAAC,UAAAC,OAAUC,EAAV,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAUF,EAAVE,EAAA,GAAAJ,UAAAI,GAAA,OAAmBN,EAAEO,WAAMC,EAAWJ,KAExC,OACA,SAACX,EAAWF,GACVE,EAAUG,iBAAiBa,QAAQ,SAAAC,GACjCnB,EAAyBE,EAAWiB,GAClCC,IAAK,WAAA,OAAMlB,EAAUmB,2BAA2BF,SAItDjB,EACAF,GAOEM,EAAOgB,eAAehB,EAAOgB,cAAcpB,IAGjDqB,EAAOC,QAAUtB","file":"56.js"}