{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Alert/AlertIOS.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nconst RCTAlertManager = require('NativeModules').AlertManager;\n\n/**\n * An Alert button type\n */\nexport type AlertType = $Enum<{\n  /**\n   * Default alert with no inputs\n   */\n  default: string,\n  /**\n   * Plain text input alert\n   */\n  'plain-text': string,\n  /**\n   * Secure text input alert\n   */\n  'secure-text': string,\n  /**\n   * Login and password alert\n   */\n  'login-password': string,\n}>;\n\n/**\n * An Alert button style\n */\nexport type AlertButtonStyle = $Enum<{\n  /**\n   * Default button style\n   */\n  default: string,\n  /**\n   * Cancel button style\n   */\n  cancel: string,\n  /**\n   * Destructive button style\n   */\n  destructive: string,\n}>;\n\n/**\n * Array or buttons\n * @typedef {Array} ButtonsArray\n * @property {string=} text Button label\n * @property {Function=} onPress Callback function when button pressed\n * @property {AlertButtonStyle=} style Button style\n */\nexport type ButtonsArray = Array<{\n  /**\n   * Button label\n   */\n  text?: string,\n  /**\n   * Callback function when button pressed\n   */\n  onPress?: ?Function,\n  /**\n   * Button style\n   */\n  style?: AlertButtonStyle,\n}>;\n\n/**\n * Use `AlertIOS` to display an alert dialog with a message or to create a prompt for user input on iOS. If you don't need to prompt for user input, we recommend using `Alert.alert() for cross-platform support.\n *\n * See http://facebook.github.io/react-native/docs/alertios.html\n */\nclass AlertIOS {\n  /**\n   * Create and display a popup alert.\n   *\n   * See http://facebook.github.io/react-native/docs/alertios.html#alert\n   */\n  static alert(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?((() => void) | ButtonsArray),\n    type?: AlertType,\n  ): void {\n    if (typeof type !== 'undefined') {\n      console.warn(\n        'AlertIOS.alert() with a 4th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.',\n      );\n      this.prompt(title, message, callbackOrButtons, type);\n      return;\n    }\n    this.prompt(title, message, callbackOrButtons, 'default');\n  }\n\n  /**\n   * Create and display a prompt to enter some text.\n   *\n   * See http://facebook.github.io/react-native/docs/alertios.html#prompt\n   */\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | ButtonsArray),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n  ): void {\n    if (typeof type === 'function') {\n      console.warn(\n        'You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is ' +\n          'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' +\n          'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' +\n          'keyboardType) and the old syntax will be removed in a future version.',\n      );\n\n      const callback = type;\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          type: 'plain-text',\n          defaultValue: message,\n        },\n        (id, value) => {\n          callback(value);\n        },\n      );\n      return;\n    }\n\n    let callbacks = [];\n    const buttons = [];\n    let cancelButtonKey;\n    let destructiveButtonKey;\n    if (typeof callbackOrButtons === 'function') {\n      callbacks = [callbackOrButtons];\n    } else if (callbackOrButtons instanceof Array) {\n      callbackOrButtons.forEach((btn, index) => {\n        callbacks[index] = btn.onPress;\n        if (btn.style === 'cancel') {\n          cancelButtonKey = String(index);\n        } else if (btn.style === 'destructive') {\n          destructiveButtonKey = String(index);\n        }\n        if (btn.text || index < (callbackOrButtons || []).length - 1) {\n          const btnDef = {};\n          btnDef[index] = btn.text || '';\n          buttons.push(btnDef);\n        }\n      });\n    }\n\n    RCTAlertManager.alertWithArgs(\n      {\n        title: title || '',\n        message: message || undefined,\n        buttons,\n        type: type || undefined,\n        defaultValue,\n        cancelButtonKey,\n        destructiveButtonKey,\n        keyboardType,\n      },\n      (id, value) => {\n        const cb = callbacks[id];\n        cb && cb(value);\n      },\n    );\n  }\n}\n\nmodule.exports = AlertIOS;\n"],"names":["RCTAlertManager","require","d","AlertManager","AlertIOS","title","message","callbackOrButtons","type","console","warn","this","prompt","arguments","length","undefined","defaultValue","keyboardType","cancelButtonKey","destructiveButtonKey","callbacks","buttons","Array","forEach","btn","index","onPress","style","String","text","btnDef","push","alertWithArgs","id","value","cb","callback","module","exports"],"mappings":"4BAWA,qCAEMA,EAAkBC,EAAOC,EAAA,IAAkBC,aAqE3CC,kFAOFC,EACAC,EACAC,EACAC,GAEA,QAAoB,IAATA,EAKT,OAJAC,QAAQC,KACN,uHAEFC,KAAKC,OAAOP,EAAOC,EAASC,EAAmBC,GAGjDG,KAAKC,OAAOP,EAAOC,EAASC,EAAmB,0CAS/CF,EACAC,EACAC,GAIM,IAHNC,EAGMK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAHc,aACpBG,EAEMH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EADNE,EACMJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACN,GAAoB,mBAATP,EAAX,CAsBA,IAEIU,EACAC,EAHAC,KACEC,KAG2B,mBAAtBd,EACTa,GAAab,GACJA,aAA6Be,OACtCf,EAAkBgB,QAAQ,SAACC,EAAKC,GAO9B,GANAL,EAAUK,GAASD,EAAIE,QACL,WAAdF,EAAIG,MACNT,EAAkBU,OAAOH,GACF,gBAAdD,EAAIG,QACbR,EAAuBS,OAAOH,IAE5BD,EAAIK,MAAQJ,GAASlB,OAAyBO,OAAS,EAAG,CAC5D,IAAMgB,KACNA,EAAOL,GAASD,EAAIK,MAAQ,GAC5BR,EAAQU,KAAKD,MAKnB9B,EAAgBgC,eAEZ3B,MAAOA,GAAS,GAChBC,QAASA,QAAWS,EACpBM,QAAAA,EACAb,KAAMA,QAAQO,EACdC,aAAAA,EACAE,gBAAAA,EACAC,qBAAAA,EACAF,aAAAA,GAEF,SAACgB,EAAIC,GACH,IAAMC,EAAKf,EAAUa,GACrBE,GAAMA,EAAGD,SAzDb,CACEzB,QAAQC,KAAR,mXAOA,IAAM0B,EAAW5B,EACjBR,EAAgBgC,eAEZ3B,MAAOA,GAAS,GAChBG,KAAM,aACNQ,aAAcV,GAEhB,SAAC2B,EAAIC,GACHE,EAASF,gBA+CnBG,EAAOC,QAAUlC","file":"142.js"}