{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nimport type {Props as FlatListProps} from 'FlatList';\nimport type {renderItemType} from 'VirtualizedList';\n\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst SwipeableRow = require('SwipeableRow');\nconst FlatList = require('FlatList');\n\ntype SwipableListProps = {\n  /**\n   * To alert the user that swiping is possible, the first row can bounce\n   * on component mount.\n   */\n  bounceFirstRowOnMount: boolean,\n  // Maximum distance to open to after a swipe\n  maxSwipeDistance: number | (Object => number),\n  // Callback method to render the view that will be unveiled on swipe\n  renderQuickActions: renderItemType,\n};\n\ntype Props<ItemT> = SwipableListProps & FlatListProps<ItemT>;\n\ntype State = {\n  openRowKey: ?string,\n};\n\n/**\n * A container component that renders multiple SwipeableRow's in a FlatList\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `FlatList`, so use it as if it were a FlatList, but\n * with extra props, i.e.\n *\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..FlatList props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - Increase performance on iOS by locking list swiping when row swiping is occurring\n * - More to come\n */\n\nclass SwipeableFlatList<ItemT> extends React.Component<Props<ItemT>, State> {\n  props: Props<ItemT>;\n  state: State;\n\n  _flatListRef: ?FlatList<ItemT> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static propTypes = {\n    ...FlatList.propTypes,\n\n    /**\n     * To alert the user that swiping is possible, the first row can bounce\n     * on component mount.\n     */\n    bounceFirstRowOnMount: PropTypes.bool.isRequired,\n\n    // Maximum distance to open to after a swipe\n    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func])\n      .isRequired,\n\n    // Callback method to render the view that will be unveiled on swipe\n    renderQuickActions: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    ...FlatList.defaultProps,\n    bounceFirstRowOnMount: true,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props<ItemT>, context: any): void {\n    super(props, context);\n    this.state = {\n      openRowKey: null,\n    };\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n  }\n\n  render(): React.Node {\n    return (\n      <FlatList\n        {...this.props}\n        ref={ref => {\n          this._flatListRef = ref;\n        }}\n        onScroll={this._onScroll}\n        renderItem={this._renderItem}\n        extraData={this.state}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.state.openRowKey) {\n      this.setState({\n        openRowKey: null,\n      });\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  _renderItem = (info: Object): ?React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(info);\n    const key = this.props.keyExtractor(info.item, info.index);\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderItem(info);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = true;\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={key === this.state.openRowKey}\n        maxSwipeDistance={this._getMaxSwipeDistance(info)}\n        onOpen={() => this._onOpen(key)}\n        onClose={() => this._onClose(key)}\n        shouldBounceOnMount={shouldBounceOnMount}\n        onSwipeEnd={this._setListViewScrollable}\n        onSwipeStart={this._setListViewNotScrollable}>\n        {this.props.renderItem(info)}\n      </SwipeableRow>\n    );\n  };\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(info: Object): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(info);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _setListViewScrollableTo(value: boolean) {\n    if (this._flatListRef) {\n      this._flatListRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  _setListViewScrollable = () => {\n    this._setListViewScrollableTo(true);\n  };\n\n  _setListViewNotScrollable = () => {\n    this._setListViewScrollableTo(false);\n  };\n\n  _onOpen(key: any): void {\n    this.setState({\n      openRowKey: key,\n    });\n  }\n\n  _onClose(key: any): void {\n    this.setState({\n      openRowKey: null,\n    });\n  }\n}\n\nmodule.exports = SwipeableFlatList;\n"],"names":["PropTypes","require","d","React","SwipeableRow","FlatList","SwipeableFlatList","props","context","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_flatListRef","_shouldBounceFirstRowOnMount","_onScroll","e","state","openRowKey","setState","onScroll","_renderItem","info","slideoutView","renderQuickActions","key","keyExtractor","item","index","renderItem","shouldBounceOnMount","createElement","isOpen","maxSwipeDistance","_getMaxSwipeDistance","onOpen","_onOpen","onClose","_onClose","onSwipeEnd","_setListViewScrollable","onSwipeStart","_setListViewNotScrollable","_setListViewScrollableTo","bounceFirstRowOnMount","_this2","_extends","ref","extraData","value","setNativeProps","scrollEnabled","Component","propTypes","bool","isRequired","oneOfType","number","func","defaultProps","module","exports"],"mappings":"4BASA,uFAKMA,EAAYC,EAAOC,EAAA,IACnBC,EAAQF,EAAOC,EAAA,IACfE,EAAeH,EAAOC,EAAA,IACtBG,EAAWJ,EAAOC,EAAA,KAqClBI,eA8BJ,SAAAA,EAAYC,EAAqBC,GAAoB,IAAAC,EAAA,OAAAC,EAAAC,KAAAL,IACnDG,EAAAG,EAAAD,KAAAE,EAAAP,GAAAQ,KAAAH,KAAMJ,EAAOC,KA3BfO,aAAiC,KA0BoBN,EAzBrDO,8BAAwC,EAyBaP,EAuBrDQ,UAAY,SAACC,GAEPT,EAAKU,MAAMC,YACbX,EAAKY,UACHD,WAAY,OAIhBX,EAAKF,MAAMe,UAAYb,EAAKF,MAAMe,SAASJ,IA/BQT,EAkCrDc,YAAc,SAACC,GACb,IAAMC,EAAehB,EAAKF,MAAMmB,mBAAmBF,GAC7CG,EAAMlB,EAAKF,MAAMqB,aAAaJ,EAAKK,KAAML,EAAKM,OAGpD,IAAKL,EACH,OAAOhB,EAAKF,MAAMwB,WAAWP,GAG/B,IAAIQ,GAAsB,EAM1B,OALIvB,EAAKO,+BACPP,EAAKO,8BAA+B,EACpCgB,GAAsB,GAItB7B,EAAA8B,cAAC7B,GACCqB,aAAcA,EACdS,OAAQP,IAAQlB,EAAKU,MAAMC,WAC3Be,iBAAkB1B,EAAK2B,qBAAqBZ,GAC5Ca,OAAQ,WAAA,OAAM5B,EAAK6B,QAAQX,IAC3BY,QAAS,WAAA,OAAM9B,EAAK+B,SAASb,IAC7BK,oBAAqBA,EACrBS,WAAYhC,EAAKiC,uBACjBC,aAAclC,EAAKmC,2BAClBnC,EAAKF,MAAMwB,WAAWP,KA3DwBf,EAiFrDiC,uBAAyB,WACvBjC,EAAKoC,0BAAyB,IAlFqBpC,EAqFrDmC,0BAA4B,WAC1BnC,EAAKoC,0BAAyB,IApF9BpC,EAAKU,OACHC,WAAY,MAGdX,EAAKO,6BAA+BP,EAAKF,MAAMuC,sBANIrC,oDAShC,IAAAsC,EAAApC,KACnB,OACER,EAAA8B,cAAC5B,EAAD2C,KACMrC,KAAKJ,OACT0C,IAAK,SAAAA,GACHF,EAAKhC,aAAekC,GAEtB3B,SAAUX,KAAKM,UACfc,WAAYpB,KAAKY,YACjB2B,UAAWvC,KAAKQ,sDA+CDK,GACnB,MAA2C,mBAAhCb,KAAKJ,MAAM4B,iBACbxB,KAAKJ,MAAM4B,iBAAiBX,GAG9Bb,KAAKJ,MAAM4B,kEAGKgB,GACnBxC,KAAKI,cACPJ,KAAKI,aAAaqC,gBAChBC,cAAeF,oCAabxB,GACNhB,KAAKU,UACHD,WAAYO,qCAIPA,GACPhB,KAAKU,UACHD,WAAY,eA/HqBjB,EAAMmD,WAAvChD,EAOGiD,eACFlD,EAASkD,WAMZT,sBAAuB9C,EAAUwD,KAAKC,WAGtCtB,iBAAkBnC,EAAU0D,WAAW1D,EAAU2D,OAAQ3D,EAAU4D,OAChEH,WAGH/B,mBAAoB1B,EAAU4D,KAAKH,aArBjCnD,EAwBGuD,kBACFxD,EAASwD,cACZf,uBAAuB,EACvBpB,mBAAoB,WAAA,OAAM,QAyG9BoC,EAAOC,QAAUzD","file":"289.js"}