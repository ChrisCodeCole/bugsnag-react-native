{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/Components/Touchable/Touchable.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst BoundingDimensions = require('BoundingDimensions');\nconst Platform = require('Platform');\nconst Position = require('Position');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst TVEventHandler = require('TVEventHandler');\nconst TouchEventUtils = require('fbjs/lib/TouchEventUtils');\nconst UIManager = require('UIManager');\nconst View = require('View');\n\nconst keyMirror = require('fbjs/lib/keyMirror');\nconst normalizeColor = require('normalizeColor');\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\nconst States = keyMirror({\n  NOT_RESPONDER: null, // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: null, // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: null, // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: null, // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: null, // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: null, // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: null, // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: null,\n});\n\n/**\n * Quick lookup map for states that are considered to be \"active\"\n */\nconst IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nconst IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = keyMirror({\n  DELAY: null,\n  RESPONDER_GRANT: null,\n  RESPONDER_RELEASE: null,\n  RESPONDER_TERMINATED: null,\n  ENTER_PRESS_RECT: null,\n  LEAVE_PRESS_RECT: null,\n  LONG_PRESS_DETECTED: null,\n});\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  },\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  componentDidMount: function() {\n    if (!Platform.isTV) {\n      return;\n    }\n\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(this, function(cmp, evt) {\n      const myTag = ReactNative.findNodeHandle(cmp);\n      evt.dispatchConfig = {};\n      if (myTag === evt.tag) {\n        if (evt.eventType === 'focus') {\n          cmp.touchableHandleFocus(evt);\n        } else if (evt.eventType === 'blur') {\n          cmp.touchableHandleBlur(evt);\n        } else if (evt.eventType === 'select') {\n          cmp.touchableHandlePress &&\n            !cmp.props.disabled &&\n            cmp.touchableHandlePress(evt);\n        }\n      }\n    });\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    if (this._tvEventHandler) {\n      this._tvEventHandler.disable();\n      delete this._tvEventHandler;\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function() {\n    return {\n      touchable: {touchState: undefined, responderID: null},\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function() {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function(e) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS,\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS,\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function(e) {\n    // Not enough time elapsed yet, wait for highlight -\n    // this is just a perf optimization.\n    if (\n      this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN\n    ) {\n      return;\n    }\n\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX,\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop\n      ? this.touchableGetHitSlop()\n      : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    const touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY,\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX <\n        positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n      pageY <\n        positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this.\n   */\n  touchableHandleFocus: function(e: Event) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   */\n  touchableHandleBlur: function(e: Event) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n\n  _handleQueryLayout: function(l, t, w, h, globalX, globalY) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(\n      globalX,\n      globalY,\n    );\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(\n      w,\n      h,\n    );\n  },\n\n  _handleDelay: function(e) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function(e) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState !== States.RESPONDER_ACTIVE_PRESS_IN &&\n      curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      console.error(\n        'Attempted to transition from state `' +\n          curState +\n          '` to `' +\n          States.RESPONDER_ACTIVE_LONG_PRESS_IN +\n          '`, which is not supported. This is ' +\n          'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.',\n      );\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function(signal, e) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          responderID +\n          '`',\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          responderID +\n          '`',\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function(state) {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN ||\n      state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  _savePressInLocation: function(e) {\n    const touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function(aX, aY, bX, bY) {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function(curState, nextState, signal, e) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler\n        (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress =\n        !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        if (Platform.OS === 'android') {\n          this._playTouchSound();\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _playTouchSound: function() {\n    UIManager.playTouchSound();\n  },\n\n  _startHighlight: function(e) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function(e) {\n    if (this.touchableHandleActivePressOut) {\n      if (\n        this.touchableGetPressOutDelayMS &&\n        this.touchableGetPressOutDelayMS()\n      ) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n};\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({color, hitSlop}) => {\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (!__DEV__) {\n      throw Error(\n        'Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!',\n      );\n    }\n    const debugHitSlopStyle = {};\n    hitSlop = hitSlop || {top: 0, bottom: 0, left: 0, right: 0};\n    for (const key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    const hexColor =\n      '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={{\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55', // More opaque\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F', // Less opaque\n          ...debugHitSlopStyle,\n        }}\n      />\n    );\n  },\n};\n\nmodule.exports = Touchable;\n"],"names":["BoundingDimensions","require","d","Platform","Position","ReactNative","TVEventHandler","TouchEventUtils","UIManager","keyMirror","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","Touchable","Mixin","componentDidMount","isTV","this","_tvEventHandler","enable","cmp","evt","myTag","findNodeHandle","dispatchConfig","tag","eventType","touchableHandleFocus","touchableHandleBlur","touchableHandlePress","props","disabled","componentWillUnmount","disable","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","undefined","responderID","touchableHandleResponderTerminationRequest","rejectResponderTermination","touchableHandleStartShouldSetResponder","touchableLongPressCancelsPress","touchableHandleResponderGrant","e","dispatchID","currentTarget","persist","state","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","extractSingleTouch","nativeEvent","pageX","pageY","pressInLocation","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","width","height","onFocus","onBlur","_remeasureMetricsOnActivation","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","release","getPooled","curState","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","_playTouchSound","playTouchSound","touchableHandleActivePressIn","_this","touchableHandleActivePressOut","touchableGetPressOutDelayMS","TOUCH_TARGET_DEBUG","renderDebugView","_ref","color","module","exports"],"mappings":"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","file":"188.js"}