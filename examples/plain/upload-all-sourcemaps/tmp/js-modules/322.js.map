{"version":3,"sources":["/Users/jamielynch/repos/bugsnag-react-native/examples/plain/node_modules/react-native/Libraries/AppState/AppState.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst RCTAppState = NativeModules.AppState;\n\nconst logError = require('logError');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See http://facebook.github.io/react-native/docs/appstate.html\n */\nclass AppState extends NativeEventEmitter {\n  _eventHandlers: Object;\n  currentState: ?string;\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTAppState);\n\n    this.isAvailable = true;\n    this._eventHandlers = {\n      change: new Map(),\n      memoryWarning: new Map(),\n    };\n\n    // TODO: Remove the 'active' fallback after `initialAppState` is exported by\n    // the Android implementation.\n    this.currentState = RCTAppState.initialAppState || 'active';\n\n    let eventUpdated = false;\n\n    // TODO: this is a terrible solution - in order to ensure `currentState`\n    // prop is up to date, we have to register an observer that updates it\n    // whenever the state changes, even if nobody cares. We should just\n    // deprecate the `currentState` property and get rid of this.\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n\n    // TODO: see above - this request just populates the value of `currentState`\n    // when the module is first initialized. Would be better to get rid of the\n    // prop and expose `getCurrentAppState` method directly.\n    RCTAppState.getCurrentAppState(appStateData => {\n      // It's possible that the state will have changed here & listeners need to be notified\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See http://facebook.github.io/react-native/docs/appstate.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    invariant(\n      ['change', 'memoryWarning'].indexOf(type) !== -1,\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    if (type === 'change') {\n      this._eventHandlers[type].set(\n        handler,\n        this.addListener('appStateDidChange', appStateData => {\n          handler(appStateData.app_state);\n        }),\n      );\n    } else if (type === 'memoryWarning') {\n      this._eventHandlers[type].set(\n        handler,\n        this.addListener('memoryWarning', handler),\n      );\n    }\n  }\n\n  /**\n   * Remove a handler by passing the `change` event type and the handler.\n   *\n   * See http://facebook.github.io/react-native/docs/appstate.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    invariant(\n      ['change', 'memoryWarning'].indexOf(type) !== -1,\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n    this._eventHandlers[type].get(handler).remove();\n    this._eventHandlers[type].delete(handler);\n  }\n}\n\nif (__DEV__ && !RCTAppState) {\n  class MissingNativeAppStateShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTAppState', 'AppState');\n    }\n\n    get currentState(): ?string {\n      this.throwMissingNativeModule();\n    }\n\n    addEventListener(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    removeEventListener(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTAppState` module. If you don't\n  // include it, `AppState.isAvailable` will return `false`, and any method\n  // calls will throw. We reassign the class variable to keep the autodoc\n  // generator happy.\n  AppState = new MissingNativeAppStateShim();\n} else {\n  AppState = new AppState();\n}\n\nmodule.exports = AppState;\n"],"names":["NativeEventEmitter","require","d","RCTAppState","AppState","logError","invariant","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","isAvailable","_eventHandlers","change","Map","memoryWarning","currentState","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","type","handler","indexOf","set","has","get","remove","delete","module","exports"],"mappings":"4BAUA,mEAGMA,GADgCC,EAAOC,EAAA,IAClBD,EAAOC,EAAA,KAE5BC,EADgBF,EAAOC,EAAA,IACKE,SAE5BC,EAAWJ,EAAOC,EAAA,IAClBI,EAAYL,EAAOC,EAAA,IAQnBE,eAKJ,SAAAA,IAAc,IAAAG,EAAAC,EAAAC,KAAAL,IACZG,EAAAG,EAAAD,KAAAE,EAAAP,GAAAQ,KAAAH,KAAMN,KAHRU,aAAuB,EAKrBN,EAAKM,aAAc,EACnBN,EAAKO,gBACHC,OAAQ,IAAIC,IACZC,cAAe,IAAID,KAKrBT,EAAKW,aAAef,EAAYgB,iBAAmB,SAEnD,IAAIC,GAAe,EAbP,OAmBZb,EAAKc,YAAY,oBAAqB,SAAAC,GACpCF,GAAe,EACfb,EAAKW,aAAeI,EAAaC,YAMnCpB,EAAYqB,mBAAmB,SAAAF,GAExBF,GAAgBb,EAAKW,eAAiBI,EAAaC,YACtDhB,EAAKW,aAAeI,EAAaC,UACjChB,EAAKkB,KAAK,oBAAqBH,KAEhCjB,GAjCSE,aALOP,+CAoDJ0B,EAAcC,GAC7BrB,GACE,KAAC,SAAU,iBAAiBsB,QAAQF,GACpC,6CACAA,GAEW,WAATA,EACFjB,KAAKK,eAAeY,GAAMG,IACxBF,EACAlB,KAAKY,YAAY,oBAAqB,SAAAC,GACpCK,EAAQL,EAAaC,cAGP,kBAATG,GACTjB,KAAKK,eAAeY,GAAMG,IACxBF,EACAlB,KAAKY,YAAY,gBAAiBM,gDAUpBD,EAAcC,GAChCrB,GACE,KAAC,SAAU,iBAAiBsB,QAAQF,GACpC,oDACAA,GAEGjB,KAAKK,eAAeY,GAAMI,IAAIH,KAGnClB,KAAKK,eAAeY,GAAMK,IAAIJ,GAASK,SACvCvB,KAAKK,eAAeY,GAAMO,OAAON,cA6BnCvB,EAAW,IAAIA,EAGjB8B,EAAOC,QAAU/B","file":"322.js"}